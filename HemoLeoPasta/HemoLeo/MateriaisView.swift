//
// MateriaisView.swift
// Generated by Core Animator version 1.3.2 on 20/11/16.
//
// DO NOT MODIFY THIS FILE. IT IS AUTO-GENERATED AND WILL BE OVERWRITTEN
//

import UIKit

private class MateriaisPassthroughView: UIView {
    override func point(inside point: CGPoint, with event: UIEvent?) -> Bool {
        for subview in subviews as [UIView] {
            if subview.point(inside: convert(point, to: subview), with: event) { return true }
        }
        return false
    }
}

@IBDesignable
class MateriaisView : UIView, CAAnimationDelegate {


	var animationCompletions = Dictionary<CAAnimation, (Bool) -> Void>()
	var viewsByName: [String : UIView]!

	// - MARK: Life Cycle

	convenience init() {
		self.init(frame: CGRect(x: 0, y: 0, width: 414, height: 454))
	}

	override init(frame: CGRect) {
		super.init(frame: frame)
		self.setupHierarchy()
	}

	required init?(coder aDecoder: NSCoder) {
		super.init(coder: aDecoder)
		self.setupHierarchy()
	}

	// - MARK: Scaling

	override func layoutSubviews() {
		super.layoutSubviews()

		if let scalingView = self.viewsByName["__scaling__"] {
			var xScale = self.bounds.size.width / scalingView.bounds.size.width
			var yScale = self.bounds.size.height / scalingView.bounds.size.height
			switch contentMode {
			case .scaleToFill:
				break
			case .scaleAspectFill:
				let scale = max(xScale, yScale)
				xScale = scale
				yScale = scale
			default:
				let scale = min(xScale, yScale)
				xScale = scale
				yScale = scale
			}
			scalingView.transform = CGAffineTransform(scaleX: xScale, y: yScale)
			scalingView.center = CGPoint(x:self.bounds.midX, y:self.bounds.midY)
		}
	}

	// - MARK: Setup

	func setupHierarchy() {
		var viewsByName: [String : UIView] = [:]
		let bundle = Bundle(for:type(of: self))
		let __scaling__ = UIView()
		__scaling__.bounds = CGRect(x:0, y:0, width:414, height:454)
		__scaling__.center = CGPoint(x:207.0, y:227.0)
		__scaling__.layer.masksToBounds = true
		self.addSubview(__scaling__)
		viewsByName["__scaling__"] = __scaling__

		let agulhaFio__root = MateriaisPassthroughView()
		let agulhaFio__xScale = MateriaisPassthroughView()
		let agulhaFio__yScale = MateriaisPassthroughView()
		let agulhaFio = UIImageView()
		let imgAgulhaFio = UIImage(named:"Agulha + fio.png", in: bundle, compatibleWith: nil)
		if imgAgulhaFio == nil {
			print("** Warning: Could not create image from 'Agulha + fio.png'")
		}
		agulhaFio.image = imgAgulhaFio
		agulhaFio.contentMode = .center
		agulhaFio.bounds = CGRect(x:0, y:0, width:276.0, height:95.0)
		agulhaFio__root.layer.position = CGPoint(x:267.152, y:179.500)
		agulhaFio__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		agulhaFio__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		agulhaFio__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(agulhaFio__root)
		agulhaFio__root.addSubview(agulhaFio__xScale)
		agulhaFio__xScale.addSubview(agulhaFio__yScale)
		agulhaFio__yScale.addSubview(agulhaFio)
		__scaling__.addSubview(agulhaFio__root)
		viewsByName["Agulha + fio__root"] = agulhaFio__root
		viewsByName["Agulha + fio__xScale"] = agulhaFio__xScale
		viewsByName["Agulha + fio__yScale"] = agulhaFio__yScale
		viewsByName["Agulha + fio"] = agulhaFio

		let alcool__root = MateriaisPassthroughView()
		let alcool__xScale = MateriaisPassthroughView()
		let alcool__yScale = MateriaisPassthroughView()
		let alcool = UIImageView()
		let imgAlcool = UIImage(named:"Alcool.png", in: bundle, compatibleWith: nil)
		if imgAlcool == nil {
			print("** Warning: Could not create image from 'Alcool.png'")
		}
		alcool.image = imgAlcool
		alcool.contentMode = .center
		alcool.bounds = CGRect(x:0, y:0, width:64.0, height:62.0)
		alcool__root.layer.position = CGPoint(x:79.307, y:417.434)
		alcool__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		alcool__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		alcool__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(alcool__root)
		alcool__root.addSubview(alcool__xScale)
		alcool__xScale.addSubview(alcool__yScale)
		alcool__yScale.addSubview(alcool)
		__scaling__.addSubview(alcool__root)
		viewsByName["Alcool__root"] = alcool__root
		viewsByName["Alcool__xScale"] = alcool__xScale
		viewsByName["Alcool__yScale"] = alcool__yScale
		viewsByName["Alcool"] = alcool

		let bandaid__root = MateriaisPassthroughView()
		let bandaid__xScale = MateriaisPassthroughView()
		let bandaid__yScale = MateriaisPassthroughView()
		let bandaid = UIImageView()
		let imgBandaid = UIImage(named:"Bandaid.png", in: bundle, compatibleWith: nil)
		if imgBandaid == nil {
			print("** Warning: Could not create image from 'Bandaid.png'")
		}
		bandaid.image = imgBandaid
		bandaid.contentMode = .center
		bandaid.bounds = CGRect(x:0, y:0, width:171.0, height:45.0)
		bandaid__root.layer.position = CGPoint(x:79.311, y:354.523)
		bandaid__xScale.transform = CGAffineTransform(scaleX: 0.71, y: 1.00)
		bandaid__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.71)
		bandaid__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(bandaid__root)
		bandaid__root.addSubview(bandaid__xScale)
		bandaid__xScale.addSubview(bandaid__yScale)
		bandaid__yScale.addSubview(bandaid)
		__scaling__.addSubview(bandaid__root)
		viewsByName["Bandaid__root"] = bandaid__root
		viewsByName["Bandaid__xScale"] = bandaid__xScale
		viewsByName["Bandaid__yScale"] = bandaid__yScale
		viewsByName["Bandaid"] = bandaid

		let diluente__root = MateriaisPassthroughView()
		let diluente__xScale = MateriaisPassthroughView()
		let diluente__yScale = MateriaisPassthroughView()
		let diluente = UIImageView()
		let imgDiluente = UIImage(named:"Diluente.png", in: bundle, compatibleWith: nil)
		if imgDiluente == nil {
			print("** Warning: Could not create image from 'Diluente.png'")
		}
		diluente.image = imgDiluente
		diluente.contentMode = .center
		diluente.bounds = CGRect(x:0, y:0, width:80.0, height:160.0)
		diluente__root.layer.position = CGPoint(x:253.070, y:93.379)
		diluente__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		diluente__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		diluente__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(diluente__root)
		diluente__root.addSubview(diluente__xScale)
		diluente__xScale.addSubview(diluente__yScale)
		diluente__yScale.addSubview(diluente)
		__scaling__.addSubview(diluente__root)
		viewsByName["Diluente__root"] = diluente__root
		viewsByName["Diluente__xScale"] = diluente__xScale
		viewsByName["Diluente__yScale"] = diluente__yScale
		viewsByName["Diluente"] = diluente

		let luvas__root = MateriaisPassthroughView()
		let luvas__xScale = MateriaisPassthroughView()
		let luvas__yScale = MateriaisPassthroughView()
		let luvas = UIImageView()
		let imgLuvas = UIImage(named:"Luvas.png", in: bundle, compatibleWith: nil)
		if imgLuvas == nil {
			print("** Warning: Could not create image from 'Luvas.png'")
		}
		luvas.image = imgLuvas
		luvas.contentMode = .center
		luvas.bounds = CGRect(x:0, y:0, width:225.0, height:215.0)
		luvas__root.layer.position = CGPoint(x:301.500, y:340.301)
		luvas__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		luvas__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		luvas__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(luvas__root)
		luvas__root.addSubview(luvas__xScale)
		luvas__xScale.addSubview(luvas__yScale)
		luvas__yScale.addSubview(luvas)
		__scaling__.addSubview(luvas__root)
		viewsByName["Luvas__root"] = luvas__root
		viewsByName["Luvas__xScale"] = luvas__xScale
		viewsByName["Luvas__yScale"] = luvas__yScale
		viewsByName["Luvas"] = luvas

		let produto__root = MateriaisPassthroughView()
		let produto__xScale = MateriaisPassthroughView()
		let produto__yScale = MateriaisPassthroughView()
		let produto = UIImageView()
		let imgProduto = UIImage(named:"Produto.png", in: bundle, compatibleWith: nil)
		if imgProduto == nil {
			print("** Warning: Could not create image from 'Produto.png'")
		}
		produto.image = imgProduto
		produto.contentMode = .center
		produto.bounds = CGRect(x:0, y:0, width:73.0, height:163.0)
		produto__root.layer.position = CGPoint(x:347.080, y:93.824)
		produto__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		produto__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		produto__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(produto__root)
		produto__root.addSubview(produto__xScale)
		produto__xScale.addSubview(produto__yScale)
		produto__yScale.addSubview(produto)
		__scaling__.addSubview(produto__root)
		viewsByName["Produto__root"] = produto__root
		viewsByName["Produto__xScale"] = produto__xScale
		viewsByName["Produto__yScale"] = produto__yScale
		viewsByName["Produto"] = produto

		let seringa__root = MateriaisPassthroughView()
		let seringa__xScale = MateriaisPassthroughView()
		let seringa__yScale = MateriaisPassthroughView()
		let seringa = UIImageView()
		let imgSeringa = UIImage(named:"Seringa.png", in: bundle, compatibleWith: nil)
		if imgSeringa == nil {
			print("** Warning: Could not create image from 'Seringa.png'")
		}
		seringa.image = imgSeringa
		seringa.contentMode = .center
		seringa.bounds = CGRect(x:0, y:0, width:64.0, height:246.0)
		seringa__root.layer.position = CGPoint(x:169.057, y:320.971)
		seringa__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		seringa__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		seringa__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(seringa__root)
		seringa__root.addSubview(seringa__xScale)
		seringa__xScale.addSubview(seringa__yScale)
		seringa__yScale.addSubview(seringa)
		__scaling__.addSubview(seringa__root)
		viewsByName["Seringa__root"] = seringa__root
		viewsByName["Seringa__xScale"] = seringa__xScale
		viewsByName["Seringa__yScale"] = seringa__yScale
		viewsByName["Seringa"] = seringa

		let tampa__root = MateriaisPassthroughView()
		let tampa__xScale = MateriaisPassthroughView()
		let tampa__yScale = MateriaisPassthroughView()
		let tampa = UIImageView()
		let imgTampa = UIImage(named:"DispositivoP0.png", in: bundle, compatibleWith: nil)
		if imgTampa == nil {
			print("** Warning: Could not create image from 'DispositivoP0.png'")
		}
		tampa.image = imgTampa
		tampa.contentMode = .center
		tampa.bounds = CGRect(x:0, y:0, width:103.0, height:169.0)
		tampa__root.layer.position = CGPoint(x:78.883, y:240.619)
		tampa__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		tampa__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		tampa__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(tampa__root)
		tampa__root.addSubview(tampa__xScale)
		tampa__xScale.addSubview(tampa__yScale)
		tampa__yScale.addSubview(tampa)
		__scaling__.addSubview(tampa__root)
		viewsByName["Tampa__root"] = tampa__root
		viewsByName["Tampa__xScale"] = tampa__xScale
		viewsByName["Tampa__yScale"] = tampa__yScale
		viewsByName["Tampa"] = tampa

		let garrote__root = MateriaisPassthroughView()
		let garrote__xScale = MateriaisPassthroughView()
		let garrote__yScale = MateriaisPassthroughView()
		let garrote = UIImageView()
		let imgGarrote = UIImage(named:"Garrote.png", in: bundle, compatibleWith: nil)
		if imgGarrote == nil {
			print("** Warning: Could not create image from 'Garrote.png'")
		}
		garrote.image = imgGarrote
		garrote.contentMode = .center
		garrote.bounds = CGRect(x:0, y:0, width:186.0, height:99.0)
		garrote__root.layer.position = CGPoint(x:114.000, y:79.979)
		garrote__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		garrote__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		garrote__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(garrote__root)
		garrote__root.addSubview(garrote__xScale)
		garrote__xScale.addSubview(garrote__yScale)
		garrote__yScale.addSubview(garrote)
		__scaling__.addSubview(garrote__root)
		viewsByName["Garrote__root"] = garrote__root
		viewsByName["Garrote__xScale"] = garrote__xScale
		viewsByName["Garrote__yScale"] = garrote__yScale
		viewsByName["Garrote"] = garrote

		self.viewsByName = viewsByName
	}

	// - MARK: materiais

	func addMateriaisAnimation() {
		addMateriaisAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addMateriaisAnimation(completion: ((Bool) -> Void)?) {
		addMateriaisAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addMateriaisAnimation(removedOnCompletion: Bool) {
		addMateriaisAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addMateriaisAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addMateriaisAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addMateriaisAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		let instantTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionDefault)
		let easeInTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseIn)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 18.500
			representativeAnimation.delegate = self
			self.layer.add(representativeAnimation, forKey: "Materiais")
			self.animationCompletions[layer.animation(forKey: "Materiais")!] = complete
		}

		let agulhaFioZPositionAnimation = CAKeyframeAnimation(keyPath: "zPosition")
		agulhaFioZPositionAnimation.duration = 16.500
		agulhaFioZPositionAnimation.values = [0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 8.000, 8.000, 7.000, 7.000, 6.000, 6.000, 5.000, 5.000, 4.000] as [Float]
		agulhaFioZPositionAnimation.keyTimes = [0.000, 0.151, 0.152, 0.273, 0.273, 0.394, 0.394, 0.515, 0.515, 0.636, 0.636, 0.758, 0.758, 0.879, 0.879, 1.000, 1.000] as [NSNumber]
		agulhaFioZPositionAnimation.timingFunctions = [instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming]
		agulhaFioZPositionAnimation.beginTime = beginTime
		agulhaFioZPositionAnimation.fillMode = fillMode
		agulhaFioZPositionAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Agulha + fio"]?.layer.add(agulhaFioZPositionAnimation, forKey:"materiais_ZPosition")

		let alcoolZPositionAnimation = CAKeyframeAnimation(keyPath: "zPosition")
		alcoolZPositionAnimation.duration = 16.500
		alcoolZPositionAnimation.values = [1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 8.000] as [Float]
		alcoolZPositionAnimation.keyTimes = [0.000, 0.151, 0.152, 0.273, 0.273, 0.394, 0.394, 0.515, 0.515, 0.636, 0.636, 0.758, 0.758, 0.879, 0.879, 1.000, 1.000] as [NSNumber]
		alcoolZPositionAnimation.timingFunctions = [instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming]
		alcoolZPositionAnimation.beginTime = beginTime
		alcoolZPositionAnimation.fillMode = fillMode
		alcoolZPositionAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Alcool"]?.layer.add(alcoolZPositionAnimation, forKey:"materiais_ZPosition")

		let bandaidZPositionAnimation = CAKeyframeAnimation(keyPath: "zPosition")
		bandaidZPositionAnimation.duration = 16.500
		bandaidZPositionAnimation.values = [2.000, 2.000, 2.000, 2.000, 2.000, 2.000, 2.000, 2.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 8.000, 8.000, 7.000] as [Float]
		bandaidZPositionAnimation.keyTimes = [0.000, 0.151, 0.152, 0.273, 0.273, 0.394, 0.394, 0.515, 0.515, 0.636, 0.636, 0.758, 0.758, 0.879, 0.879, 1.000, 1.000] as [NSNumber]
		bandaidZPositionAnimation.timingFunctions = [instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming]
		bandaidZPositionAnimation.beginTime = beginTime
		bandaidZPositionAnimation.fillMode = fillMode
		bandaidZPositionAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Bandaid"]?.layer.add(bandaidZPositionAnimation, forKey:"materiais_ZPosition")

		let diluenteZPositionAnimation = CAKeyframeAnimation(keyPath: "zPosition")
		diluenteZPositionAnimation.duration = 16.500
		diluenteZPositionAnimation.values = [3.000, 3.000, 8.000, 8.000, 7.000, 7.000, 6.000, 6.000, 5.000, 5.000, 4.000, 4.000, 3.000, 3.000, 2.000, 2.000, 1.000] as [Float]
		diluenteZPositionAnimation.keyTimes = [0.000, 0.151, 0.152, 0.273, 0.273, 0.394, 0.394, 0.515, 0.515, 0.636, 0.636, 0.758, 0.758, 0.879, 0.879, 1.000, 1.000] as [NSNumber]
		diluenteZPositionAnimation.timingFunctions = [instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming]
		diluenteZPositionAnimation.beginTime = beginTime
		diluenteZPositionAnimation.fillMode = fillMode
		diluenteZPositionAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Diluente"]?.layer.add(diluenteZPositionAnimation, forKey:"materiais_ZPosition")

		let luvasZPositionAnimation = CAKeyframeAnimation(keyPath: "zPosition")
		luvasZPositionAnimation.duration = 16.500
		luvasZPositionAnimation.values = [4.000, 4.000, 3.000, 3.000, 3.000, 3.000, 3.000, 3.000, 2.000, 2.000, 8.000, 8.000, 7.000, 7.000, 6.000, 6.000, 5.000] as [Float]
		luvasZPositionAnimation.keyTimes = [0.000, 0.151, 0.152, 0.273, 0.273, 0.394, 0.394, 0.515, 0.515, 0.636, 0.636, 0.758, 0.758, 0.879, 0.879, 1.000, 1.000] as [NSNumber]
		luvasZPositionAnimation.timingFunctions = [instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming]
		luvasZPositionAnimation.beginTime = beginTime
		luvasZPositionAnimation.fillMode = fillMode
		luvasZPositionAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Luvas"]?.layer.add(luvasZPositionAnimation, forKey:"materiais_ZPosition")

		let produtoZPositionAnimation = CAKeyframeAnimation(keyPath: "zPosition")
		produtoZPositionAnimation.duration = 16.500
		produtoZPositionAnimation.values = [5.000, 5.000, 4.000, 4.000, 8.000, 8.000, 7.000, 7.000, 6.000, 6.000, 5.000, 5.000, 4.000, 4.000, 3.000, 3.000, 2.000] as [Float]
		produtoZPositionAnimation.keyTimes = [0.000, 0.151, 0.152, 0.273, 0.273, 0.394, 0.394, 0.515, 0.515, 0.636, 0.636, 0.758, 0.758, 0.879, 0.879, 1.000, 1.000] as [NSNumber]
		produtoZPositionAnimation.timingFunctions = [instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming]
		produtoZPositionAnimation.beginTime = beginTime
		produtoZPositionAnimation.fillMode = fillMode
		produtoZPositionAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Produto"]?.layer.add(produtoZPositionAnimation, forKey:"materiais_ZPosition")

		let seringaZPositionAnimation = CAKeyframeAnimation(keyPath: "zPosition")
		seringaZPositionAnimation.duration = 16.500
		seringaZPositionAnimation.values = [6.000, 6.000, 5.000, 5.000, 4.000, 4.000, 4.000, 4.000, 3.000, 3.000, 2.000, 2.000, 8.000, 8.000, 7.000, 7.000, 6.000] as [Float]
		seringaZPositionAnimation.keyTimes = [0.000, 0.151, 0.152, 0.273, 0.273, 0.394, 0.394, 0.515, 0.515, 0.636, 0.636, 0.758, 0.758, 0.879, 0.879, 1.000, 1.000] as [NSNumber]
		seringaZPositionAnimation.timingFunctions = [instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming]
		seringaZPositionAnimation.beginTime = beginTime
		seringaZPositionAnimation.fillMode = fillMode
		seringaZPositionAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Seringa"]?.layer.add(seringaZPositionAnimation, forKey:"materiais_ZPosition")

		let tampaZPositionAnimation = CAKeyframeAnimation(keyPath: "zPosition")
		tampaZPositionAnimation.duration = 16.500
		tampaZPositionAnimation.values = [7.000, 7.000, 6.000, 6.000, 5.000, 5.000, 8.000, 8.000, 7.000, 7.000, 6.000, 6.000, 5.000, 5.000, 4.000, 4.000, 3.000] as [Float]
		tampaZPositionAnimation.keyTimes = [0.000, 0.151, 0.152, 0.273, 0.273, 0.394, 0.394, 0.515, 0.515, 0.636, 0.636, 0.758, 0.758, 0.879, 0.879, 1.000, 1.000] as [NSNumber]
		tampaZPositionAnimation.timingFunctions = [instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming]
		tampaZPositionAnimation.beginTime = beginTime
		tampaZPositionAnimation.fillMode = fillMode
		tampaZPositionAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Tampa"]?.layer.add(tampaZPositionAnimation, forKey:"materiais_ZPosition")

		let garroteZPositionAnimation = CAKeyframeAnimation(keyPath: "zPosition")
		garroteZPositionAnimation.duration = 16.500
		garroteZPositionAnimation.values = [8.000, 8.000, 7.000, 7.000, 6.000, 6.000, 5.000, 5.000, 4.000, 4.000, 3.000, 3.000, 2.000, 2.000, 1.000, 1.000, 0.000] as [Float]
		garroteZPositionAnimation.keyTimes = [0.000, 0.151, 0.152, 0.273, 0.273, 0.394, 0.394, 0.515, 0.515, 0.636, 0.636, 0.758, 0.758, 0.879, 0.879, 1.000, 1.000] as [NSNumber]
		garroteZPositionAnimation.timingFunctions = [instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming, instantTiming]
		garroteZPositionAnimation.beginTime = beginTime
		garroteZPositionAnimation.fillMode = fillMode
		garroteZPositionAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Garrote"]?.layer.add(garroteZPositionAnimation, forKey:"materiais_ZPosition")

		let produtoScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		produtoScaleXAnimation.duration = 18.500
		produtoScaleXAnimation.values = [1.000, 1.000, 1.300, 1.300, 1.000, 1.000] as [Float]
		produtoScaleXAnimation.keyTimes = [0.000, 0.243, 0.270, 0.324, 0.351, 1.000] as [NSNumber]
		produtoScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		produtoScaleXAnimation.beginTime = beginTime
		produtoScaleXAnimation.fillMode = fillMode
		produtoScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Produto__xScale"]?.layer.add(produtoScaleXAnimation, forKey:"materiais_ScaleX")

		let produtoScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		produtoScaleYAnimation.duration = 18.500
		produtoScaleYAnimation.values = [1.000, 1.000, 1.300, 1.300, 1.000, 1.000] as [Float]
		produtoScaleYAnimation.keyTimes = [0.000, 0.243, 0.270, 0.324, 0.351, 1.000] as [NSNumber]
		produtoScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		produtoScaleYAnimation.beginTime = beginTime
		produtoScaleYAnimation.fillMode = fillMode
		produtoScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Produto__yScale"]?.layer.add(produtoScaleYAnimation, forKey:"materiais_ScaleY")

		let produtoTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		produtoTranslationXAnimation.duration = 18.500
		produtoTranslationXAnimation.values = [0.000, 0.000, -139.619, -139.619, 0.000, 0.000] as [Float]
		produtoTranslationXAnimation.keyTimes = [0.000, 0.243, 0.270, 0.324, 0.351, 1.000] as [NSNumber]
		produtoTranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		produtoTranslationXAnimation.beginTime = beginTime
		produtoTranslationXAnimation.fillMode = fillMode
		produtoTranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Produto__root"]?.layer.add(produtoTranslationXAnimation, forKey:"materiais_TranslationX")

		let produtoTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		produtoTranslationYAnimation.duration = 18.500
		produtoTranslationYAnimation.values = [0.000, 0.000, 134.061, 134.061, 0.000, 0.000] as [Float]
		produtoTranslationYAnimation.keyTimes = [0.000, 0.243, 0.270, 0.324, 0.351, 1.000] as [NSNumber]
		produtoTranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		produtoTranslationYAnimation.beginTime = beginTime
		produtoTranslationYAnimation.fillMode = fillMode
		produtoTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Produto__root"]?.layer.add(produtoTranslationYAnimation, forKey:"materiais_TranslationY")

		let garroteScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		garroteScaleXAnimation.duration = 18.500
		garroteScaleXAnimation.values = [1.000, 1.000, 1.300, 1.300, 1.000, 1.000] as [Float]
		garroteScaleXAnimation.keyTimes = [0.000, 0.027, 0.054, 0.108, 0.135, 1.000] as [NSNumber]
		garroteScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		garroteScaleXAnimation.beginTime = beginTime
		garroteScaleXAnimation.fillMode = fillMode
		garroteScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Garrote__xScale"]?.layer.add(garroteScaleXAnimation, forKey:"materiais_ScaleX")

		let garroteScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		garroteScaleYAnimation.duration = 18.500
		garroteScaleYAnimation.values = [1.000, 1.000, 1.300, 1.300, 1.000, 1.000] as [Float]
		garroteScaleYAnimation.keyTimes = [0.000, 0.027, 0.054, 0.108, 0.135, 1.000] as [NSNumber]
		garroteScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		garroteScaleYAnimation.beginTime = beginTime
		garroteScaleYAnimation.fillMode = fillMode
		garroteScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Garrote__yScale"]?.layer.add(garroteScaleYAnimation, forKey:"materiais_ScaleY")

		let garroteTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		garroteTranslationXAnimation.duration = 18.500
		garroteTranslationXAnimation.values = [0.000, 0.000, 94.215, 94.000, 0.000, 0.000] as [Float]
		garroteTranslationXAnimation.keyTimes = [0.000, 0.027, 0.054, 0.108, 0.135, 1.000] as [NSNumber]
		garroteTranslationXAnimation.timingFunctions = [linearTiming, easeInTiming, linearTiming, linearTiming, linearTiming]
		garroteTranslationXAnimation.beginTime = beginTime
		garroteTranslationXAnimation.fillMode = fillMode
		garroteTranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Garrote__root"]?.layer.add(garroteTranslationXAnimation, forKey:"materiais_TranslationX")

		let garroteTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		garroteTranslationYAnimation.duration = 18.500
		garroteTranslationYAnimation.values = [0.000, 0.000, 118.166, 118.000, 0.000, 0.000] as [Float]
		garroteTranslationYAnimation.keyTimes = [0.000, 0.027, 0.054, 0.108, 0.135, 1.000] as [NSNumber]
		garroteTranslationYAnimation.timingFunctions = [linearTiming, easeInTiming, linearTiming, linearTiming, linearTiming]
		garroteTranslationYAnimation.beginTime = beginTime
		garroteTranslationYAnimation.fillMode = fillMode
		garroteTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Garrote__root"]?.layer.add(garroteTranslationYAnimation, forKey:"materiais_TranslationY")

		let bandaidScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		bandaidScaleXAnimation.duration = 18.500
		bandaidScaleXAnimation.values = [0.709, 0.709, 0.709, 1.000, 1.000, 0.700, 0.700] as [Float]
		bandaidScaleXAnimation.keyTimes = [0.000, 0.784, 0.784, 0.811, 0.865, 0.892, 1.000] as [NSNumber]
		bandaidScaleXAnimation.timingFunctions = [instantTiming, instantTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		bandaidScaleXAnimation.beginTime = beginTime
		bandaidScaleXAnimation.fillMode = fillMode
		bandaidScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Bandaid__xScale"]?.layer.add(bandaidScaleXAnimation, forKey:"materiais_ScaleX")

		let bandaidScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		bandaidScaleYAnimation.duration = 18.500
		bandaidScaleYAnimation.values = [0.709, 0.709, 0.709, 1.000, 1.000, 0.700, 0.700] as [Float]
		bandaidScaleYAnimation.keyTimes = [0.000, 0.784, 0.784, 0.811, 0.865, 0.892, 1.000] as [NSNumber]
		bandaidScaleYAnimation.timingFunctions = [instantTiming, instantTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		bandaidScaleYAnimation.beginTime = beginTime
		bandaidScaleYAnimation.fillMode = fillMode
		bandaidScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Bandaid__yScale"]?.layer.add(bandaidScaleYAnimation, forKey:"materiais_ScaleY")

		let bandaidTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		bandaidTranslationXAnimation.duration = 18.500
		bandaidTranslationXAnimation.values = [0.000, 0.000, 109.123, 109.123, 0.000, 0.000] as [Float]
		bandaidTranslationXAnimation.keyTimes = [0.000, 0.784, 0.811, 0.865, 0.892, 1.000] as [NSNumber]
		bandaidTranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		bandaidTranslationXAnimation.beginTime = beginTime
		bandaidTranslationXAnimation.fillMode = fillMode
		bandaidTranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Bandaid__root"]?.layer.add(bandaidTranslationXAnimation, forKey:"materiais_TranslationX")

		let bandaidTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		bandaidTranslationYAnimation.duration = 18.500
		bandaidTranslationYAnimation.values = [0.000, 0.000, -127.371, -127.371, 0.000, 0.000] as [Float]
		bandaidTranslationYAnimation.keyTimes = [0.000, 0.784, 0.811, 0.865, 0.892, 1.000] as [NSNumber]
		bandaidTranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		bandaidTranslationYAnimation.beginTime = beginTime
		bandaidTranslationYAnimation.fillMode = fillMode
		bandaidTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Bandaid__root"]?.layer.add(bandaidTranslationYAnimation, forKey:"materiais_TranslationY")

		let tampaScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		tampaScaleXAnimation.duration = 18.500
		tampaScaleXAnimation.values = [1.000, 1.000, 1.300, 1.300, 1.000, 1.000] as [Float]
		tampaScaleXAnimation.keyTimes = [0.000, 0.351, 0.378, 0.432, 0.459, 1.000] as [NSNumber]
		tampaScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		tampaScaleXAnimation.beginTime = beginTime
		tampaScaleXAnimation.fillMode = fillMode
		tampaScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Tampa__xScale"]?.layer.add(tampaScaleXAnimation, forKey:"materiais_ScaleX")

		let tampaScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		tampaScaleYAnimation.duration = 18.500
		tampaScaleYAnimation.values = [1.000, 1.000, 1.300, 1.300, 1.000, 1.000] as [Float]
		tampaScaleYAnimation.keyTimes = [0.000, 0.351, 0.378, 0.432, 0.459, 1.000] as [NSNumber]
		tampaScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		tampaScaleYAnimation.beginTime = beginTime
		tampaScaleYAnimation.fillMode = fillMode
		tampaScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Tampa__yScale"]?.layer.add(tampaScaleYAnimation, forKey:"materiais_ScaleY")

		let tampaTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		tampaTranslationXAnimation.duration = 18.500
		tampaTranslationXAnimation.values = [0.000, 0.000, 128.615, 128.615, 0.000, 0.000] as [Float]
		tampaTranslationXAnimation.keyTimes = [0.000, 0.351, 0.378, 0.432, 0.459, 1.000] as [NSNumber]
		tampaTranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		tampaTranslationXAnimation.beginTime = beginTime
		tampaTranslationXAnimation.fillMode = fillMode
		tampaTranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Tampa__root"]?.layer.add(tampaTranslationXAnimation, forKey:"materiais_TranslationX")

		let tampaTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		tampaTranslationYAnimation.duration = 18.500
		tampaTranslationYAnimation.values = [0.000, 0.000, -12.527, -12.527, 0.000, 0.000] as [Float]
		tampaTranslationYAnimation.keyTimes = [0.000, 0.351, 0.378, 0.432, 0.459, 1.000] as [NSNumber]
		tampaTranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		tampaTranslationYAnimation.beginTime = beginTime
		tampaTranslationYAnimation.fillMode = fillMode
		tampaTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Tampa__root"]?.layer.add(tampaTranslationYAnimation, forKey:"materiais_TranslationY")

		let seringaScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		seringaScaleXAnimation.duration = 18.500
		seringaScaleXAnimation.values = [1.000, 1.000, 1.300, 1.300, 1.000, 1.000] as [Float]
		seringaScaleXAnimation.keyTimes = [0.000, 0.676, 0.703, 0.757, 0.784, 1.000] as [NSNumber]
		seringaScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		seringaScaleXAnimation.beginTime = beginTime
		seringaScaleXAnimation.fillMode = fillMode
		seringaScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Seringa__xScale"]?.layer.add(seringaScaleXAnimation, forKey:"materiais_ScaleX")

		let seringaScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		seringaScaleYAnimation.duration = 18.500
		seringaScaleYAnimation.values = [1.000, 1.000, 1.300, 1.300, 1.000, 1.000] as [Float]
		seringaScaleYAnimation.keyTimes = [0.000, 0.676, 0.703, 0.757, 0.784, 1.000] as [NSNumber]
		seringaScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		seringaScaleYAnimation.beginTime = beginTime
		seringaScaleYAnimation.fillMode = fillMode
		seringaScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Seringa__yScale"]?.layer.add(seringaScaleYAnimation, forKey:"materiais_ScaleY")

		let seringaTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		seringaTranslationXAnimation.duration = 18.500
		seringaTranslationXAnimation.values = [0.000, 0.000, 38.580, 38.580, 0.000, 0.000] as [Float]
		seringaTranslationXAnimation.keyTimes = [0.000, 0.676, 0.703, 0.757, 0.784, 1.000] as [NSNumber]
		seringaTranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		seringaTranslationXAnimation.beginTime = beginTime
		seringaTranslationXAnimation.fillMode = fillMode
		seringaTranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Seringa__root"]?.layer.add(seringaTranslationXAnimation, forKey:"materiais_TranslationX")

		let seringaTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		seringaTranslationYAnimation.duration = 18.500
		seringaTranslationYAnimation.values = [0.000, 0.000, -93.479, -93.479, 0.000, 0.000] as [Float]
		seringaTranslationYAnimation.keyTimes = [0.000, 0.676, 0.703, 0.757, 0.784, 1.000] as [NSNumber]
		seringaTranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		seringaTranslationYAnimation.beginTime = beginTime
		seringaTranslationYAnimation.fillMode = fillMode
		seringaTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Seringa__root"]?.layer.add(seringaTranslationYAnimation, forKey:"materiais_TranslationY")

		let luvasScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		luvasScaleXAnimation.duration = 18.500
		luvasScaleXAnimation.values = [1.000, 1.000, 1.300, 1.300, 1.000, 1.000] as [Float]
		luvasScaleXAnimation.keyTimes = [0.000, 0.568, 0.595, 0.649, 0.676, 1.000] as [NSNumber]
		luvasScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		luvasScaleXAnimation.beginTime = beginTime
		luvasScaleXAnimation.fillMode = fillMode
		luvasScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Luvas__xScale"]?.layer.add(luvasScaleXAnimation, forKey:"materiais_ScaleX")

		let luvasScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		luvasScaleYAnimation.duration = 18.500
		luvasScaleYAnimation.values = [1.000, 1.000, 1.300, 1.300, 1.000, 1.000] as [Float]
		luvasScaleYAnimation.keyTimes = [0.000, 0.568, 0.595, 0.649, 0.676, 1.000] as [NSNumber]
		luvasScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		luvasScaleYAnimation.beginTime = beginTime
		luvasScaleYAnimation.fillMode = fillMode
		luvasScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Luvas__yScale"]?.layer.add(luvasScaleYAnimation, forKey:"materiais_ScaleY")

		let luvasTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		luvasTranslationXAnimation.duration = 18.500
		luvasTranslationXAnimation.values = [0.000, 0.000, -93.535, -93.535, 0.000, 0.000] as [Float]
		luvasTranslationXAnimation.keyTimes = [0.000, 0.568, 0.595, 0.649, 0.676, 1.000] as [NSNumber]
		luvasTranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		luvasTranslationXAnimation.beginTime = beginTime
		luvasTranslationXAnimation.fillMode = fillMode
		luvasTranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Luvas__root"]?.layer.add(luvasTranslationXAnimation, forKey:"materiais_TranslationX")

		let luvasTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		luvasTranslationYAnimation.duration = 18.500
		luvasTranslationYAnimation.values = [0.000, 0.000, -112.732, -112.732, 0.000, 0.000] as [Float]
		luvasTranslationYAnimation.keyTimes = [0.000, 0.568, 0.595, 0.649, 0.676, 1.000] as [NSNumber]
		luvasTranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		luvasTranslationYAnimation.beginTime = beginTime
		luvasTranslationYAnimation.fillMode = fillMode
		luvasTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Luvas__root"]?.layer.add(luvasTranslationYAnimation, forKey:"materiais_TranslationY")

		let diluenteScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		diluenteScaleXAnimation.duration = 18.500
		diluenteScaleXAnimation.values = [1.000, 1.000, 1.300, 1.300, 1.000, 1.000] as [Float]
		diluenteScaleXAnimation.keyTimes = [0.000, 0.135, 0.162, 0.216, 0.243, 1.000] as [NSNumber]
		diluenteScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		diluenteScaleXAnimation.beginTime = beginTime
		diluenteScaleXAnimation.fillMode = fillMode
		diluenteScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Diluente__xScale"]?.layer.add(diluenteScaleXAnimation, forKey:"materiais_ScaleX")

		let diluenteScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		diluenteScaleYAnimation.duration = 18.500
		diluenteScaleYAnimation.values = [1.000, 1.000, 1.300, 1.300, 1.000, 1.000] as [Float]
		diluenteScaleYAnimation.keyTimes = [0.000, 0.135, 0.162, 0.216, 0.243, 1.000] as [NSNumber]
		diluenteScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		diluenteScaleYAnimation.beginTime = beginTime
		diluenteScaleYAnimation.fillMode = fillMode
		diluenteScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Diluente__yScale"]?.layer.add(diluenteScaleYAnimation, forKey:"materiais_ScaleY")

		let diluenteTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		diluenteTranslationXAnimation.duration = 18.500
		diluenteTranslationXAnimation.values = [0.000, 0.000, -45.850, -45.850, 0.000, 0.000] as [Float]
		diluenteTranslationXAnimation.keyTimes = [0.000, 0.135, 0.162, 0.216, 0.243, 1.000] as [NSNumber]
		diluenteTranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		diluenteTranslationXAnimation.beginTime = beginTime
		diluenteTranslationXAnimation.fillMode = fillMode
		diluenteTranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Diluente__root"]?.layer.add(diluenteTranslationXAnimation, forKey:"materiais_TranslationX")

		let diluenteTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		diluenteTranslationYAnimation.duration = 18.500
		diluenteTranslationYAnimation.values = [0.000, 0.000, 144.422, 144.422, 0.000, 0.000] as [Float]
		diluenteTranslationYAnimation.keyTimes = [0.000, 0.135, 0.162, 0.216, 0.243, 1.000] as [NSNumber]
		diluenteTranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		diluenteTranslationYAnimation.beginTime = beginTime
		diluenteTranslationYAnimation.fillMode = fillMode
		diluenteTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Diluente__root"]?.layer.add(diluenteTranslationYAnimation, forKey:"materiais_TranslationY")

		let alcoolScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		alcoolScaleXAnimation.duration = 18.500
		alcoolScaleXAnimation.values = [1.000, 1.000, 1.300, 1.300, 1.000] as [Float]
		alcoolScaleXAnimation.keyTimes = [0.000, 0.892, 0.919, 0.973, 1.000] as [NSNumber]
		alcoolScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming]
		alcoolScaleXAnimation.beginTime = beginTime
		alcoolScaleXAnimation.fillMode = fillMode
		alcoolScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Alcool__xScale"]?.layer.add(alcoolScaleXAnimation, forKey:"materiais_ScaleX")

		let alcoolScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		alcoolScaleYAnimation.duration = 18.500
		alcoolScaleYAnimation.values = [1.000, 1.000, 1.300, 1.300, 1.000] as [Float]
		alcoolScaleYAnimation.keyTimes = [0.000, 0.892, 0.919, 0.973, 1.000] as [NSNumber]
		alcoolScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming]
		alcoolScaleYAnimation.beginTime = beginTime
		alcoolScaleYAnimation.fillMode = fillMode
		alcoolScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Alcool__yScale"]?.layer.add(alcoolScaleYAnimation, forKey:"materiais_ScaleY")

		let alcoolTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		alcoolTranslationXAnimation.duration = 18.500
		alcoolTranslationXAnimation.values = [0.000, 0.000, 121.775, 121.775, 0.000] as [Float]
		alcoolTranslationXAnimation.keyTimes = [0.000, 0.892, 0.919, 0.973, 1.000] as [NSNumber]
		alcoolTranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming]
		alcoolTranslationXAnimation.beginTime = beginTime
		alcoolTranslationXAnimation.fillMode = fillMode
		alcoolTranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Alcool__root"]?.layer.add(alcoolTranslationXAnimation, forKey:"materiais_TranslationX")

		let alcoolTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		alcoolTranslationYAnimation.duration = 18.500
		alcoolTranslationYAnimation.values = [0.000, 0.000, -187.303, -187.303, 0.000] as [Float]
		alcoolTranslationYAnimation.keyTimes = [0.000, 0.892, 0.919, 0.973, 1.000] as [NSNumber]
		alcoolTranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming]
		alcoolTranslationYAnimation.beginTime = beginTime
		alcoolTranslationYAnimation.fillMode = fillMode
		alcoolTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Alcool__root"]?.layer.add(alcoolTranslationYAnimation, forKey:"materiais_TranslationY")

		let agulhaFioScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		agulhaFioScaleXAnimation.duration = 18.500
		agulhaFioScaleXAnimation.values = [1.000, 1.000, 1.300, 1.300, 1.000, 1.000] as [Float]
		agulhaFioScaleXAnimation.keyTimes = [0.000, 0.459, 0.486, 0.541, 0.568, 1.000] as [NSNumber]
		agulhaFioScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		agulhaFioScaleXAnimation.beginTime = beginTime
		agulhaFioScaleXAnimation.fillMode = fillMode
		agulhaFioScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Agulha + fio__xScale"]?.layer.add(agulhaFioScaleXAnimation, forKey:"materiais_ScaleX")

		let agulhaFioScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		agulhaFioScaleYAnimation.duration = 18.500
		agulhaFioScaleYAnimation.values = [1.000, 1.000, 1.300, 1.300, 1.000, 1.000] as [Float]
		agulhaFioScaleYAnimation.keyTimes = [0.000, 0.459, 0.486, 0.541, 0.568, 1.000] as [NSNumber]
		agulhaFioScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		agulhaFioScaleYAnimation.beginTime = beginTime
		agulhaFioScaleYAnimation.fillMode = fillMode
		agulhaFioScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Agulha + fio__yScale"]?.layer.add(agulhaFioScaleYAnimation, forKey:"materiais_ScaleY")

		let agulhaFioTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		agulhaFioTranslationXAnimation.duration = 18.500
		agulhaFioTranslationXAnimation.values = [0.000, 0.000, -59.502, -59.502, 0.000, 0.000] as [Float]
		agulhaFioTranslationXAnimation.keyTimes = [0.000, 0.459, 0.486, 0.541, 0.568, 1.000] as [NSNumber]
		agulhaFioTranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		agulhaFioTranslationXAnimation.beginTime = beginTime
		agulhaFioTranslationXAnimation.fillMode = fillMode
		agulhaFioTranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Agulha + fio__root"]?.layer.add(agulhaFioTranslationXAnimation, forKey:"materiais_TranslationX")

		let agulhaFioTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		agulhaFioTranslationYAnimation.duration = 18.500
		agulhaFioTranslationYAnimation.values = [0.000, 0.000, 48.369, 48.369, 0.000, 0.000] as [Float]
		agulhaFioTranslationYAnimation.keyTimes = [0.000, 0.459, 0.486, 0.541, 0.568, 1.000] as [NSNumber]
		agulhaFioTranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		agulhaFioTranslationYAnimation.beginTime = beginTime
		agulhaFioTranslationYAnimation.fillMode = fillMode
		agulhaFioTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Agulha + fio__root"]?.layer.add(agulhaFioTranslationYAnimation, forKey:"materiais_TranslationY")
	}

	func removeMateriaisAnimation() {
		self.layer.removeAnimation(forKey: "Materiais")
		self.viewsByName["Agulha + fio__root"]?.layer.removeAnimation(forKey: "materiais_ZPosition")
		self.viewsByName["Alcool__root"]?.layer.removeAnimation(forKey: "materiais_ZPosition")
		self.viewsByName["Bandaid__root"]?.layer.removeAnimation(forKey: "materiais_ZPosition")
		self.viewsByName["Diluente__root"]?.layer.removeAnimation(forKey: "materiais_ZPosition")
		self.viewsByName["Luvas__root"]?.layer.removeAnimation(forKey: "materiais_ZPosition")
		self.viewsByName["Produto__root"]?.layer.removeAnimation(forKey: "materiais_ZPosition")
		self.viewsByName["Seringa__root"]?.layer.removeAnimation(forKey: "materiais_ZPosition")
		self.viewsByName["Tampa__root"]?.layer.removeAnimation(forKey: "materiais_ZPosition")
		self.viewsByName["Garrote__root"]?.layer.removeAnimation(forKey: "materiais_ZPosition")
		self.viewsByName["Produto__xScale"]?.layer.removeAnimation(forKey: "materiais_ScaleX")
		self.viewsByName["Produto__yScale"]?.layer.removeAnimation(forKey: "materiais_ScaleY")
		self.viewsByName["Produto__root"]?.layer.removeAnimation(forKey: "materiais_TranslationX")
		self.viewsByName["Produto__root"]?.layer.removeAnimation(forKey: "materiais_TranslationY")
		self.viewsByName["Garrote__xScale"]?.layer.removeAnimation(forKey: "materiais_ScaleX")
		self.viewsByName["Garrote__yScale"]?.layer.removeAnimation(forKey: "materiais_ScaleY")
		self.viewsByName["Garrote__root"]?.layer.removeAnimation(forKey: "materiais_TranslationX")
		self.viewsByName["Garrote__root"]?.layer.removeAnimation(forKey: "materiais_TranslationY")
		self.viewsByName["Bandaid__xScale"]?.layer.removeAnimation(forKey: "materiais_ScaleX")
		self.viewsByName["Bandaid__yScale"]?.layer.removeAnimation(forKey: "materiais_ScaleY")
		self.viewsByName["Bandaid__root"]?.layer.removeAnimation(forKey: "materiais_TranslationX")
		self.viewsByName["Bandaid__root"]?.layer.removeAnimation(forKey: "materiais_TranslationY")
		self.viewsByName["Tampa__xScale"]?.layer.removeAnimation(forKey: "materiais_ScaleX")
		self.viewsByName["Tampa__yScale"]?.layer.removeAnimation(forKey: "materiais_ScaleY")
		self.viewsByName["Tampa__root"]?.layer.removeAnimation(forKey: "materiais_TranslationX")
		self.viewsByName["Tampa__root"]?.layer.removeAnimation(forKey: "materiais_TranslationY")
		self.viewsByName["Seringa__xScale"]?.layer.removeAnimation(forKey: "materiais_ScaleX")
		self.viewsByName["Seringa__yScale"]?.layer.removeAnimation(forKey: "materiais_ScaleY")
		self.viewsByName["Seringa__root"]?.layer.removeAnimation(forKey: "materiais_TranslationX")
		self.viewsByName["Seringa__root"]?.layer.removeAnimation(forKey: "materiais_TranslationY")
		self.viewsByName["Luvas__xScale"]?.layer.removeAnimation(forKey: "materiais_ScaleX")
		self.viewsByName["Luvas__yScale"]?.layer.removeAnimation(forKey: "materiais_ScaleY")
		self.viewsByName["Luvas__root"]?.layer.removeAnimation(forKey: "materiais_TranslationX")
		self.viewsByName["Luvas__root"]?.layer.removeAnimation(forKey: "materiais_TranslationY")
		self.viewsByName["Diluente__xScale"]?.layer.removeAnimation(forKey: "materiais_ScaleX")
		self.viewsByName["Diluente__yScale"]?.layer.removeAnimation(forKey: "materiais_ScaleY")
		self.viewsByName["Diluente__root"]?.layer.removeAnimation(forKey: "materiais_TranslationX")
		self.viewsByName["Diluente__root"]?.layer.removeAnimation(forKey: "materiais_TranslationY")
		self.viewsByName["Alcool__xScale"]?.layer.removeAnimation(forKey: "materiais_ScaleX")
		self.viewsByName["Alcool__yScale"]?.layer.removeAnimation(forKey: "materiais_ScaleY")
		self.viewsByName["Alcool__root"]?.layer.removeAnimation(forKey: "materiais_TranslationX")
		self.viewsByName["Alcool__root"]?.layer.removeAnimation(forKey: "materiais_TranslationY")
		self.viewsByName["Agulha + fio__xScale"]?.layer.removeAnimation(forKey: "materiais_ScaleX")
		self.viewsByName["Agulha + fio__yScale"]?.layer.removeAnimation(forKey: "materiais_ScaleY")
		self.viewsByName["Agulha + fio__root"]?.layer.removeAnimation(forKey: "materiais_TranslationX")
		self.viewsByName["Agulha + fio__root"]?.layer.removeAnimation(forKey: "materiais_TranslationY")
	}

	// MARK: CAAnimationDelegate
	func animationDidStop(_ anim: CAAnimation, finished flag: Bool) {
		if let completion = self.animationCompletions[anim] {
			self.animationCompletions.removeValue(forKey: anim)
			completion(flag)
		}
	}

//	override func removeAllAnimations() {
//		for subview in viewsByName.values {
//			subview.layer.removeAllAnimations()
//		}
//		self.layer.removeAnimation(forKey: "Materiais")
//	}
}
