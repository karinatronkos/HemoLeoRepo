//
// TutorialPasso4View.swift
// Generated by Core Animator version 1.3.2 on 17/11/16.
//
// DO NOT MODIFY THIS FILE. IT IS AUTO-GENERATED AND WILL BE OVERWRITTEN
//

import UIKit

private class TutorialPasso4PassthroughView: UIView {
    override func point(inside point: CGPoint, with event: UIEvent?) -> Bool {
        for subview in subviews as [UIView] {
            if subview.point(inside: convert(point, to: subview), with: event) { return true }
        }
        return false
    }
}

@IBDesignable
class TutorialPasso4View : UIView, CAAnimationDelegate {


	var animationCompletions = Dictionary<CAAnimation, (Bool) -> Void>()
	var viewsByName: [String : UIView]!

	// - MARK: Life Cycle

	convenience init() {
		self.init(frame: CGRect(x: 0, y: 0, width: 414, height: 454))
	}

	override init(frame: CGRect) {
		super.init(frame: frame)
		self.setupHierarchy()
	}

	required init?(coder aDecoder: NSCoder) {
		super.init(coder: aDecoder)
		self.setupHierarchy()
	}

	// - MARK: Scaling

	override func layoutSubviews() {
		super.layoutSubviews()

		if let scalingView = self.viewsByName["__scaling__"] {
			var xScale = self.bounds.size.width / scalingView.bounds.size.width
			var yScale = self.bounds.size.height / scalingView.bounds.size.height
			switch contentMode {
			case .scaleToFill:
				break
			case .scaleAspectFill:
				let scale = max(xScale, yScale)
				xScale = scale
				yScale = scale
			default:
				let scale = min(xScale, yScale)
				xScale = scale
				yScale = scale
			}
			scalingView.transform = CGAffineTransform(scaleX: xScale, y: yScale)
			scalingView.center = CGPoint(x:self.bounds.midX, y:self.bounds.midY)
		}
	}

	// - MARK: Setup

	func setupHierarchy() {
		var viewsByName: [String : UIView] = [:]
		let bundle = Bundle(for:type(of: self))
		let __scaling__ = UIView()
		__scaling__.bounds = CGRect(x:0, y:0, width:414, height:454)
		__scaling__.center = CGPoint(x:207.0, y:227.0)
		self.addSubview(__scaling__)
		viewsByName["__scaling__"] = __scaling__

		let setaEsquerda__root = TutorialPasso4PassthroughView()
		let setaEsquerda__xScale = TutorialPasso4PassthroughView()
		let setaEsquerda__yScale = TutorialPasso4PassthroughView()
		let setaEsquerda = UIImageView()
		let imgSetaEsquerda = UIImage(named:"Seta esquerda.png", in: bundle, compatibleWith: nil)
		if imgSetaEsquerda == nil {
			print("** Warning: Could not create image from 'Seta esquerda.png'")
		}
		setaEsquerda.image = imgSetaEsquerda
		setaEsquerda.contentMode = .center
		setaEsquerda.bounds = CGRect(x:0, y:0, width:77.0, height:36.0)
		setaEsquerda__root.layer.position = CGPoint(x:325.666, y:121.734)
		setaEsquerda__root.alpha = 0.00
		setaEsquerda__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		setaEsquerda__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		setaEsquerda__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(setaEsquerda__root)
		setaEsquerda__root.addSubview(setaEsquerda__xScale)
		setaEsquerda__xScale.addSubview(setaEsquerda__yScale)
		setaEsquerda__yScale.addSubview(setaEsquerda)
		__scaling__.addSubview(setaEsquerda__root)
		viewsByName["Seta esquerda__root"] = setaEsquerda__root
		viewsByName["Seta esquerda__xScale"] = setaEsquerda__xScale
		viewsByName["Seta esquerda__yScale"] = setaEsquerda__yScale
		viewsByName["Seta esquerda"] = setaEsquerda

		let tudo__root = TutorialPasso4PassthroughView()
		let tudo__xScale = TutorialPasso4PassthroughView()
		let tudo__yScale = TutorialPasso4PassthroughView()
		let tudo = UIView()
		tudo.layer.anchorPoint = CGPoint(x:0.308, y:0.525)
		tudo.bounds = CGRect(x:0, y:0, width:611.0, height:443.5)
		tudo__root.layer.position = CGPoint(x:214.075, y:233.000)
		tudo__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		tudo__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		tudo__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(tudo__root)
		tudo__root.addSubview(tudo__xScale)
		tudo__xScale.addSubview(tudo__yScale)
		tudo__yScale.addSubview(tudo)
		__scaling__.addSubview(tudo__root)
		viewsByName["Tudo__root"] = tudo__root
		viewsByName["Tudo__xScale"] = tudo__xScale
		viewsByName["Tudo__yScale"] = tudo__yScale
		viewsByName["Tudo"] = tudo

		let seringa__root = TutorialPasso4PassthroughView()
		let seringa__xScale = TutorialPasso4PassthroughView()
		let seringa__yScale = TutorialPasso4PassthroughView()
		let seringa = UIView()
		seringa.bounds = CGRect(x:0, y:0, width:401.1, height:237.2)
		seringa__root.layer.position = CGPoint(x:410.405, y:217.575)
		seringa__root.alpha = 0.00
		seringa__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		seringa__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		seringa__root.transform = CGAffineTransform(rotationAngle: 0.000)
		tudo.addSubview(seringa__root)
		seringa__root.addSubview(seringa__xScale)
		seringa__xScale.addSubview(seringa__yScale)
		seringa__yScale.addSubview(seringa)
		tudo.addSubview(seringa__root)
		viewsByName["Seringa__root"] = seringa__root
		viewsByName["Seringa__xScale"] = seringa__xScale
		viewsByName["Seringa__yScale"] = seringa__yScale
		viewsByName["Seringa"] = seringa

		let seringaCapa__root = TutorialPasso4PassthroughView()
		let seringaCapa__xScale = TutorialPasso4PassthroughView()
		let seringaCapa__yScale = TutorialPasso4PassthroughView()
		let seringaCapa = UIImageView()
		let imgSeringaCapa = UIImage(named:"Seringa capa.png", in: bundle, compatibleWith: nil)
		if imgSeringaCapa == nil {
			print("** Warning: Could not create image from 'Seringa capa.png'")
		}
		seringaCapa.image = imgSeringaCapa
		seringaCapa.contentMode = .center
		seringaCapa.bounds = CGRect(x:0, y:0, width:336.0, height:236.0)
		seringaCapa__root.layer.position = CGPoint(x:232.841, y:118.000)
		seringaCapa__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		seringaCapa__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		seringaCapa__root.transform = CGAffineTransform(rotationAngle: 0.000)
		seringa.addSubview(seringaCapa__root)
		seringaCapa__root.addSubview(seringaCapa__xScale)
		seringaCapa__xScale.addSubview(seringaCapa__yScale)
		seringaCapa__yScale.addSubview(seringaCapa)
		seringa.addSubview(seringaCapa__root)
		viewsByName["Seringa capa__root"] = seringaCapa__root
		viewsByName["Seringa capa__xScale"] = seringaCapa__xScale
		viewsByName["Seringa capa__yScale"] = seringaCapa__yScale
		viewsByName["Seringa capa"] = seringaCapa

		let liquido__root = TutorialPasso4PassthroughView()
		let liquido__xScale = TutorialPasso4PassthroughView()
		let liquido__yScale = TutorialPasso4PassthroughView()
		let liquido = UIImageView()
		let imgLiquido = UIImage(named:"Liquido.png", in: bundle, compatibleWith: nil)
		if imgLiquido == nil {
			print("** Warning: Could not create image from 'Liquido.png'")
		}
		liquido.image = imgLiquido
		liquido.contentMode = .center
		liquido.bounds = CGRect(x:0, y:0, width:336.0, height:236.0)
		liquido__root.layer.position = CGPoint(x:232.175, y:118.000)
		liquido__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		liquido__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		liquido__root.transform = CGAffineTransform(rotationAngle: 0.000)
		seringa.addSubview(liquido__root)
		liquido__root.addSubview(liquido__xScale)
		liquido__xScale.addSubview(liquido__yScale)
		liquido__yScale.addSubview(liquido)
		seringa.addSubview(liquido__root)
		viewsByName["Liquido__root"] = liquido__root
		viewsByName["Liquido__xScale"] = liquido__xScale
		viewsByName["Liquido__yScale"] = liquido__yScale
		viewsByName["Liquido"] = liquido

		let liquidoMask__root = TutorialPasso4PassthroughView()
		let liquidoMask__xScale = TutorialPasso4PassthroughView()
		let liquidoMask__yScale = TutorialPasso4PassthroughView()
		let liquidoMask = UIImageView()
		let imgSquare = UIImage(named:"square.png", in: bundle, compatibleWith: nil)
		if imgSquare == nil {
			print("** Warning: Could not create image from 'square.png'")
		}
		liquidoMask.image = imgSquare
		liquidoMask.contentMode = .center
		liquidoMask.bounds = CGRect(x:0, y:0, width:185.0, height:184.0)
		liquidoMask__root.layer.position = CGPoint(x:-102.000, y:118.000)
		liquidoMask__xScale.transform = CGAffineTransform(scaleX: 1.28, y: 1.00)
		liquidoMask__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.28)
		liquidoMask__root.transform = CGAffineTransform(rotationAngle: 0.000)
		liquido.addSubview(liquidoMask__root)
		liquidoMask__root.addSubview(liquidoMask__xScale)
		liquidoMask__xScale.addSubview(liquidoMask__yScale)
		liquidoMask__yScale.addSubview(liquidoMask)
		liquido.mask = liquidoMask__root
		viewsByName["Liquido_mask__root"] = liquidoMask__root
		viewsByName["Liquido_mask__xScale"] = liquidoMask__xScale
		viewsByName["Liquido_mask__yScale"] = liquidoMask__yScale
		viewsByName["Liquido_mask"] = liquidoMask

		let seringaEmbolo__root = TutorialPasso4PassthroughView()
		let seringaEmbolo__xScale = TutorialPasso4PassthroughView()
		let seringaEmbolo__yScale = TutorialPasso4PassthroughView()
		let seringaEmbolo = UIImageView()
		let imgSeringaEmbolo = UIImage(named:"Seringa embolo.png", in: bundle, compatibleWith: nil)
		if imgSeringaEmbolo == nil {
			print("** Warning: Could not create image from 'Seringa embolo.png'")
		}
		seringaEmbolo.image = imgSeringaEmbolo
		seringaEmbolo.contentMode = .center
		seringaEmbolo.bounds = CGRect(x:0, y:0, width:336.0, height:236.0)
		seringaEmbolo__root.layer.position = CGPoint(x:241.000, y:118.000)
		seringaEmbolo__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		seringaEmbolo__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		seringaEmbolo__root.transform = CGAffineTransform(rotationAngle: 0.000)
		seringa.addSubview(seringaEmbolo__root)
		seringaEmbolo__root.addSubview(seringaEmbolo__xScale)
		seringaEmbolo__xScale.addSubview(seringaEmbolo__yScale)
		seringaEmbolo__yScale.addSubview(seringaEmbolo)
		seringa.addSubview(seringaEmbolo__root)
		viewsByName["Seringa embolo__root"] = seringaEmbolo__root
		viewsByName["Seringa embolo__xScale"] = seringaEmbolo__xScale
		viewsByName["Seringa embolo__yScale"] = seringaEmbolo__yScale
		viewsByName["Seringa embolo"] = seringaEmbolo

		let path12__root = TutorialPasso4PassthroughView()
		let path12__xScale = TutorialPasso4PassthroughView()
		let path12__yScale = TutorialPasso4PassthroughView()
		let path12 = UIImageView()
		let imgPath12 = UIImage(named:"Path 12.png", in: bundle, compatibleWith: nil)
		if imgPath12 == nil {
			print("** Warning: Could not create image from 'Path 12.png'")
		}
		path12.image = imgPath12
		path12.contentMode = .center
		path12.bounds = CGRect(x:0, y:0, width:2.0, height:20.0)
		path12__root.layer.position = CGPoint(x:298.428, y:120.163)
		path12__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		path12__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		path12__root.transform = CGAffineTransform(rotationAngle: 0.000)
		seringa.addSubview(path12__root)
		path12__root.addSubview(path12__xScale)
		path12__xScale.addSubview(path12__yScale)
		path12__yScale.addSubview(path12)
		seringa.addSubview(path12__root)
		viewsByName["Path 12__root"] = path12__root
		viewsByName["Path 12__xScale"] = path12__xScale
		viewsByName["Path 12__yScale"] = path12__yScale
		viewsByName["Path 12"] = path12

		let medida__root = TutorialPasso4PassthroughView()
		let medida__xScale = TutorialPasso4PassthroughView()
		let medida__yScale = TutorialPasso4PassthroughView()
		let medida = UIImageView()
		let imgMedida = UIImage(named:"Medida.png", in: bundle, compatibleWith: nil)
		if imgMedida == nil {
			print("** Warning: Could not create image from 'Medida.png'")
		}
		medida.image = imgMedida
		medida.contentMode = .center
		medida.bounds = CGRect(x:0, y:0, width:336.0, height:236.0)
		medida__root.layer.position = CGPoint(x:238.103, y:117.938)
		medida__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		medida__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		medida__root.transform = CGAffineTransform(rotationAngle: 0.000)
		seringa.addSubview(medida__root)
		medida__root.addSubview(medida__xScale)
		medida__xScale.addSubview(medida__yScale)
		medida__yScale.addSubview(medida)
		seringa.addSubview(medida__root)
		viewsByName["Medida__root"] = medida__root
		viewsByName["Medida__xScale"] = medida__xScale
		viewsByName["Medida__yScale"] = medida__yScale
		viewsByName["Medida"] = medida

		let seringaLinha__root = TutorialPasso4PassthroughView()
		let seringaLinha__xScale = TutorialPasso4PassthroughView()
		let seringaLinha__yScale = TutorialPasso4PassthroughView()
		let seringaLinha = UIImageView()
		let imgSeringaLinha = UIImage(named:"Seringa linha.png", in: bundle, compatibleWith: nil)
		if imgSeringaLinha == nil {
			print("** Warning: Could not create image from 'Seringa linha.png'")
		}
		seringaLinha.image = imgSeringaLinha
		seringaLinha.contentMode = .center
		seringaLinha.bounds = CGRect(x:0, y:0, width:336.0, height:236.0)
		seringaLinha__root.layer.position = CGPoint(x:233.103, y:119.150)
		seringaLinha__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		seringaLinha__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		seringaLinha__root.transform = CGAffineTransform(rotationAngle: 0.000)
		seringa.addSubview(seringaLinha__root)
		seringaLinha__root.addSubview(seringaLinha__xScale)
		seringaLinha__xScale.addSubview(seringaLinha__yScale)
		seringaLinha__yScale.addSubview(seringaLinha)
		seringa.addSubview(seringaLinha__root)
		viewsByName["Seringa linha__root"] = seringaLinha__root
		viewsByName["Seringa linha__xScale"] = seringaLinha__xScale
		viewsByName["Seringa linha__yScale"] = seringaLinha__yScale
		viewsByName["Seringa linha"] = seringaLinha

		let mistura2__root = TutorialPasso4PassthroughView()
		let mistura2__xScale = TutorialPasso4PassthroughView()
		let mistura2__yScale = TutorialPasso4PassthroughView()
		let mistura2 = UIView()
		mistura2.bounds = CGRect(x:0, y:0, width:362.6, height:443.5)
		mistura2__root.layer.position = CGPoint(x:181.298, y:221.750)
		mistura2__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		mistura2__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		mistura2__root.transform = CGAffineTransform(rotationAngle: 0.000)
		tudo.addSubview(mistura2__root)
		mistura2__root.addSubview(mistura2__xScale)
		mistura2__xScale.addSubview(mistura2__yScale)
		mistura2__yScale.addSubview(mistura2)
		tudo.addSubview(mistura2__root)
		viewsByName["Mistura 2__root"] = mistura2__root
		viewsByName["Mistura 2__xScale"] = mistura2__xScale
		viewsByName["Mistura 2__yScale"] = mistura2__yScale
		viewsByName["Mistura 2"] = mistura2

		let misturaVirada__root = TutorialPasso4PassthroughView()
		let misturaVirada__xScale = TutorialPasso4PassthroughView()
		let misturaVirada__yScale = TutorialPasso4PassthroughView()
		let misturaVirada = UIImageView()
		let imgMisturaVirada = UIImage(named:"Mistura virada.png", in: bundle, compatibleWith: nil)
		if imgMisturaVirada == nil {
			print("** Warning: Could not create image from 'Mistura virada.png'")
		}
		misturaVirada.image = imgMisturaVirada
		misturaVirada.contentMode = .center
		misturaVirada.bounds = CGRect(x:0, y:0, width:362.0, height:441.0)
		misturaVirada__root.layer.position = CGPoint(x:181.597, y:220.500)
		misturaVirada__root.alpha = 0.00
		misturaVirada__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		misturaVirada__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		misturaVirada__root.transform = CGAffineTransform(rotationAngle: 3.142)
		mistura2.addSubview(misturaVirada__root)
		misturaVirada__root.addSubview(misturaVirada__xScale)
		misturaVirada__xScale.addSubview(misturaVirada__yScale)
		misturaVirada__yScale.addSubview(misturaVirada)
		mistura2.addSubview(misturaVirada__root)
		viewsByName["Mistura virada__root"] = misturaVirada__root
		viewsByName["Mistura virada__xScale"] = misturaVirada__xScale
		viewsByName["Mistura virada__yScale"] = misturaVirada__yScale
		viewsByName["Mistura virada"] = misturaVirada

		let mistura__root = TutorialPasso4PassthroughView()
		let mistura__xScale = TutorialPasso4PassthroughView()
		let mistura__yScale = TutorialPasso4PassthroughView()
		let mistura = UIImageView()
		let imgMistura = UIImage(named:"Mistura.png", in: bundle, compatibleWith: nil)
		if imgMistura == nil {
			print("** Warning: Could not create image from 'Mistura.png'")
		}
		mistura.image = imgMistura
		mistura.contentMode = .center
		mistura.bounds = CGRect(x:0, y:0, width:362.0, height:441.0)
		mistura__root.layer.position = CGPoint(x:181.000, y:223.000)
		mistura__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		mistura__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		mistura__root.transform = CGAffineTransform(rotationAngle: 0.000)
		mistura2.addSubview(mistura__root)
		mistura__root.addSubview(mistura__xScale)
		mistura__xScale.addSubview(mistura__yScale)
		mistura__yScale.addSubview(mistura)
		mistura2.addSubview(mistura__root)
		viewsByName["Mistura__root"] = mistura__root
		viewsByName["Mistura__xScale"] = mistura__xScale
		viewsByName["Mistura__yScale"] = mistura__yScale
		viewsByName["Mistura"] = mistura

		let tampinha__root = TutorialPasso4PassthroughView()
		let tampinha__xScale = TutorialPasso4PassthroughView()
		let tampinha__yScale = TutorialPasso4PassthroughView()
		let tampinha = UIImageView()
		let imgTampinha = UIImage(named:"Tampinha.png", in: bundle, compatibleWith: nil)
		if imgTampinha == nil {
			print("** Warning: Could not create image from 'Tampinha.png'")
		}
		tampinha.image = imgTampinha
		tampinha.contentMode = .center
		tampinha.bounds = CGRect(x:0, y:0, width:362.0, height:441.0)
		tampinha__root.layer.position = CGPoint(x:272.406, y:217.500)
		tampinha__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		tampinha__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		tampinha__root.transform = CGAffineTransform(rotationAngle: 0.000)
		mistura2.addSubview(tampinha__root)
		tampinha__root.addSubview(tampinha__xScale)
		tampinha__xScale.addSubview(tampinha__yScale)
		tampinha__yScale.addSubview(tampinha)
		mistura2.addSubview(tampinha__root)
		viewsByName["Tampinha__root"] = tampinha__root
		viewsByName["Tampinha__xScale"] = tampinha__xScale
		viewsByName["Tampinha__yScale"] = tampinha__yScale
		viewsByName["Tampinha"] = tampinha

		self.viewsByName = viewsByName
	}

	// - MARK: Passo 4

	func addPasso4Animation() {
		addPasso4Animation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addPasso4Animation(completion: ((Bool) -> Void)?) {
		addPasso4Animation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addPasso4Animation(removedOnCompletion: Bool) {
		addPasso4Animation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addPasso4Animation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addPasso4Animation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addPasso4Animation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		let instantTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionDefault)
		let anticOverTiming = CAMediaTimingFunction(controlPoints: 0.42, -0.30, 0.58, 1.30)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 15.500
			representativeAnimation.delegate = self
			self.layer.add(representativeAnimation, forKey: "Passo4")
			self.animationCompletions[layer.animation(forKey: "Passo4")!] = complete
		}

		let tudoRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		tudoRotationAnimation.duration = 15.500
		tudoRotationAnimation.values = [0.000, 0.000, 3.142, 3.142] as [Float]
		tudoRotationAnimation.keyTimes = [0.000, 0.419, 0.516, 1.000] as [NSNumber]
		tudoRotationAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		tudoRotationAnimation.beginTime = beginTime
		tudoRotationAnimation.fillMode = fillMode
		tudoRotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Tudo__root"]?.layer.add(tudoRotationAnimation, forKey:"Passo 4_Rotation")

		let tudoScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		tudoScaleXAnimation.duration = 15.500
		tudoScaleXAnimation.values = [1.000, 1.000, 0.600, 0.600, 0.900, 0.900] as [Float]
		tudoScaleXAnimation.keyTimes = [0.000, 0.387, 0.419, 0.516, 0.548, 1.000] as [NSNumber]
		tudoScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		tudoScaleXAnimation.beginTime = beginTime
		tudoScaleXAnimation.fillMode = fillMode
		tudoScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Tudo__xScale"]?.layer.add(tudoScaleXAnimation, forKey:"Passo 4_ScaleX")

		let tudoScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		tudoScaleYAnimation.duration = 15.500
		tudoScaleYAnimation.values = [1.000, 1.000, 0.600, 0.600, 0.900, 0.900] as [Float]
		tudoScaleYAnimation.keyTimes = [0.000, 0.387, 0.419, 0.516, 0.548, 1.000] as [NSNumber]
		tudoScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		tudoScaleYAnimation.beginTime = beginTime
		tudoScaleYAnimation.fillMode = fillMode
		tudoScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Tudo__yScale"]?.layer.add(tudoScaleYAnimation, forKey:"Passo 4_ScaleY")

		let seringaRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		seringaRotationAnimation.duration = 15.500
		seringaRotationAnimation.values = [0.000, 0.000, -0.825] as [Float]
		seringaRotationAnimation.keyTimes = [0.000, 0.919, 1.000] as [NSNumber]
		seringaRotationAnimation.timingFunctions = [linearTiming, linearTiming]
		seringaRotationAnimation.beginTime = beginTime
		seringaRotationAnimation.fillMode = fillMode
		seringaRotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Seringa__root"]?.layer.add(seringaRotationAnimation, forKey:"Passo 4_Rotation")

		let seringaOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		seringaOpacityAnimation.duration = 15.500
		seringaOpacityAnimation.values = [0.000, 0.000, 0.000, 1.000, 1.000] as [Float]
		seringaOpacityAnimation.keyTimes = [0.000, 0.129, 0.129, 0.161, 1.000] as [NSNumber]
		seringaOpacityAnimation.timingFunctions = [instantTiming, instantTiming, linearTiming, linearTiming]
		seringaOpacityAnimation.beginTime = beginTime
		seringaOpacityAnimation.fillMode = fillMode
		seringaOpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Seringa__root"]?.layer.add(seringaOpacityAnimation, forKey:"Passo 4_Opacity")

		let seringaTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		seringaTranslationXAnimation.duration = 15.500
		seringaTranslationXAnimation.values = [0.000, 0.000, -200.000, -200.000, -145.128, -145.128] as [Float]
		seringaTranslationXAnimation.keyTimes = [0.000, 0.290, 0.355, 0.903, 0.968, 1.000] as [NSNumber]
		seringaTranslationXAnimation.timingFunctions = [linearTiming, anticOverTiming, linearTiming, linearTiming, linearTiming]
		seringaTranslationXAnimation.beginTime = beginTime
		seringaTranslationXAnimation.fillMode = fillMode
		seringaTranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Seringa__root"]?.layer.add(seringaTranslationXAnimation, forKey:"Passo 4_TranslationX")

		let seringaTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		seringaTranslationYAnimation.duration = 15.500
		seringaTranslationYAnimation.values = [0.000, 0.000, 0.000, 11.193, 11.193] as [Float]
		seringaTranslationYAnimation.keyTimes = [0.000, 0.290, 0.903, 0.968, 1.000] as [NSNumber]
		seringaTranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming]
		seringaTranslationYAnimation.beginTime = beginTime
		seringaTranslationYAnimation.fillMode = fillMode
		seringaTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Seringa__root"]?.layer.add(seringaTranslationYAnimation, forKey:"Passo 4_TranslationY")

		let misturaViradaOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		misturaViradaOpacityAnimation.duration = 15.500
		misturaViradaOpacityAnimation.values = [0.000, 0.000, 1.000, 1.000] as [Float]
		misturaViradaOpacityAnimation.keyTimes = [0.000, 0.419, 0.516, 1.000] as [NSNumber]
		misturaViradaOpacityAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		misturaViradaOpacityAnimation.beginTime = beginTime
		misturaViradaOpacityAnimation.fillMode = fillMode
		misturaViradaOpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Mistura virada__root"]?.layer.add(misturaViradaOpacityAnimation, forKey:"Passo 4_Opacity")

		let setaEsquerdaOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		setaEsquerdaOpacityAnimation.duration = 15.500
		setaEsquerdaOpacityAnimation.values = [0.000, 0.000, 1.000, 0.000, 1.000, 0.000, 0.000, 1.000, 0.000, 1.000, 0.000, 0.000] as [Float]
		setaEsquerdaOpacityAnimation.keyTimes = [0.000, 0.161, 0.194, 0.258, 0.290, 0.355, 0.613, 0.645, 0.677, 0.742, 0.806, 1.000] as [NSNumber]
		setaEsquerdaOpacityAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		setaEsquerdaOpacityAnimation.beginTime = beginTime
		setaEsquerdaOpacityAnimation.fillMode = fillMode
		setaEsquerdaOpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Seta esquerda__root"]?.layer.add(setaEsquerdaOpacityAnimation, forKey:"Passo 4_Opacity")

		let setaEsquerdaTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		setaEsquerdaTranslationXAnimation.duration = 15.500
		setaEsquerdaTranslationXAnimation.values = [0.000, 0.000, -160.000, -160.000] as [Float]
		setaEsquerdaTranslationXAnimation.keyTimes = [0.000, 0.548, 0.581, 1.000] as [NSNumber]
		setaEsquerdaTranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		setaEsquerdaTranslationXAnimation.beginTime = beginTime
		setaEsquerdaTranslationXAnimation.fillMode = fillMode
		setaEsquerdaTranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Seta esquerda__root"]?.layer.add(setaEsquerdaTranslationXAnimation, forKey:"Passo 4_TranslationX")

		let setaEsquerdaTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		setaEsquerdaTranslationYAnimation.duration = 15.500
		setaEsquerdaTranslationYAnimation.values = [0.000, 0.000, 70.000, 70.000] as [Float]
		setaEsquerdaTranslationYAnimation.keyTimes = [0.000, 0.548, 0.581, 1.000] as [NSNumber]
		setaEsquerdaTranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		setaEsquerdaTranslationYAnimation.beginTime = beginTime
		setaEsquerdaTranslationYAnimation.fillMode = fillMode
		setaEsquerdaTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Seta esquerda__root"]?.layer.add(setaEsquerdaTranslationYAnimation, forKey:"Passo 4_TranslationY")

		let liquidoMaskTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		liquidoMaskTranslationXAnimation.duration = 15.500
		liquidoMaskTranslationXAnimation.values = [0.000, 0.000, 0.000, 52.778, 100.000, 100.000] as [Float]
		liquidoMaskTranslationXAnimation.keyTimes = [0.000, 0.710, 0.742, 0.742, 0.806, 1.000] as [NSNumber]
		liquidoMaskTranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		liquidoMaskTranslationXAnimation.beginTime = beginTime
		liquidoMaskTranslationXAnimation.fillMode = fillMode
		liquidoMaskTranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Liquido_mask__root"]?.layer.add(liquidoMaskTranslationXAnimation, forKey:"Passo 4_TranslationX")

		let liquidoMaskTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		liquidoMaskTranslationYAnimation.duration = 15.500
		liquidoMaskTranslationYAnimation.values = [0.000, 0.000, 0.000, 0.000] as [Float]
		liquidoMaskTranslationYAnimation.keyTimes = [0.000, 0.710, 0.742, 1.000] as [NSNumber]
		liquidoMaskTranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		liquidoMaskTranslationYAnimation.beginTime = beginTime
		liquidoMaskTranslationYAnimation.fillMode = fillMode
		liquidoMaskTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Liquido_mask__root"]?.layer.add(liquidoMaskTranslationYAnimation, forKey:"Passo 4_TranslationY")

		let seringaEmboloTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		seringaEmboloTranslationXAnimation.duration = 15.500
		seringaEmboloTranslationXAnimation.values = [0.000, 0.000, 55.556, 55.556] as [Float]
		seringaEmboloTranslationXAnimation.keyTimes = [0.000, 0.742, 0.806, 1.000] as [NSNumber]
		seringaEmboloTranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		seringaEmboloTranslationXAnimation.beginTime = beginTime
		seringaEmboloTranslationXAnimation.fillMode = fillMode
		seringaEmboloTranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Seringa embolo__root"]?.layer.add(seringaEmboloTranslationXAnimation, forKey:"Passo 4_TranslationX")

		let seringaEmboloTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		seringaEmboloTranslationYAnimation.duration = 15.500
		seringaEmboloTranslationYAnimation.values = [0.000, 0.000, 0.000] as [Float]
		seringaEmboloTranslationYAnimation.keyTimes = [0.000, 0.742, 1.000] as [NSNumber]
		seringaEmboloTranslationYAnimation.timingFunctions = [linearTiming, linearTiming]
		seringaEmboloTranslationYAnimation.beginTime = beginTime
		seringaEmboloTranslationYAnimation.fillMode = fillMode
		seringaEmboloTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Seringa embolo__root"]?.layer.add(seringaEmboloTranslationYAnimation, forKey:"Passo 4_TranslationY")

		let misturaOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		misturaOpacityAnimation.duration = 15.500
		misturaOpacityAnimation.values = [1.000, 1.000, 0.000, 0.000] as [Float]
		misturaOpacityAnimation.keyTimes = [0.000, 0.419, 0.516, 1.000] as [NSNumber]
		misturaOpacityAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		misturaOpacityAnimation.beginTime = beginTime
		misturaOpacityAnimation.fillMode = fillMode
		misturaOpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Mistura__root"]?.layer.add(misturaOpacityAnimation, forKey:"Passo 4_Opacity")

		let mistura2TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		mistura2TranslationXAnimation.duration = 15.500
		mistura2TranslationXAnimation.values = [0.000, -120.000, -120.000] as [Float]
		mistura2TranslationXAnimation.keyTimes = [0.000, 0.058, 1.000] as [NSNumber]
		mistura2TranslationXAnimation.timingFunctions = [anticOverTiming, linearTiming]
		mistura2TranslationXAnimation.beginTime = beginTime
		mistura2TranslationXAnimation.fillMode = fillMode
		mistura2TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Mistura 2__root"]?.layer.add(mistura2TranslationXAnimation, forKey:"Passo 4_TranslationX")

		let mistura2TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		mistura2TranslationYAnimation.duration = 15.500
		mistura2TranslationYAnimation.values = [0.000, 0.000] as [Float]
		mistura2TranslationYAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		mistura2TranslationYAnimation.timingFunctions = [linearTiming]
		mistura2TranslationYAnimation.beginTime = beginTime
		mistura2TranslationYAnimation.fillMode = fillMode
		mistura2TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Mistura 2__root"]?.layer.add(mistura2TranslationYAnimation, forKey:"Passo 4_TranslationY")

		let tampinhaRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		tampinhaRotationAnimation.duration = 15.500
		tampinhaRotationAnimation.values = [0.000, 0.000, -0.295, -0.295] as [Float]
		tampinhaRotationAnimation.keyTimes = [0.000, 0.073, 0.129, 1.000] as [NSNumber]
		tampinhaRotationAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		tampinhaRotationAnimation.beginTime = beginTime
		tampinhaRotationAnimation.fillMode = fillMode
		tampinhaRotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Tampinha__root"]?.layer.add(tampinhaRotationAnimation, forKey:"Passo 4_Rotation")

		let tampinhaOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		tampinhaOpacityAnimation.duration = 15.500
		tampinhaOpacityAnimation.values = [1.000, 1.000, 1.000, 0.000, 0.000] as [Float]
		tampinhaOpacityAnimation.keyTimes = [0.000, 0.097, 0.129, 0.129, 1.000] as [NSNumber]
		tampinhaOpacityAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming]
		tampinhaOpacityAnimation.beginTime = beginTime
		tampinhaOpacityAnimation.fillMode = fillMode
		tampinhaOpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Tampinha__root"]?.layer.add(tampinhaOpacityAnimation, forKey:"Passo 4_Opacity")

		let tampinhaTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		tampinhaTranslationXAnimation.duration = 15.500
		tampinhaTranslationXAnimation.values = [0.000, 0.000, 1038.156, 1038.156] as [Float]
		tampinhaTranslationXAnimation.keyTimes = [0.000, 0.073, 0.129, 1.000] as [NSNumber]
		tampinhaTranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		tampinhaTranslationXAnimation.beginTime = beginTime
		tampinhaTranslationXAnimation.fillMode = fillMode
		tampinhaTranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Tampinha__root"]?.layer.add(tampinhaTranslationXAnimation, forKey:"Passo 4_TranslationX")

		let tampinhaTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		tampinhaTranslationYAnimation.duration = 15.500
		tampinhaTranslationYAnimation.values = [0.000, 0.000, -562.285, -562.285] as [Float]
		tampinhaTranslationYAnimation.keyTimes = [0.000, 0.073, 0.129, 1.000] as [NSNumber]
		tampinhaTranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		tampinhaTranslationYAnimation.beginTime = beginTime
		tampinhaTranslationYAnimation.fillMode = fillMode
		tampinhaTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Tampinha__root"]?.layer.add(tampinhaTranslationYAnimation, forKey:"Passo 4_TranslationY")
	}

	func removePasso4Animation() {
		self.layer.removeAnimation(forKey: "Passo4")
		self.viewsByName["Tudo__root"]?.layer.removeAnimation(forKey: "Passo 4_Rotation")
		self.viewsByName["Tudo__xScale"]?.layer.removeAnimation(forKey: "Passo 4_ScaleX")
		self.viewsByName["Tudo__yScale"]?.layer.removeAnimation(forKey: "Passo 4_ScaleY")
		self.viewsByName["Seringa__root"]?.layer.removeAnimation(forKey: "Passo 4_Rotation")
		self.viewsByName["Seringa__root"]?.layer.removeAnimation(forKey: "Passo 4_Opacity")
		self.viewsByName["Seringa__root"]?.layer.removeAnimation(forKey: "Passo 4_TranslationX")
		self.viewsByName["Seringa__root"]?.layer.removeAnimation(forKey: "Passo 4_TranslationY")
		self.viewsByName["Mistura virada__root"]?.layer.removeAnimation(forKey: "Passo 4_Opacity")
		self.viewsByName["Seta esquerda__root"]?.layer.removeAnimation(forKey: "Passo 4_Opacity")
		self.viewsByName["Seta esquerda__root"]?.layer.removeAnimation(forKey: "Passo 4_TranslationX")
		self.viewsByName["Seta esquerda__root"]?.layer.removeAnimation(forKey: "Passo 4_TranslationY")
		self.viewsByName["Liquido_mask__root"]?.layer.removeAnimation(forKey: "Passo 4_TranslationX")
		self.viewsByName["Liquido_mask__root"]?.layer.removeAnimation(forKey: "Passo 4_TranslationY")
		self.viewsByName["Seringa embolo__root"]?.layer.removeAnimation(forKey: "Passo 4_TranslationX")
		self.viewsByName["Seringa embolo__root"]?.layer.removeAnimation(forKey: "Passo 4_TranslationY")
		self.viewsByName["Mistura__root"]?.layer.removeAnimation(forKey: "Passo 4_Opacity")
		self.viewsByName["Mistura 2__root"]?.layer.removeAnimation(forKey: "Passo 4_TranslationX")
		self.viewsByName["Mistura 2__root"]?.layer.removeAnimation(forKey: "Passo 4_TranslationY")
		self.viewsByName["Tampinha__root"]?.layer.removeAnimation(forKey: "Passo 4_Rotation")
		self.viewsByName["Tampinha__root"]?.layer.removeAnimation(forKey: "Passo 4_Opacity")
		self.viewsByName["Tampinha__root"]?.layer.removeAnimation(forKey: "Passo 4_TranslationX")
		self.viewsByName["Tampinha__root"]?.layer.removeAnimation(forKey: "Passo 4_TranslationY")
	}

	// MARK: CAAnimationDelegate
	func animationDidStop(_ anim: CAAnimation, finished flag: Bool) {
		if let completion = self.animationCompletions[anim] {
			self.animationCompletions.removeValue(forKey: anim)
			completion(flag)
		}
	}

//	override func removeAllAnimations() {
//		for subview in viewsByName.values {
//			subview.layer.removeAllAnimations()
//		}
//		self.layer.removeAnimation(forKey: "Passo4")
//	}
}
