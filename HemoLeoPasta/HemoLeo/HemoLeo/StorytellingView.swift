////
//// StorytellingView.swift
//// Generated by Core Animator version 1.3 on 7/22/16.
////
//// DO NOT MODIFY THIS FILE. IT IS AUTO-GENERATED AND WILL BE OVERWRITTEN
////
//
//import UIKit
//
//@IBDesignable
//class StorytellingView : UIView {
//
//
//	var animationCompletions = Dictionary<CAAnimation, (Bool) -> Void>()
//	var viewsByName: [String : UIView]!
//
//	// - MARK: Life Cycle
//
//	convenience init() {
//		self.init(frame: CGRect(x: 0, y: 0, width: 1024, height: 768))
//	}
//
//	override init(frame: CGRect) {
//		super.init(frame: frame)
//		self.setupHierarchy()
//	}
//
//	required init?(coder aDecoder: NSCoder) {
//		super.init(coder: aDecoder)
//		self.setupHierarchy()
//	}
//
//	// - MARK: Scaling
//
//	override func layoutSubviews() {
//		super.layoutSubviews()
//
//		if let scalingView = self.viewsByName["__scaling__"] {
//			var xScale = self.bounds.size.width / scalingView.bounds.size.width
//			var yScale = self.bounds.size.height / scalingView.bounds.size.height
//			switch contentMode {
//			case .ScaleToFill:
//				break
//			case .ScaleAspectFill:
//				let scale = max(xScale, yScale)
//				xScale = scale
//				yScale = scale
//			default:
//				let scale = min(xScale, yScale)
//				xScale = scale
//				yScale = scale
//			}
//			scalingView.transform = CGAffineTransformMakeScale(xScale, yScale)
//			scalingView.center = CGPoint(x:CGRectGetMidX(self.bounds), y:CGRectGetMidY(self.bounds))
//		}
//	}
//
//	// - MARK: Setup
//
//	func setupHierarchy() {
//		var viewsByName: [String : UIView] = [:]
//		let bundle = NSBundle(forClass:self.dynamicType)
//		let __scaling__ = UIView()
//		__scaling__.bounds = CGRect(x:0, y:0, width:1024, height:768)
//		__scaling__.center = CGPoint(x:512.0, y:384.0)
//		self.addSubview(__scaling__)
//		viewsByName["__scaling__"] = __scaling__
//
//		let fala1 = UIImageView()
//		fala1.bounds = CGRect(x:0, y:0, width:803.0, height:119.0)
//		var imgFala1: UIImage!
//		if let imagePath = bundle.pathForResource("Fala1.png", ofType:nil) {
//			imgFala1 = UIImage(contentsOfFile:imagePath)
//		}else {
//			print("** Warning: Could not create image from 'Fala1.png'. Please make sure that it is added to the project directly (not in a folder reference).")
//		}
//		fala1.image = imgFala1
//		fala1.contentMode = .Center
//		fala1.layer.position = CGPoint(x:578.526, y:131.333)
//		__scaling__.addSubview(fala1)
//		viewsByName["Fala1"] = fala1
//
//		let fala1Mask = UIImageView()
//		fala1Mask.bounds = CGRect(x:0, y:0, width:185.0, height:111.0)
//		var imgGradient1: UIImage!
//		if let imagePath = bundle.pathForResource("gradient1.png", ofType:nil) {
//			imgGradient1 = UIImage(contentsOfFile:imagePath)
//		}else {
//			print("** Warning: Could not create image from 'gradient1.png'. Please make sure that it is added to the project directly (not in a folder reference).")
//		}
//		fala1Mask.image = imgGradient1
//		fala1Mask.contentMode = .Center
//		fala1Mask.layer.position = CGPoint(x:-568.000, y:60.076)
//		fala1Mask.transform = CGAffineTransformScale(CGAffineTransformMakeRotation(4.72), 1.07, 10.41)
//		fala1.maskView = fala1Mask
//		viewsByName["Fala1_mask"] = fala1Mask
//
//		let leoFalando = UIImageView()
//		leoFalando.bounds = CGRect(x:0, y:0, width:170.0, height:179.0)
//		var imgLeoFalando: UIImage!
//		if let imagePath = bundle.pathForResource("Leo falando.png", ofType:nil) {
//			imgLeoFalando = UIImage(contentsOfFile:imagePath)
//		}else {
//			print("** Warning: Could not create image from 'Leo falando.png'. Please make sure that it is added to the project directly (not in a folder reference).")
//		}
//		leoFalando.image = imgLeoFalando
//		leoFalando.contentMode = .Center
//		leoFalando.layer.position = CGPoint(x:110.714, y:119.535)
//		leoFalando.transform = CGAffineTransformMakeScale(0.00, 0.00)
//		__scaling__.addSubview(leoFalando)
//		viewsByName["Leo falando"] = leoFalando
//
//		let leo = UIView()
//		leo.bounds = CGRect(x:0, y:0, width:170.0, height:234.1)
//		leo.layer.position = CGPoint(x:512.000, y:546.624)
//		leo.transform = CGAffineTransformMakeScale(1.51, 1.51)
//		__scaling__.addSubview(leo)
//		viewsByName["Leo"] = leo
//
//		let corpo = UIImageView()
//		corpo.bounds = CGRect(x:0, y:0, width:161.0, height:109.0)
//		var imgCorpo: UIImage!
//		if let imagePath = bundle.pathForResource("Corpo.png", ofType:nil) {
//			imgCorpo = UIImage(contentsOfFile:imagePath)
//		}else {
//			print("** Warning: Could not create image from 'Corpo.png'. Please make sure that it is added to the project directly (not in a folder reference).")
//		}
//		corpo.image = imgCorpo
//		corpo.contentMode = .Center
//		corpo.layer.position = CGPoint(x:81.000, y:179.597)
//		leo.addSubview(corpo)
//		viewsByName["Corpo"] = corpo
//
//		let leoDoCorpo = UIImageView()
//		leoDoCorpo.bounds = CGRect(x:0, y:0, width:170.0, height:179.0)
//		var imgLeoDoCorpo: UIImage!
//		if let imagePath = bundle.pathForResource("Leo do corpo.png", ofType:nil) {
//			imgLeoDoCorpo = UIImage(contentsOfFile:imagePath)
//		}else {
//			print("** Warning: Could not create image from 'Leo do corpo.png'. Please make sure that it is added to the project directly (not in a folder reference).")
//		}
//		leoDoCorpo.image = imgLeoDoCorpo
//		leoDoCorpo.contentMode = .Center
//		leoDoCorpo.layer.position = CGPoint(x:85.000, y:89.500)
//		leo.addSubview(leoDoCorpo)
//		viewsByName["Leo do corpo"] = leoDoCorpo
//
//		let movement = UIImageView()
//		movement.bounds = CGRect(x:0, y:0, width:52.0, height:14.0)
//		var imgArrow: UIImage!
//		if let imagePath = bundle.pathForResource("arrow.png", ofType:nil) {
//			imgArrow = UIImage(contentsOfFile:imagePath)
//		}else {
//			print("** Warning: Could not create image from 'arrow.png'. Please make sure that it is added to the project directly (not in a folder reference).")
//		}
//		movement.image = imgArrow
//		movement.contentMode = .Center
//		movement.layer.position = CGPoint(x:908.000, y:708.000)
//		movement.transform = CGAffineTransformMakeScale(1.40, 1.40)
//		__scaling__.addSubview(movement)
//		viewsByName["Movement"] = movement
//
//		let movementMask = UIImageView()
//		movementMask.bounds = CGRect(x:0, y:0, width:185.0, height:118.0)
//		var imgGradient2: UIImage!
//		if let imagePath = bundle.pathForResource("gradient2.png", ofType:nil) {
//			imgGradient2 = UIImage(contentsOfFile:imagePath)
//		}else {
//			print("** Warning: Could not create image from 'gradient2.png'. Please make sure that it is added to the project directly (not in a folder reference).")
//		}
//		movementMask.image = imgGradient2
//		movementMask.contentMode = .Center
//		movementMask.layer.position = CGPoint(x:139.088, y:5.350)
//		movementMask.transform = CGAffineTransformScale(CGAffineTransformMakeRotation(4.71), 0.17, 1.06)
//		movement.maskView = movementMask
//		viewsByName["Movement_mask"] = movementMask
//
//		let hand = UIImageView()
//		hand.bounds = CGRect(x:0, y:0, width:54.0, height:50.0)
//		var imgHand: UIImage!
//		if let imagePath = bundle.pathForResource("hand.png", ofType:nil) {
//			imgHand = UIImage(contentsOfFile:imagePath)
//		}else {
//			print("** Warning: Could not create image from 'hand.png'. Please make sure that it is added to the project directly (not in a folder reference).")
//		}
//		hand.image = imgHand
//		hand.contentMode = .Center
//		hand.layer.position = CGPoint(x:958.925, y:728.962)
//		hand.transform = CGAffineTransformMakeScale(0.00, 0.00)
//		__scaling__.addSubview(hand)
//		viewsByName["hand"] = hand
//
//		let arrow = UIImageView()
//		arrow.bounds = CGRect(x:0, y:0, width:56.0, height:16.0)
//		arrow.image = imgArrow
//		arrow.contentMode = .Center
//		arrow.layer.position = CGPoint(x:1098.366, y:637.975)
//		__scaling__.addSubview(arrow)
//		viewsByName["arrow"] = arrow
//
//		self.viewsByName = viewsByName
//	}
//
//	// - MARK: story1
//
//	func addStory1Animation() {
//		addStory1AnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
//	}
//
//	func addStory1Animation(completion: ((Bool) -> Void)?) {
//		addStory1AnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
//	}
//
//	func addStory1Animation(removedOnCompletion removedOnCompletion: Bool) {
//		addStory1AnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
//	}
//
//	func addStory1Animation(removedOnCompletion removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
//		addStory1AnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
//	}
//
//	func addStory1AnimationWithBeginTime(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
//		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
//		if let complete = completion {
//			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
//			representativeAnimation.duration = 4.050
//			representativeAnimation.delegate = self
//			self.layer.addAnimation(representativeAnimation, forKey: "Story1")
//			self.animationCompletions[layer.animationForKey("Story1")!] = complete
//		}
//
//		let leoDoCorpoRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
//		leoDoCorpoRotationAnimation.duration = 4.050
//		leoDoCorpoRotationAnimation.values = [0.000 as Float, 0.052 as Float, 0.000 as Float, -0.052 as Float, 0.000 as Float, 0.052 as Float, 0.000 as Float, -0.052 as Float, 0.000 as Float]
//		leoDoCorpoRotationAnimation.keyTimes = [0.000 as Float, 0.123 as Float, 0.247 as Float, 0.370 as Float, 0.494 as Float, 0.630 as Float, 0.753 as Float, 0.877 as Float, 1.000 as Float]
//		leoDoCorpoRotationAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
//		leoDoCorpoRotationAnimation.beginTime = beginTime
//		leoDoCorpoRotationAnimation.fillMode = fillMode
//		leoDoCorpoRotationAnimation.removedOnCompletion = removedOnCompletion
//		self.viewsByName["Leo do corpo"]?.layer.addAnimation(leoDoCorpoRotationAnimation, forKey:"story1_Rotation")
//
//		let handScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
//		handScaleXAnimation.duration = 4.050
//		handScaleXAnimation.values = [0.000 as Float, 0.000 as Float, 1.000 as Float, 1.000 as Float]
//		handScaleXAnimation.keyTimes = [0.000 as Float, 0.617 as Float, 0.679 as Float, 1.000 as Float]
//		handScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
//		handScaleXAnimation.beginTime = beginTime
//		handScaleXAnimation.fillMode = fillMode
//		handScaleXAnimation.removedOnCompletion = removedOnCompletion
//		self.viewsByName["hand"]?.layer.addAnimation(handScaleXAnimation, forKey:"story1_ScaleX")
//
//		let handScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
//		handScaleYAnimation.duration = 4.050
//		handScaleYAnimation.values = [0.000 as Float, 0.000 as Float, 1.000 as Float, 1.000 as Float]
//		handScaleYAnimation.keyTimes = [0.000 as Float, 0.617 as Float, 0.679 as Float, 1.000 as Float]
//		handScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
//		handScaleYAnimation.beginTime = beginTime
//		handScaleYAnimation.fillMode = fillMode
//		handScaleYAnimation.removedOnCompletion = removedOnCompletion
//		self.viewsByName["hand"]?.layer.addAnimation(handScaleYAnimation, forKey:"story1_ScaleY")
//
//		let handTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
//		handTranslationXAnimation.duration = 4.050
//		handTranslationXAnimation.values = [0.000 as Float, 0.000 as Float, -70.000 as Float, -70.000 as Float]
//		handTranslationXAnimation.keyTimes = [0.000 as Float, 0.704 as Float, 0.765 as Float, 1.000 as Float]
//		handTranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
//		handTranslationXAnimation.beginTime = beginTime
//		handTranslationXAnimation.fillMode = fillMode
//		handTranslationXAnimation.removedOnCompletion = removedOnCompletion
//		self.viewsByName["hand"]?.layer.addAnimation(handTranslationXAnimation, forKey:"story1_TranslationX")
//
//		let handTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
//		handTranslationYAnimation.duration = 4.050
//		handTranslationYAnimation.values = [0.000 as Float, 0.000 as Float, 0.000 as Float]
//		handTranslationYAnimation.keyTimes = [0.000 as Float, 0.704 as Float, 1.000 as Float]
//		handTranslationYAnimation.timingFunctions = [linearTiming, linearTiming]
//		handTranslationYAnimation.beginTime = beginTime
//		handTranslationYAnimation.fillMode = fillMode
//		handTranslationYAnimation.removedOnCompletion = removedOnCompletion
//		self.viewsByName["hand"]?.layer.addAnimation(handTranslationYAnimation, forKey:"story1_TranslationY")
//
//		let movementMaskTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
//		movementMaskTranslationXAnimation.duration = 4.050
//		movementMaskTranslationXAnimation.values = [0.000 as Float, 0.000 as Float, -68.000 as Float, -68.000 as Float]
//		movementMaskTranslationXAnimation.keyTimes = [0.000 as Float, 0.679 as Float, 0.765 as Float, 1.000 as Float]
//		movementMaskTranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
//		movementMaskTranslationXAnimation.beginTime = beginTime
//		movementMaskTranslationXAnimation.fillMode = fillMode
//		movementMaskTranslationXAnimation.removedOnCompletion = removedOnCompletion
//		self.viewsByName["Movement_mask"]?.layer.addAnimation(movementMaskTranslationXAnimation, forKey:"story1_TranslationX")
//
//		let movementMaskTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
//		movementMaskTranslationYAnimation.duration = 4.050
//		movementMaskTranslationYAnimation.values = [0.000 as Float, 0.000 as Float, 0.000 as Float]
//		movementMaskTranslationYAnimation.keyTimes = [0.000 as Float, 0.679 as Float, 1.000 as Float]
//		movementMaskTranslationYAnimation.timingFunctions = [linearTiming, linearTiming]
//		movementMaskTranslationYAnimation.beginTime = beginTime
//		movementMaskTranslationYAnimation.fillMode = fillMode
//		movementMaskTranslationYAnimation.removedOnCompletion = removedOnCompletion
//		self.viewsByName["Movement_mask"]?.layer.addAnimation(movementMaskTranslationYAnimation, forKey:"story1_TranslationY")
//
//		let leoFalandoScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
//		leoFalandoScaleXAnimation.duration = 4.050
//		leoFalandoScaleXAnimation.values = [0.000 as Float, 1.100 as Float, 1.000 as Float, 1.000 as Float]
//		leoFalandoScaleXAnimation.keyTimes = [0.000 as Float, 0.074 as Float, 0.099 as Float, 1.000 as Float]
//		leoFalandoScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
//		leoFalandoScaleXAnimation.beginTime = beginTime
//		leoFalandoScaleXAnimation.fillMode = fillMode
//		leoFalandoScaleXAnimation.removedOnCompletion = removedOnCompletion
//		self.viewsByName["Leo falando"]?.layer.addAnimation(leoFalandoScaleXAnimation, forKey:"story1_ScaleX")
//
//		let leoFalandoScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
//		leoFalandoScaleYAnimation.duration = 4.050
//		leoFalandoScaleYAnimation.values = [0.000 as Float, 1.100 as Float, 1.000 as Float, 1.000 as Float]
//		leoFalandoScaleYAnimation.keyTimes = [0.000 as Float, 0.074 as Float, 0.099 as Float, 1.000 as Float]
//		leoFalandoScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
//		leoFalandoScaleYAnimation.beginTime = beginTime
//		leoFalandoScaleYAnimation.fillMode = fillMode
//		leoFalandoScaleYAnimation.removedOnCompletion = removedOnCompletion
//		self.viewsByName["Leo falando"]?.layer.addAnimation(leoFalandoScaleYAnimation, forKey:"story1_ScaleY")
//
//		let fala1MaskTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
//		fala1MaskTranslationXAnimation.duration = 4.050
//		fala1MaskTranslationXAnimation.values = [0.000 as Float, 0.000 as Float, 1140.000 as Float, 1140.000 as Float]
//		fala1MaskTranslationXAnimation.keyTimes = [0.000 as Float, 0.099 as Float, 0.296 as Float, 1.000 as Float]
//		fala1MaskTranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
//		fala1MaskTranslationXAnimation.beginTime = beginTime
//		fala1MaskTranslationXAnimation.fillMode = fillMode
//		fala1MaskTranslationXAnimation.removedOnCompletion = removedOnCompletion
//		self.viewsByName["Fala1_mask"]?.layer.addAnimation(fala1MaskTranslationXAnimation, forKey:"story1_TranslationX")
//
//		let fala1MaskTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
//		fala1MaskTranslationYAnimation.duration = 4.050
//		fala1MaskTranslationYAnimation.values = [0.000 as Float, 0.000 as Float, 0.000 as Float]
//		fala1MaskTranslationYAnimation.keyTimes = [0.000 as Float, 0.099 as Float, 1.000 as Float]
//		fala1MaskTranslationYAnimation.timingFunctions = [linearTiming, linearTiming]
//		fala1MaskTranslationYAnimation.beginTime = beginTime
//		fala1MaskTranslationYAnimation.fillMode = fillMode
//		fala1MaskTranslationYAnimation.removedOnCompletion = removedOnCompletion
//		self.viewsByName["Fala1_mask"]?.layer.addAnimation(fala1MaskTranslationYAnimation, forKey:"story1_TranslationY")
//	}
//
//	func removeStory1Animation() {
//		self.layer.removeAnimationForKey("Story1")
//		self.viewsByName["Leo do corpo"]?.layer.removeAnimationForKey("story1_Rotation")
//		self.viewsByName["hand"]?.layer.removeAnimationForKey("story1_ScaleX")
//		self.viewsByName["hand"]?.layer.removeAnimationForKey("story1_ScaleY")
//		self.viewsByName["hand"]?.layer.removeAnimationForKey("story1_TranslationX")
//		self.viewsByName["hand"]?.layer.removeAnimationForKey("story1_TranslationY")
//		self.viewsByName["Movement_mask"]?.layer.removeAnimationForKey("story1_TranslationX")
//		self.viewsByName["Movement_mask"]?.layer.removeAnimationForKey("story1_TranslationY")
//		self.viewsByName["Leo falando"]?.layer.removeAnimationForKey("story1_ScaleX")
//		self.viewsByName["Leo falando"]?.layer.removeAnimationForKey("story1_ScaleY")
//		self.viewsByName["Fala1_mask"]?.layer.removeAnimationForKey("story1_TranslationX")
//		self.viewsByName["Fala1_mask"]?.layer.removeAnimationForKey("story1_TranslationY")
//	}
//
//	override func animationDidStop(anim: CAAnimation, finished flag: Bool) {
//		if let completion = self.animationCompletions[anim] {
//			self.animationCompletions.removeValueForKey(anim)
//			completion(flag)
//		}
//	}
//
//	override func removeAllAnimations() {
//		for subview in viewsByName.values {
//			subview.layer.removeAllAnimations()
//		}
//		self.layer.removeAnimationForKey("Story1")
//	}
//}
