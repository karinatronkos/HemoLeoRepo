//
// Storytelling2View.swift
// Generated by Core Animator version 1.3 on 7/22/16.
//
// DO NOT MODIFY THIS FILE. IT IS AUTO-GENERATED AND WILL BE OVERWRITTEN
//

import UIKit

@IBDesignable
class Storytelling2View : UIView {


	var animationCompletions = Dictionary<CAAnimation, (Bool) -> Void>()
	var viewsByName: [String : UIView]!

	// - MARK: Life Cycle

	convenience init() {
		self.init(frame: CGRect(x: 0, y: 0, width: 1024, height: 768))
	}

	override init(frame: CGRect) {
		super.init(frame: frame)
		self.setupHierarchy()
	}

	required init?(coder aDecoder: NSCoder) {
		super.init(coder: aDecoder)
		self.setupHierarchy()
	}

	// - MARK: Scaling

	override func layoutSubviews() {
		super.layoutSubviews()

		if let scalingView = self.viewsByName["__scaling__"] {
			var xScale = self.bounds.size.width / scalingView.bounds.size.width
			var yScale = self.bounds.size.height / scalingView.bounds.size.height
			switch contentMode {
			case .ScaleToFill:
				break
			case .ScaleAspectFill:
				let scale = max(xScale, yScale)
				xScale = scale
				yScale = scale
			default:
				let scale = min(xScale, yScale)
				xScale = scale
				yScale = scale
			}
			scalingView.transform = CGAffineTransformMakeScale(xScale, yScale)
			scalingView.center = CGPoint(x:CGRectGetMidX(self.bounds), y:CGRectGetMidY(self.bounds))
		}
	}

	// - MARK: Setup

	func setupHierarchy() {
		var viewsByName: [String : UIView] = [:]
		let bundle = NSBundle(forClass:self.dynamicType)
		let __scaling__ = UIView()
		__scaling__.bounds = CGRect(x:0, y:0, width:1024, height:768)
		__scaling__.center = CGPoint(x:512.0, y:384.0)
		self.addSubview(__scaling__)
		viewsByName["__scaling__"] = __scaling__

		let movement = UIImageView()
		movement.bounds = CGRect(x:0, y:0, width:56.0, height:16.0)
		var imgArrow: UIImage!
		if let imagePath = bundle.pathForResource("arrow.png", ofType:nil) {
			imgArrow = UIImage(contentsOfFile:imagePath)
		}else {
			print("** Warning: Could not create image from 'arrow.png'. Please make sure that it is added to the project directly (not in a folder reference).")
		}
		movement.image = imgArrow
		movement.contentMode = .Center
		movement.layer.position = CGPoint(x:908.000, y:708.000)
		movement.transform = CGAffineTransformMakeScale(1.40, 1.40)
		__scaling__.addSubview(movement)
		viewsByName["Movement"] = movement

		let movementMask = UIImageView()
		movementMask.bounds = CGRect(x:0, y:0, width:185.0, height:118.0)
		var imgGradient2: UIImage!
		if let imagePath = bundle.pathForResource("gradient2.png", ofType:nil) {
			imgGradient2 = UIImage(contentsOfFile:imagePath)
		}else {
			print("** Warning: Could not create image from 'gradient2.png'. Please make sure that it is added to the project directly (not in a folder reference).")
		}
		movementMask.image = imgGradient2
		movementMask.contentMode = .Center
		movementMask.layer.position = CGPoint(x:139.000, y:5.000)
		movementMask.transform = CGAffineTransformScale(CGAffineTransformMakeRotation(4.71), 0.17, 1.06)
		movement.maskView = movementMask
		viewsByName["Movement_mask"] = movementMask

		let hand = UIImageView()
		hand.bounds = CGRect(x:0, y:0, width:54.0, height:50.0)
		var imgHand: UIImage!
		if let imagePath = bundle.pathForResource("hand.png", ofType:nil) {
			imgHand = UIImage(contentsOfFile:imagePath)
		}else {
			print("** Warning: Could not create image from 'hand.png'. Please make sure that it is added to the project directly (not in a folder reference).")
		}
		hand.image = imgHand
		hand.contentMode = .Center
		hand.layer.position = CGPoint(x:958.925, y:728.962)
		hand.transform = CGAffineTransformMakeScale(0.00, 0.00)
		__scaling__.addSubview(hand)
		viewsByName["hand"] = hand

		let fala2 = UIImageView()
		fala2.bounds = CGRect(x:0, y:0, width:803.0, height:202.0)
		var imgFala2: UIImage!
		if let imagePath = bundle.pathForResource("Fala2.png", ofType:nil) {
			imgFala2 = UIImage(contentsOfFile:imagePath)
		}else {
			print("** Warning: Could not create image from 'Fala2.png'. Please make sure that it is added to the project directly (not in a folder reference).")
		}
		fala2.image = imgFala2
		fala2.contentMode = .Center
		fala2.layer.position = CGPoint(x:579.315, y:173.865)
		__scaling__.addSubview(fala2)
		viewsByName["Fala2"] = fala2

		let fala2Mask = UIImageView()
		fala2Mask.bounds = CGRect(x:0, y:0, width:185.0, height:118.0)
		fala2Mask.image = imgGradient2
		fala2Mask.contentMode = .Center
		fala2Mask.layer.position = CGPoint(x:-710.000, y:101.000)
		fala2Mask.transform = CGAffineTransformScale(CGAffineTransformMakeRotation(4.71), 1.71, 11.90)
		fala2.maskView = fala2Mask
		viewsByName["Fala2_mask"] = fala2Mask

		let menino = UIImageView()
		menino.bounds = CGRect(x:0, y:0, width:304.0, height:379.0)
		var imgMenino: UIImage!
		if let imagePath = bundle.pathForResource("Menino.png", ofType:nil) {
			imgMenino = UIImage(contentsOfFile:imagePath)
		}else {
			print("** Warning: Could not create image from 'Menino.png'. Please make sure that it is added to the project directly (not in a folder reference).")
		}
		menino.image = imgMenino
		menino.contentMode = .Center
		menino.layer.position = CGPoint(x:512.000, y:577.500)
		__scaling__.addSubview(menino)
		viewsByName["Menino"] = menino

		let leoFalando = UIImageView()
		leoFalando.bounds = CGRect(x:0, y:0, width:170.0, height:179.0)
		var imgLeoFalando: UIImage!
		if let imagePath = bundle.pathForResource("Leo falando.png", ofType:nil) {
			imgLeoFalando = UIImage(contentsOfFile:imagePath)
		}else {
			print("** Warning: Could not create image from 'Leo falando.png'. Please make sure that it is added to the project directly (not in a folder reference).")
		}
		leoFalando.image = imgLeoFalando
		leoFalando.contentMode = .Center
		leoFalando.layer.position = CGPoint(x:110.714, y:119.535)
		leoFalando.transform = CGAffineTransformMakeScale(0.00, 0.00)
		__scaling__.addSubview(leoFalando)
		viewsByName["Leo falando"] = leoFalando

		let pontoDireitoEmCima = UIImageView()
		pontoDireitoEmCima.bounds = CGRect(x:0, y:0, width:27.0, height:46.0)
		var imgPontoDireitoEmCima: UIImage!
		if let imagePath = bundle.pathForResource("Ponto direito em cima.png", ofType:nil) {
			imgPontoDireitoEmCima = UIImage(contentsOfFile:imagePath)
		}else {
			print("** Warning: Could not create image from 'Ponto direito em cima.png'. Please make sure that it is added to the project directly (not in a folder reference).")
		}
		pontoDireitoEmCima.image = imgPontoDireitoEmCima
		pontoDireitoEmCima.contentMode = .Center
		pontoDireitoEmCima.layer.position = CGPoint(x:373.768, y:514.414)
		pontoDireitoEmCima.transform = CGAffineTransformMakeScale(0.00, 0.00)
		__scaling__.addSubview(pontoDireitoEmCima)
		viewsByName["Ponto direito em cima"] = pontoDireitoEmCima

		let pontoEsquerdaEmCima = UIImageView()
		pontoEsquerdaEmCima.bounds = CGRect(x:0, y:0, width:40.0, height:67.0)
		var imgPontoEsquerdaEmCima: UIImage!
		if let imagePath = bundle.pathForResource("Ponto esquerda em cima.png", ofType:nil) {
			imgPontoEsquerdaEmCima = UIImage(contentsOfFile:imagePath)
		}else {
			print("** Warning: Could not create image from 'Ponto esquerda em cima.png'. Please make sure that it is added to the project directly (not in a folder reference).")
		}
		pontoEsquerdaEmCima.image = imgPontoEsquerdaEmCima
		pontoEsquerdaEmCima.contentMode = .Center
		pontoEsquerdaEmCima.layer.position = CGPoint(x:421.682, y:393.818)
		pontoEsquerdaEmCima.transform = CGAffineTransformMakeScale(0.00, 0.00)
		__scaling__.addSubview(pontoEsquerdaEmCima)
		viewsByName["Ponto esquerda em cima"] = pontoEsquerdaEmCima

		let pontoEsquerdaEmbaixo = UIImageView()
		pontoEsquerdaEmbaixo.bounds = CGRect(x:0, y:0, width:28.0, height:46.0)
		var imgPontoEsquerdaEmbaixo: UIImage!
		if let imagePath = bundle.pathForResource("Ponto esquerda embaixo.png", ofType:nil) {
			imgPontoEsquerdaEmbaixo = UIImage(contentsOfFile:imagePath)
		}else {
			print("** Warning: Could not create image from 'Ponto esquerda embaixo.png'. Please make sure that it is added to the project directly (not in a folder reference).")
		}
		pontoEsquerdaEmbaixo.image = imgPontoEsquerdaEmbaixo
		pontoEsquerdaEmbaixo.contentMode = .Center
		pontoEsquerdaEmbaixo.layer.position = CGPoint(x:626.229, y:384.000)
		pontoEsquerdaEmbaixo.transform = CGAffineTransformMakeScale(0.00, 0.00)
		__scaling__.addSubview(pontoEsquerdaEmbaixo)
		viewsByName["Ponto esquerda embaixo"] = pontoEsquerdaEmbaixo

		let pontoDireitoAbaixo = UIImageView()
		pontoDireitoAbaixo.bounds = CGRect(x:0, y:0, width:50.0, height:83.0)
		var imgPontoDireitoAbaixo: UIImage!
		if let imagePath = bundle.pathForResource("Ponto direito abaixo.png", ofType:nil) {
			imgPontoDireitoAbaixo = UIImage(contentsOfFile:imagePath)
		}else {
			print("** Warning: Could not create image from 'Ponto direito abaixo.png'. Please make sure that it is added to the project directly (not in a folder reference).")
		}
		pontoDireitoAbaixo.image = imgPontoDireitoAbaixo
		pontoDireitoAbaixo.contentMode = .Center
		pontoDireitoAbaixo.layer.position = CGPoint(x:654.888, y:502.305)
		pontoDireitoAbaixo.transform = CGAffineTransformMakeScale(0.00, 0.00)
		__scaling__.addSubview(pontoDireitoAbaixo)
		viewsByName["Ponto direito abaixo"] = pontoDireitoAbaixo

		let arrow = UIImageView()
		arrow.bounds = CGRect(x:0, y:0, width:56.0, height:16.0)
		arrow.image = imgArrow
		arrow.contentMode = .Center
		arrow.layer.position = CGPoint(x:1052.823, y:672.536)
		__scaling__.addSubview(arrow)
		viewsByName["arrow"] = arrow

		self.viewsByName = viewsByName
	}

	// - MARK: story2

	func addStory2Animation() {
		addStory2AnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addStory2Animation(completion: ((Bool) -> Void)?) {
		addStory2AnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addStory2Animation(removedOnCompletion removedOnCompletion: Bool) {
		addStory2AnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addStory2Animation(removedOnCompletion removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addStory2AnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addStory2AnimationWithBeginTime(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 11.100
			representativeAnimation.delegate = self
			self.layer.addAnimation(representativeAnimation, forKey: "Story2")
			self.animationCompletions[layer.animationForKey("Story2")!] = complete
		}

		let pontoEsquerdaEmCimaScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		pontoEsquerdaEmCimaScaleXAnimation.duration = 11.100
		pontoEsquerdaEmCimaScaleXAnimation.values = [0.000 as Float, 0.000 as Float, 1.100 as Float, 0.900 as Float, 1.000 as Float, 1.000 as Float]
		pontoEsquerdaEmCimaScaleXAnimation.keyTimes = [0.000 as Float, 0.450 as Float, 0.468 as Float, 0.480 as Float, 0.491 as Float, 1.000 as Float]
		pontoEsquerdaEmCimaScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		pontoEsquerdaEmCimaScaleXAnimation.beginTime = beginTime
		pontoEsquerdaEmCimaScaleXAnimation.fillMode = fillMode
		pontoEsquerdaEmCimaScaleXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["Ponto esquerda em cima"]?.layer.addAnimation(pontoEsquerdaEmCimaScaleXAnimation, forKey:"story2_ScaleX")

		let pontoEsquerdaEmCimaScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		pontoEsquerdaEmCimaScaleYAnimation.duration = 11.100
		pontoEsquerdaEmCimaScaleYAnimation.values = [0.000 as Float, 0.000 as Float, 1.100 as Float, 0.900 as Float, 1.000 as Float, 1.000 as Float]
		pontoEsquerdaEmCimaScaleYAnimation.keyTimes = [0.000 as Float, 0.450 as Float, 0.468 as Float, 0.480 as Float, 0.491 as Float, 1.000 as Float]
		pontoEsquerdaEmCimaScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		pontoEsquerdaEmCimaScaleYAnimation.beginTime = beginTime
		pontoEsquerdaEmCimaScaleYAnimation.fillMode = fillMode
		pontoEsquerdaEmCimaScaleYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["Ponto esquerda em cima"]?.layer.addAnimation(pontoEsquerdaEmCimaScaleYAnimation, forKey:"story2_ScaleY")

		let movementMaskTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		movementMaskTranslationXAnimation.duration = 11.100
		movementMaskTranslationXAnimation.values = [0.000 as Float, 0.000 as Float, -65.000 as Float]
		movementMaskTranslationXAnimation.keyTimes = [0.000 as Float, 0.946 as Float, 1.000 as Float]
		movementMaskTranslationXAnimation.timingFunctions = [linearTiming, linearTiming]
		movementMaskTranslationXAnimation.beginTime = beginTime
		movementMaskTranslationXAnimation.fillMode = fillMode
		movementMaskTranslationXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["Movement_mask"]?.layer.addAnimation(movementMaskTranslationXAnimation, forKey:"story2_TranslationX")

		let movementMaskTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		movementMaskTranslationYAnimation.duration = 11.100
		movementMaskTranslationYAnimation.values = [0.000 as Float, 0.000 as Float, 0.000 as Float]
		movementMaskTranslationYAnimation.keyTimes = [0.000 as Float, 0.946 as Float, 1.000 as Float]
		movementMaskTranslationYAnimation.timingFunctions = [linearTiming, linearTiming]
		movementMaskTranslationYAnimation.beginTime = beginTime
		movementMaskTranslationYAnimation.fillMode = fillMode
		movementMaskTranslationYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["Movement_mask"]?.layer.addAnimation(movementMaskTranslationYAnimation, forKey:"story2_TranslationY")

		let handScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		handScaleXAnimation.duration = 11.100
		handScaleXAnimation.values = [0.000 as Float, 0.000 as Float, 1.000 as Float, 1.000 as Float]
		handScaleXAnimation.keyTimes = [0.000 as Float, 0.914 as Float, 0.946 as Float, 1.000 as Float]
		handScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		handScaleXAnimation.beginTime = beginTime
		handScaleXAnimation.fillMode = fillMode
		handScaleXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["hand"]?.layer.addAnimation(handScaleXAnimation, forKey:"story2_ScaleX")

		let handScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		handScaleYAnimation.duration = 11.100
		handScaleYAnimation.values = [0.000 as Float, 0.000 as Float, 1.000 as Float, 1.000 as Float]
		handScaleYAnimation.keyTimes = [0.000 as Float, 0.914 as Float, 0.946 as Float, 1.000 as Float]
		handScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		handScaleYAnimation.beginTime = beginTime
		handScaleYAnimation.fillMode = fillMode
		handScaleYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["hand"]?.layer.addAnimation(handScaleYAnimation, forKey:"story2_ScaleY")

		let handTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		handTranslationXAnimation.duration = 11.100
		handTranslationXAnimation.values = [0.000 as Float, 0.000 as Float, -70.000 as Float, -70.000 as Float]
		handTranslationXAnimation.keyTimes = [0.000 as Float, 0.959 as Float, 0.993 as Float, 1.000 as Float]
		handTranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		handTranslationXAnimation.beginTime = beginTime
		handTranslationXAnimation.fillMode = fillMode
		handTranslationXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["hand"]?.layer.addAnimation(handTranslationXAnimation, forKey:"story2_TranslationX")

		let handTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		handTranslationYAnimation.duration = 11.100
		handTranslationYAnimation.values = [0.000 as Float, 0.000 as Float, 0.000 as Float]
		handTranslationYAnimation.keyTimes = [0.000 as Float, 0.959 as Float, 1.000 as Float]
		handTranslationYAnimation.timingFunctions = [linearTiming, linearTiming]
		handTranslationYAnimation.beginTime = beginTime
		handTranslationYAnimation.fillMode = fillMode
		handTranslationYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["hand"]?.layer.addAnimation(handTranslationYAnimation, forKey:"story2_TranslationY")

		let pontoDireitoAbaixoScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		pontoDireitoAbaixoScaleXAnimation.duration = 11.100
		pontoDireitoAbaixoScaleXAnimation.values = [0.000 as Float, 0.000 as Float, 1.100 as Float, 0.900 as Float, 1.000 as Float, 1.000 as Float]
		pontoDireitoAbaixoScaleXAnimation.keyTimes = [0.000 as Float, 0.532 as Float, 0.552 as Float, 0.561 as Float, 0.572 as Float, 1.000 as Float]
		pontoDireitoAbaixoScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		pontoDireitoAbaixoScaleXAnimation.beginTime = beginTime
		pontoDireitoAbaixoScaleXAnimation.fillMode = fillMode
		pontoDireitoAbaixoScaleXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["Ponto direito abaixo"]?.layer.addAnimation(pontoDireitoAbaixoScaleXAnimation, forKey:"story2_ScaleX")

		let pontoDireitoAbaixoScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		pontoDireitoAbaixoScaleYAnimation.duration = 11.100
		pontoDireitoAbaixoScaleYAnimation.values = [0.000 as Float, 0.000 as Float, 1.100 as Float, 0.900 as Float, 1.000 as Float, 1.000 as Float]
		pontoDireitoAbaixoScaleYAnimation.keyTimes = [0.000 as Float, 0.532 as Float, 0.552 as Float, 0.561 as Float, 0.572 as Float, 1.000 as Float]
		pontoDireitoAbaixoScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		pontoDireitoAbaixoScaleYAnimation.beginTime = beginTime
		pontoDireitoAbaixoScaleYAnimation.fillMode = fillMode
		pontoDireitoAbaixoScaleYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["Ponto direito abaixo"]?.layer.addAnimation(pontoDireitoAbaixoScaleYAnimation, forKey:"story2_ScaleY")

		let leoFalandoScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		leoFalandoScaleXAnimation.duration = 11.100
		leoFalandoScaleXAnimation.values = [0.000 as Float, 1.100 as Float, 1.000 as Float, 1.000 as Float]
		leoFalandoScaleXAnimation.keyTimes = [0.000 as Float, 0.027 as Float, 0.036 as Float, 1.000 as Float]
		leoFalandoScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		leoFalandoScaleXAnimation.beginTime = beginTime
		leoFalandoScaleXAnimation.fillMode = fillMode
		leoFalandoScaleXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["Leo falando"]?.layer.addAnimation(leoFalandoScaleXAnimation, forKey:"story2_ScaleX")

		let leoFalandoScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		leoFalandoScaleYAnimation.duration = 11.100
		leoFalandoScaleYAnimation.values = [0.000 as Float, 1.100 as Float, 1.000 as Float, 1.000 as Float]
		leoFalandoScaleYAnimation.keyTimes = [0.000 as Float, 0.027 as Float, 0.036 as Float, 1.000 as Float]
		leoFalandoScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		leoFalandoScaleYAnimation.beginTime = beginTime
		leoFalandoScaleYAnimation.fillMode = fillMode
		leoFalandoScaleYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["Leo falando"]?.layer.addAnimation(leoFalandoScaleYAnimation, forKey:"story2_ScaleY")

		let pontoEsquerdaEmbaixoScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		pontoEsquerdaEmbaixoScaleXAnimation.duration = 11.100
		pontoEsquerdaEmbaixoScaleXAnimation.values = [0.000 as Float, 0.000 as Float, 1.100 as Float, 0.900 as Float, 1.000 as Float, 1.000 as Float]
		pontoEsquerdaEmbaixoScaleXAnimation.keyTimes = [0.000 as Float, 0.484 as Float, 0.500 as Float, 0.509 as Float, 0.518 as Float, 1.000 as Float]
		pontoEsquerdaEmbaixoScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		pontoEsquerdaEmbaixoScaleXAnimation.beginTime = beginTime
		pontoEsquerdaEmbaixoScaleXAnimation.fillMode = fillMode
		pontoEsquerdaEmbaixoScaleXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["Ponto esquerda embaixo"]?.layer.addAnimation(pontoEsquerdaEmbaixoScaleXAnimation, forKey:"story2_ScaleX")

		let pontoEsquerdaEmbaixoScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		pontoEsquerdaEmbaixoScaleYAnimation.duration = 11.100
		pontoEsquerdaEmbaixoScaleYAnimation.values = [0.000 as Float, 0.000 as Float, 1.100 as Float, 0.900 as Float, 1.000 as Float, 1.000 as Float]
		pontoEsquerdaEmbaixoScaleYAnimation.keyTimes = [0.000 as Float, 0.484 as Float, 0.500 as Float, 0.509 as Float, 0.518 as Float, 1.000 as Float]
		pontoEsquerdaEmbaixoScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		pontoEsquerdaEmbaixoScaleYAnimation.beginTime = beginTime
		pontoEsquerdaEmbaixoScaleYAnimation.fillMode = fillMode
		pontoEsquerdaEmbaixoScaleYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["Ponto esquerda embaixo"]?.layer.addAnimation(pontoEsquerdaEmbaixoScaleYAnimation, forKey:"story2_ScaleY")

		let fala2MaskScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		fala2MaskScaleXAnimation.duration = 11.100
		fala2MaskScaleXAnimation.values = [1.712 as Float, 1.712 as Float, 1.712 as Float]
		fala2MaskScaleXAnimation.keyTimes = [0.000 as Float, 0.077 as Float, 1.000 as Float]
		fala2MaskScaleXAnimation.timingFunctions = [linearTiming, linearTiming]
		fala2MaskScaleXAnimation.beginTime = beginTime
		fala2MaskScaleXAnimation.fillMode = fillMode
		fala2MaskScaleXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["Fala2_mask"]?.layer.addAnimation(fala2MaskScaleXAnimation, forKey:"story2_ScaleX")

		let fala2MaskScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		fala2MaskScaleYAnimation.duration = 11.100
		fala2MaskScaleYAnimation.values = [11.904 as Float, 11.904 as Float, 20.204 as Float, 20.204 as Float]
		fala2MaskScaleYAnimation.keyTimes = [0.000 as Float, 0.077 as Float, 0.090 as Float, 1.000 as Float]
		fala2MaskScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		fala2MaskScaleYAnimation.beginTime = beginTime
		fala2MaskScaleYAnimation.fillMode = fillMode
		fala2MaskScaleYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["Fala2_mask"]?.layer.addAnimation(fala2MaskScaleYAnimation, forKey:"story2_ScaleY")

		let fala2MaskTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		fala2MaskTranslationXAnimation.duration = 11.100
		fala2MaskTranslationXAnimation.values = [0.000 as Float, 0.000 as Float, 1405.000 as Float, 1405.000 as Float]
		fala2MaskTranslationXAnimation.keyTimes = [0.000 as Float, 0.036 as Float, 0.090 as Float, 1.000 as Float]
		fala2MaskTranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		fala2MaskTranslationXAnimation.beginTime = beginTime
		fala2MaskTranslationXAnimation.fillMode = fillMode
		fala2MaskTranslationXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["Fala2_mask"]?.layer.addAnimation(fala2MaskTranslationXAnimation, forKey:"story2_TranslationX")

		let fala2MaskTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		fala2MaskTranslationYAnimation.duration = 11.100
		fala2MaskTranslationYAnimation.values = [0.000 as Float, 0.000 as Float, 0.000 as Float]
		fala2MaskTranslationYAnimation.keyTimes = [0.000 as Float, 0.036 as Float, 1.000 as Float]
		fala2MaskTranslationYAnimation.timingFunctions = [linearTiming, linearTiming]
		fala2MaskTranslationYAnimation.beginTime = beginTime
		fala2MaskTranslationYAnimation.fillMode = fillMode
		fala2MaskTranslationYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["Fala2_mask"]?.layer.addAnimation(fala2MaskTranslationYAnimation, forKey:"story2_TranslationY")

		let pontoDireitoEmCimaScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		pontoDireitoEmCimaScaleXAnimation.duration = 11.100
		pontoDireitoEmCimaScaleXAnimation.values = [0.000 as Float, 0.000 as Float, 1.100 as Float, 0.900 as Float, 1.000 as Float, 1.000 as Float]
		pontoDireitoEmCimaScaleXAnimation.keyTimes = [0.000 as Float, 0.511 as Float, 0.529 as Float, 0.541 as Float, 0.552 as Float, 1.000 as Float]
		pontoDireitoEmCimaScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		pontoDireitoEmCimaScaleXAnimation.beginTime = beginTime
		pontoDireitoEmCimaScaleXAnimation.fillMode = fillMode
		pontoDireitoEmCimaScaleXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["Ponto direito em cima"]?.layer.addAnimation(pontoDireitoEmCimaScaleXAnimation, forKey:"story2_ScaleX")

		let pontoDireitoEmCimaScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		pontoDireitoEmCimaScaleYAnimation.duration = 11.100
		pontoDireitoEmCimaScaleYAnimation.values = [0.000 as Float, 0.000 as Float, 1.100 as Float, 0.900 as Float, 1.000 as Float, 1.000 as Float]
		pontoDireitoEmCimaScaleYAnimation.keyTimes = [0.000 as Float, 0.511 as Float, 0.529 as Float, 0.541 as Float, 0.552 as Float, 1.000 as Float]
		pontoDireitoEmCimaScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		pontoDireitoEmCimaScaleYAnimation.beginTime = beginTime
		pontoDireitoEmCimaScaleYAnimation.fillMode = fillMode
		pontoDireitoEmCimaScaleYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["Ponto direito em cima"]?.layer.addAnimation(pontoDireitoEmCimaScaleYAnimation, forKey:"story2_ScaleY")
	}

	func removeStory2Animation() {
		self.layer.removeAnimationForKey("Story2")
		self.viewsByName["Ponto esquerda em cima"]?.layer.removeAnimationForKey("story2_ScaleX")
		self.viewsByName["Ponto esquerda em cima"]?.layer.removeAnimationForKey("story2_ScaleY")
		self.viewsByName["Movement_mask"]?.layer.removeAnimationForKey("story2_TranslationX")
		self.viewsByName["Movement_mask"]?.layer.removeAnimationForKey("story2_TranslationY")
		self.viewsByName["hand"]?.layer.removeAnimationForKey("story2_ScaleX")
		self.viewsByName["hand"]?.layer.removeAnimationForKey("story2_ScaleY")
		self.viewsByName["hand"]?.layer.removeAnimationForKey("story2_TranslationX")
		self.viewsByName["hand"]?.layer.removeAnimationForKey("story2_TranslationY")
		self.viewsByName["Ponto direito abaixo"]?.layer.removeAnimationForKey("story2_ScaleX")
		self.viewsByName["Ponto direito abaixo"]?.layer.removeAnimationForKey("story2_ScaleY")
		self.viewsByName["Leo falando"]?.layer.removeAnimationForKey("story2_ScaleX")
		self.viewsByName["Leo falando"]?.layer.removeAnimationForKey("story2_ScaleY")
		self.viewsByName["Ponto esquerda embaixo"]?.layer.removeAnimationForKey("story2_ScaleX")
		self.viewsByName["Ponto esquerda embaixo"]?.layer.removeAnimationForKey("story2_ScaleY")
		self.viewsByName["Fala2_mask"]?.layer.removeAnimationForKey("story2_ScaleX")
		self.viewsByName["Fala2_mask"]?.layer.removeAnimationForKey("story2_ScaleY")
		self.viewsByName["Fala2_mask"]?.layer.removeAnimationForKey("story2_TranslationX")
		self.viewsByName["Fala2_mask"]?.layer.removeAnimationForKey("story2_TranslationY")
		self.viewsByName["Ponto direito em cima"]?.layer.removeAnimationForKey("story2_ScaleX")
		self.viewsByName["Ponto direito em cima"]?.layer.removeAnimationForKey("story2_ScaleY")
	}

	override func animationDidStop(anim: CAAnimation, finished flag: Bool) {
		if let completion = self.animationCompletions[anim] {
			self.animationCompletions.removeValueForKey(anim)
			completion(flag)
		}
	}

	override func removeAllAnimations() {
		for subview in viewsByName.values {
			subview.layer.removeAllAnimations()
		}
		self.layer.removeAnimationForKey("Story2")
	}
}