//
// TutorialPasso1View.swift
// Generated by Core Animator version 1.3.2 on 23/11/16.
//
// DO NOT MODIFY THIS FILE. IT IS AUTO-GENERATED AND WILL BE OVERWRITTEN
//

import UIKit

private class TutorialPasso1PassthroughView: UIView {
    override func point(inside point: CGPoint, with event: UIEvent?) -> Bool {
        for subview in subviews as [UIView] {
            if subview.point(inside: convert(point, to: subview), with: event) { return true }
        }
        return false
    }
}

@IBDesignable
class TutorialPasso1View : UIView, CAAnimationDelegate {


	var animationCompletions = Dictionary<CAAnimation, (Bool) -> Void>()
	var viewsByName: [String : UIView]!

	// - MARK: Life Cycle

	convenience init() {
		self.init(frame: CGRect(x: 0, y: 0, width: 414, height: 454))
	}

	override init(frame: CGRect) {
		super.init(frame: frame)
		self.setupHierarchy()
	}

	required init?(coder aDecoder: NSCoder) {
		super.init(coder: aDecoder)
		self.setupHierarchy()
	}

	// - MARK: Scaling

	override func layoutSubviews() {
		super.layoutSubviews()

		if let scalingView = self.viewsByName["__scaling__"] {
			var xScale = self.bounds.size.width / scalingView.bounds.size.width
			var yScale = self.bounds.size.height / scalingView.bounds.size.height
			switch contentMode {
			case .scaleToFill:
				break
			case .scaleAspectFill:
				let scale = max(xScale, yScale)
				xScale = scale
				yScale = scale
			default:
				let scale = min(xScale, yScale)
				xScale = scale
				yScale = scale
			}
			scalingView.transform = CGAffineTransform(scaleX: xScale, y: yScale)
			scalingView.center = CGPoint(x:self.bounds.midX, y:self.bounds.midY)
		}
	}

	// - MARK: Setup

	func setupHierarchy() {
		var viewsByName: [String : UIView] = [:]
		let bundle = Bundle(for:type(of: self))
		let __scaling__ = UIView()
		__scaling__.bounds = CGRect(x:0, y:0, width:414, height:454)
		__scaling__.center = CGPoint(x:207.0, y:227.0)
		__scaling__.layer.masksToBounds = true
		self.addSubview(__scaling__)
		viewsByName["__scaling__"] = __scaling__

		let mao1__root = TutorialPasso1PassthroughView()
		let mao1__xScale = TutorialPasso1PassthroughView()
		let mao1__yScale = TutorialPasso1PassthroughView()
		let mao1 = UIImageView()
		let imgMao1 = UIImage(named:"Mao1.png", in: bundle, compatibleWith: nil)
		if imgMao1 == nil {
			print("** Warning: Could not create image from 'Mao1.png'")
		}
		mao1.image = imgMao1
		mao1.contentMode = .center
		mao1.bounds = CGRect(x:0, y:0, width:246.0, height:192.0)
		mao1__root.layer.position = CGPoint(x:252.192, y:243.978)
		mao1__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		mao1__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		mao1__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(mao1__root)
		mao1__root.addSubview(mao1__xScale)
		mao1__xScale.addSubview(mao1__yScale)
		mao1__yScale.addSubview(mao1)
		__scaling__.addSubview(mao1__root)
		viewsByName["Mao1__root"] = mao1__root
		viewsByName["Mao1__xScale"] = mao1__xScale
		viewsByName["Mao1__yScale"] = mao1__yScale
		viewsByName["Mao1"] = mao1

		let mao2__root = TutorialPasso1PassthroughView()
		let mao2__xScale = TutorialPasso1PassthroughView()
		let mao2__yScale = TutorialPasso1PassthroughView()
		let mao2 = UIImageView()
		let imgMao2 = UIImage(named:"Mao2.png", in: bundle, compatibleWith: nil)
		if imgMao2 == nil {
			print("** Warning: Could not create image from 'Mao2.png'")
		}
		mao2.image = imgMao2
		mao2.contentMode = .center
		mao2.bounds = CGRect(x:0, y:0, width:230.0, height:172.0)
		mao2__root.layer.position = CGPoint(x:236.478, y:272.859)
		mao2__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		mao2__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		mao2__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(mao2__root)
		mao2__root.addSubview(mao2__xScale)
		mao2__xScale.addSubview(mao2__yScale)
		mao2__yScale.addSubview(mao2)
		__scaling__.addSubview(mao2__root)
		viewsByName["Mao2__root"] = mao2__root
		viewsByName["Mao2__xScale"] = mao2__xScale
		viewsByName["Mao2__yScale"] = mao2__yScale
		viewsByName["Mao2"] = mao2

		let luva1__root = TutorialPasso1PassthroughView()
		let luva1__xScale = TutorialPasso1PassthroughView()
		let luva1__yScale = TutorialPasso1PassthroughView()
		let luva1 = UIImageView()
		let imgLuva1 = UIImage(named:"Luva1.png", in: bundle, compatibleWith: nil)
		if imgLuva1 == nil {
			print("** Warning: Could not create image from 'Luva1.png'")
		}
		luva1.image = imgLuva1
		luva1.contentMode = .center
		luva1.bounds = CGRect(x:0, y:0, width:235.0, height:192.0)
		luva1__root.layer.position = CGPoint(x:246.645, y:242.639)
		luva1__root.alpha = 0.00
		luva1__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		luva1__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		luva1__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(luva1__root)
		luva1__root.addSubview(luva1__xScale)
		luva1__xScale.addSubview(luva1__yScale)
		luva1__yScale.addSubview(luva1)
		__scaling__.addSubview(luva1__root)
		viewsByName["Luva1__root"] = luva1__root
		viewsByName["Luva1__xScale"] = luva1__xScale
		viewsByName["Luva1__yScale"] = luva1__yScale
		viewsByName["Luva1"] = luva1

		let luva2__root = TutorialPasso1PassthroughView()
		let luva2__xScale = TutorialPasso1PassthroughView()
		let luva2__yScale = TutorialPasso1PassthroughView()
		let luva2 = UIImageView()
		let imgLuva2 = UIImage(named:"Luva2.png", in: bundle, compatibleWith: nil)
		if imgLuva2 == nil {
			print("** Warning: Could not create image from 'Luva2.png'")
		}
		luva2.image = imgLuva2
		luva2.contentMode = .center
		luva2.bounds = CGRect(x:0, y:0, width:230.0, height:177.0)
		luva2__root.layer.position = CGPoint(x:236.694, y:275.352)
		luva2__root.alpha = 0.00
		luva2__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		luva2__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		luva2__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(luva2__root)
		luva2__root.addSubview(luva2__xScale)
		luva2__xScale.addSubview(luva2__yScale)
		luva2__yScale.addSubview(luva2)
		__scaling__.addSubview(luva2__root)
		viewsByName["Luva2__root"] = luva2__root
		viewsByName["Luva2__xScale"] = luva2__xScale
		viewsByName["Luva2__yScale"] = luva2__yScale
		viewsByName["Luva2"] = luva2

		let sabaoAgua__root = TutorialPasso1PassthroughView()
		let sabaoAgua__xScale = TutorialPasso1PassthroughView()
		let sabaoAgua__yScale = TutorialPasso1PassthroughView()
		let sabaoAgua = UIImageView()
		let imgSabaoAgua = UIImage(named:"SabaoAgua.png", in: bundle, compatibleWith: nil)
		if imgSabaoAgua == nil {
			print("** Warning: Could not create image from 'SabaoAgua.png'")
		}
		sabaoAgua.image = imgSabaoAgua
		sabaoAgua.contentMode = .center
		sabaoAgua.bounds = CGRect(x:0, y:0, width:207.0, height:109.0)
		sabaoAgua__root.layer.position = CGPoint(x:135.634, y:333.744)
		sabaoAgua__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		sabaoAgua__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		sabaoAgua__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(sabaoAgua__root)
		sabaoAgua__root.addSubview(sabaoAgua__xScale)
		sabaoAgua__xScale.addSubview(sabaoAgua__yScale)
		sabaoAgua__yScale.addSubview(sabaoAgua)
		__scaling__.addSubview(sabaoAgua__root)
		viewsByName["SabaoAgua__root"] = sabaoAgua__root
		viewsByName["SabaoAgua__xScale"] = sabaoAgua__xScale
		viewsByName["SabaoAgua__yScale"] = sabaoAgua__yScale
		viewsByName["SabaoAgua"] = sabaoAgua

		let torneira__root = TutorialPasso1PassthroughView()
		let torneira__xScale = TutorialPasso1PassthroughView()
		let torneira__yScale = TutorialPasso1PassthroughView()
		let torneira = UIImageView()
		let imgTorneira = UIImage(named:"Torneira.png", in: bundle, compatibleWith: nil)
		if imgTorneira == nil {
			print("** Warning: Could not create image from 'Torneira.png'")
		}
		torneira.image = imgTorneira
		torneira.contentMode = .center
		torneira.bounds = CGRect(x:0, y:0, width:116.0, height:123.0)
		torneira__root.layer.position = CGPoint(x:58.000, y:116.675)
		torneira__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		torneira__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		torneira__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(torneira__root)
		torneira__root.addSubview(torneira__xScale)
		torneira__xScale.addSubview(torneira__yScale)
		torneira__yScale.addSubview(torneira)
		__scaling__.addSubview(torneira__root)
		viewsByName["Torneira__root"] = torneira__root
		viewsByName["Torneira__xScale"] = torneira__xScale
		viewsByName["Torneira__yScale"] = torneira__yScale
		viewsByName["Torneira"] = torneira

		let soap__root = TutorialPasso1PassthroughView()
		let soap__xScale = TutorialPasso1PassthroughView()
		let soap__yScale = TutorialPasso1PassthroughView()
		let soap = UIImageView()
		let imgSoap = UIImage(named:"soap.png", in: bundle, compatibleWith: nil)
		if imgSoap == nil {
			print("** Warning: Could not create image from 'soap.png'")
		}
		soap.image = imgSoap
		soap.contentMode = .center
		soap.bounds = CGRect(x:0, y:0, width:53.0, height:34.0)
		soap__root.layer.position = CGPoint(x:102.030, y:263.742)
		soap__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		soap__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		soap__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(soap__root)
		soap__root.addSubview(soap__xScale)
		soap__xScale.addSubview(soap__yScale)
		soap__yScale.addSubview(soap)
		__scaling__.addSubview(soap__root)
		viewsByName["soap__root"] = soap__root
		viewsByName["soap__xScale"] = soap__xScale
		viewsByName["soap__yScale"] = soap__yScale
		viewsByName["soap"] = soap

		let soap2__root = TutorialPasso1PassthroughView()
		let soap2__xScale = TutorialPasso1PassthroughView()
		let soap2__yScale = TutorialPasso1PassthroughView()
		let soap2 = UIImageView()
		soap2.image = imgSoap
		soap2.contentMode = .center
		soap2.bounds = CGRect(x:0, y:0, width:53.0, height:34.0)
		soap2__root.layer.position = CGPoint(x:133.714, y:235.998)
		soap2__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		soap2__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		soap2__root.transform = CGAffineTransform(rotationAngle: 3.134)
		__scaling__.addSubview(soap2__root)
		soap2__root.addSubview(soap2__xScale)
		soap2__xScale.addSubview(soap2__yScale)
		soap2__yScale.addSubview(soap2)
		__scaling__.addSubview(soap2__root)
		viewsByName["soap 2__root"] = soap2__root
		viewsByName["soap 2__xScale"] = soap2__xScale
		viewsByName["soap 2__yScale"] = soap2__yScale
		viewsByName["soap 2"] = soap2

		let soap3__root = TutorialPasso1PassthroughView()
		let soap3__xScale = TutorialPasso1PassthroughView()
		let soap3__yScale = TutorialPasso1PassthroughView()
		let soap3 = UIImageView()
		soap3.image = imgSoap
		soap3.contentMode = .center
		soap3.bounds = CGRect(x:0, y:0, width:53.0, height:34.0)
		soap3__root.layer.position = CGPoint(x:197.436, y:245.003)
		soap3__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		soap3__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		soap3__root.transform = CGAffineTransform(rotationAngle: 5.826)
		__scaling__.addSubview(soap3__root)
		soap3__root.addSubview(soap3__xScale)
		soap3__xScale.addSubview(soap3__yScale)
		soap3__yScale.addSubview(soap3)
		__scaling__.addSubview(soap3__root)
		viewsByName["soap 3__root"] = soap3__root
		viewsByName["soap 3__xScale"] = soap3__xScale
		viewsByName["soap 3__yScale"] = soap3__yScale
		viewsByName["soap 3"] = soap3

		let soap4__root = TutorialPasso1PassthroughView()
		let soap4__xScale = TutorialPasso1PassthroughView()
		let soap4__yScale = TutorialPasso1PassthroughView()
		let soap4 = UIImageView()
		soap4.image = imgSoap
		soap4.contentMode = .center
		soap4.bounds = CGRect(x:0, y:0, width:53.0, height:34.0)
		soap4__root.layer.position = CGPoint(x:159.728, y:266.023)
		soap4__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		soap4__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		soap4__root.transform = CGAffineTransform(rotationAngle: 5.726)
		__scaling__.addSubview(soap4__root)
		soap4__root.addSubview(soap4__xScale)
		soap4__xScale.addSubview(soap4__yScale)
		soap4__yScale.addSubview(soap4)
		__scaling__.addSubview(soap4__root)
		viewsByName["soap 4__root"] = soap4__root
		viewsByName["soap 4__xScale"] = soap4__xScale
		viewsByName["soap 4__yScale"] = soap4__yScale
		viewsByName["soap 4"] = soap4

		let soap5__root = TutorialPasso1PassthroughView()
		let soap5__xScale = TutorialPasso1PassthroughView()
		let soap5__yScale = TutorialPasso1PassthroughView()
		let soap5 = UIImageView()
		soap5.image = imgSoap
		soap5.contentMode = .center
		soap5.bounds = CGRect(x:0, y:0, width:53.0, height:34.0)
		soap5__root.layer.position = CGPoint(x:219.395, y:286.978)
		soap5__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		soap5__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		soap5__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(soap5__root)
		soap5__root.addSubview(soap5__xScale)
		soap5__xScale.addSubview(soap5__yScale)
		soap5__yScale.addSubview(soap5)
		__scaling__.addSubview(soap5__root)
		viewsByName["soap 5__root"] = soap5__root
		viewsByName["soap 5__xScale"] = soap5__xScale
		viewsByName["soap 5__yScale"] = soap5__yScale
		viewsByName["soap 5"] = soap5

		let soap6__root = TutorialPasso1PassthroughView()
		let soap6__xScale = TutorialPasso1PassthroughView()
		let soap6__yScale = TutorialPasso1PassthroughView()
		let soap6 = UIImageView()
		soap6.image = imgSoap
		soap6.contentMode = .center
		soap6.bounds = CGRect(x:0, y:0, width:53.0, height:34.0)
		soap6__root.layer.position = CGPoint(x:180.500, y:289.806)
		soap6__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		soap6__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		soap6__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(soap6__root)
		soap6__root.addSubview(soap6__xScale)
		soap6__xScale.addSubview(soap6__yScale)
		soap6__yScale.addSubview(soap6)
		__scaling__.addSubview(soap6__root)
		viewsByName["soap 6__root"] = soap6__root
		viewsByName["soap 6__xScale"] = soap6__xScale
		viewsByName["soap 6__yScale"] = soap6__yScale
		viewsByName["soap 6"] = soap6

		self.viewsByName = viewsByName
	}

	// - MARK: lavarMao

	func addLavarMaoAnimation() {
		addLavarMaoAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addLavarMaoAnimation(completion: ((Bool) -> Void)?) {
		addLavarMaoAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addLavarMaoAnimation(removedOnCompletion: Bool) {
		addLavarMaoAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addLavarMaoAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addLavarMaoAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addLavarMaoAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let easeInOutTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseInEaseOut)
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		let anticOverTiming = CAMediaTimingFunction(controlPoints: 0.42, -0.30, 0.58, 1.30)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 6.450
			representativeAnimation.delegate = self
			self.layer.add(representativeAnimation, forKey: "LavarMao")
			self.animationCompletions[layer.animation(forKey: "LavarMao")!] = complete
		}

		let torneiraOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		torneiraOpacityAnimation.duration = 6.450
		torneiraOpacityAnimation.values = [1.000, 1.000, 0.000, 0.000] as [Float]
		torneiraOpacityAnimation.keyTimes = [0.000, 0.612, 0.709, 1.000] as [NSNumber]
		torneiraOpacityAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, linearTiming]
		torneiraOpacityAnimation.beginTime = beginTime
		torneiraOpacityAnimation.fillMode = fillMode
		torneiraOpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Torneira__root"]?.layer.add(torneiraOpacityAnimation, forKey:"lavarMao_Opacity")

		let soap2OpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		soap2OpacityAnimation.duration = 6.450
		soap2OpacityAnimation.values = [1.000, 1.000, 0.000, 0.000] as [Float]
		soap2OpacityAnimation.keyTimes = [0.000, 0.612, 0.709, 1.000] as [NSNumber]
		soap2OpacityAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, linearTiming]
		soap2OpacityAnimation.beginTime = beginTime
		soap2OpacityAnimation.fillMode = fillMode
		soap2OpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["soap 2__root"]?.layer.add(soap2OpacityAnimation, forKey:"lavarMao_Opacity")

		let soap2ScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		soap2ScaleXAnimation.duration = 6.450
		soap2ScaleXAnimation.values = [1.000, 1.050, 0.950, 1.050, 0.950, 1.000, 1.000] as [Float]
		soap2ScaleXAnimation.keyTimes = [0.000, 0.120, 0.244, 0.376, 0.500, 0.612, 1.000] as [NSNumber]
		soap2ScaleXAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, linearTiming]
		soap2ScaleXAnimation.beginTime = beginTime
		soap2ScaleXAnimation.fillMode = fillMode
		soap2ScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["soap 2__xScale"]?.layer.add(soap2ScaleXAnimation, forKey:"lavarMao_ScaleX")

		let soap2ScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		soap2ScaleYAnimation.duration = 6.450
		soap2ScaleYAnimation.values = [1.000, 1.050, 0.950, 1.050, 0.950, 1.000, 1.000] as [Float]
		soap2ScaleYAnimation.keyTimes = [0.000, 0.120, 0.244, 0.376, 0.500, 0.612, 1.000] as [NSNumber]
		soap2ScaleYAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, linearTiming]
		soap2ScaleYAnimation.beginTime = beginTime
		soap2ScaleYAnimation.fillMode = fillMode
		soap2ScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["soap 2__yScale"]?.layer.add(soap2ScaleYAnimation, forKey:"lavarMao_ScaleY")

		let soap2TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		soap2TranslationXAnimation.duration = 6.450
		soap2TranslationXAnimation.values = [0.000, -1.645, 1.519, 2.431, 3.386, 6.277, 6.277] as [Float]
		soap2TranslationXAnimation.keyTimes = [0.000, 0.120, 0.244, 0.357, 0.481, 0.612, 1.000] as [NSNumber]
		soap2TranslationXAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, linearTiming]
		soap2TranslationXAnimation.beginTime = beginTime
		soap2TranslationXAnimation.fillMode = fillMode
		soap2TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["soap 2__root"]?.layer.add(soap2TranslationXAnimation, forKey:"lavarMao_TranslationX")

		let soap2TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		soap2TranslationYAnimation.duration = 6.450
		soap2TranslationYAnimation.values = [0.000, 2.636, 2.247, 1.663, 1.977, 1.977] as [Float]
		soap2TranslationYAnimation.keyTimes = [0.000, 0.244, 0.357, 0.481, 0.612, 1.000] as [NSNumber]
		soap2TranslationYAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, linearTiming]
		soap2TranslationYAnimation.beginTime = beginTime
		soap2TranslationYAnimation.fillMode = fillMode
		soap2TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["soap 2__root"]?.layer.add(soap2TranslationYAnimation, forKey:"lavarMao_TranslationY")

		let mao2TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		mao2TranslationXAnimation.duration = 6.450
		mao2TranslationXAnimation.values = [0.000, 11.495, -3.230, 9.853, -1.542, 11.495, -3.230, 9.853, -1.542, 0.000, 0.000] as [Float]
		mao2TranslationXAnimation.keyTimes = [0.000, 0.057, 0.121, 0.175, 0.243, 0.310, 0.376, 0.430, 0.496, 0.612, 1.000] as [NSNumber]
		mao2TranslationXAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, linearTiming]
		mao2TranslationXAnimation.beginTime = beginTime
		mao2TranslationXAnimation.fillMode = fillMode
		mao2TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Mao2__root"]?.layer.add(mao2TranslationXAnimation, forKey:"lavarMao_TranslationX")

		let mao2TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		mao2TranslationYAnimation.duration = 6.450
		mao2TranslationYAnimation.values = [0.000, 2.939, 0.383, 5.498, 1.439, 2.939, 0.383, 5.498, 1.439, 0.000, 0.000] as [Float]
		mao2TranslationYAnimation.keyTimes = [0.000, 0.057, 0.121, 0.175, 0.243, 0.310, 0.376, 0.430, 0.496, 0.612, 1.000] as [NSNumber]
		mao2TranslationYAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, linearTiming]
		mao2TranslationYAnimation.beginTime = beginTime
		mao2TranslationYAnimation.fillMode = fillMode
		mao2TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Mao2__root"]?.layer.add(mao2TranslationYAnimation, forKey:"lavarMao_TranslationY")

		let soap3OpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		soap3OpacityAnimation.duration = 6.450
		soap3OpacityAnimation.values = [1.000, 1.000, 0.000, 0.000] as [Float]
		soap3OpacityAnimation.keyTimes = [0.000, 0.612, 0.709, 1.000] as [NSNumber]
		soap3OpacityAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, linearTiming]
		soap3OpacityAnimation.beginTime = beginTime
		soap3OpacityAnimation.fillMode = fillMode
		soap3OpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["soap 3__root"]?.layer.add(soap3OpacityAnimation, forKey:"lavarMao_Opacity")

		let soap3ScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		soap3ScaleXAnimation.duration = 6.450
		soap3ScaleXAnimation.values = [1.000, 1.050, 0.950, 1.050, 0.950, 1.000, 1.000] as [Float]
		soap3ScaleXAnimation.keyTimes = [0.000, 0.120, 0.244, 0.376, 0.500, 0.612, 1.000] as [NSNumber]
		soap3ScaleXAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, linearTiming]
		soap3ScaleXAnimation.beginTime = beginTime
		soap3ScaleXAnimation.fillMode = fillMode
		soap3ScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["soap 3__xScale"]?.layer.add(soap3ScaleXAnimation, forKey:"lavarMao_ScaleX")

		let soap3ScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		soap3ScaleYAnimation.duration = 6.450
		soap3ScaleYAnimation.values = [1.000, 1.050, 0.950, 1.050, 0.950, 1.000, 1.000] as [Float]
		soap3ScaleYAnimation.keyTimes = [0.000, 0.120, 0.244, 0.376, 0.500, 0.612, 1.000] as [NSNumber]
		soap3ScaleYAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, linearTiming]
		soap3ScaleYAnimation.beginTime = beginTime
		soap3ScaleYAnimation.fillMode = fillMode
		soap3ScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["soap 3__yScale"]?.layer.add(soap3ScaleYAnimation, forKey:"lavarMao_ScaleY")

		let soap3TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		soap3TranslationXAnimation.duration = 6.450
		soap3TranslationXAnimation.values = [0.000, -3.273, -7.256, -3.916, -1.958, -4.061, -4.061] as [Float]
		soap3TranslationXAnimation.keyTimes = [0.000, 0.093, 0.244, 0.364, 0.496, 0.612, 1.000] as [NSNumber]
		soap3TranslationXAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, linearTiming]
		soap3TranslationXAnimation.beginTime = beginTime
		soap3TranslationXAnimation.fillMode = fillMode
		soap3TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["soap 3__root"]?.layer.add(soap3TranslationXAnimation, forKey:"lavarMao_TranslationX")

		let soap3TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		soap3TranslationYAnimation.duration = 6.450
		soap3TranslationYAnimation.values = [0.000, 0.884, 1.403, -0.702, 3.541, 3.111, 3.111] as [Float]
		soap3TranslationYAnimation.keyTimes = [0.000, 0.093, 0.244, 0.364, 0.496, 0.612, 1.000] as [NSNumber]
		soap3TranslationYAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, linearTiming]
		soap3TranslationYAnimation.beginTime = beginTime
		soap3TranslationYAnimation.fillMode = fillMode
		soap3TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["soap 3__root"]?.layer.add(soap3TranslationYAnimation, forKey:"lavarMao_TranslationY")

		let soap6OpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		soap6OpacityAnimation.duration = 6.450
		soap6OpacityAnimation.values = [1.000, 1.000, 0.000, 0.000] as [Float]
		soap6OpacityAnimation.keyTimes = [0.000, 0.612, 0.709, 1.000] as [NSNumber]
		soap6OpacityAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, linearTiming]
		soap6OpacityAnimation.beginTime = beginTime
		soap6OpacityAnimation.fillMode = fillMode
		soap6OpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["soap 6__root"]?.layer.add(soap6OpacityAnimation, forKey:"lavarMao_Opacity")

		let soap6ScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		soap6ScaleXAnimation.duration = 6.450
		soap6ScaleXAnimation.values = [1.000, 1.050, 0.950, 1.050, 0.950, 1.000, 1.000] as [Float]
		soap6ScaleXAnimation.keyTimes = [0.000, 0.120, 0.244, 0.376, 0.500, 0.612, 1.000] as [NSNumber]
		soap6ScaleXAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, linearTiming]
		soap6ScaleXAnimation.beginTime = beginTime
		soap6ScaleXAnimation.fillMode = fillMode
		soap6ScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["soap 6__xScale"]?.layer.add(soap6ScaleXAnimation, forKey:"lavarMao_ScaleX")

		let soap6ScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		soap6ScaleYAnimation.duration = 6.450
		soap6ScaleYAnimation.values = [1.000, 1.050, 0.950, 1.050, 0.950, 1.000, 1.000] as [Float]
		soap6ScaleYAnimation.keyTimes = [0.000, 0.120, 0.244, 0.376, 0.500, 0.612, 1.000] as [NSNumber]
		soap6ScaleYAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, linearTiming]
		soap6ScaleYAnimation.beginTime = beginTime
		soap6ScaleYAnimation.fillMode = fillMode
		soap6ScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["soap 6__yScale"]?.layer.add(soap6ScaleYAnimation, forKey:"lavarMao_ScaleY")

		let soap6TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		soap6TranslationXAnimation.duration = 6.450
		soap6TranslationXAnimation.values = [0.000, 1.645, 0.587, 1.262, 3.614, 3.825, 3.466, 3.466] as [Float]
		soap6TranslationXAnimation.keyTimes = [0.000, 0.062, 0.151, 0.213, 0.357, 0.488, 0.612, 1.000] as [NSNumber]
		soap6TranslationXAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, linearTiming]
		soap6TranslationXAnimation.beginTime = beginTime
		soap6TranslationXAnimation.fillMode = fillMode
		soap6TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["soap 6__root"]?.layer.add(soap6TranslationXAnimation, forKey:"lavarMao_TranslationX")

		let soap6TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		soap6TranslationYAnimation.duration = 6.450
		soap6TranslationYAnimation.values = [0.000, 0.100, -1.152, -0.805, 0.119, 0.119] as [Float]
		soap6TranslationYAnimation.keyTimes = [0.000, 0.062, 0.213, 0.357, 0.488, 1.000] as [NSNumber]
		soap6TranslationYAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, linearTiming]
		soap6TranslationYAnimation.beginTime = beginTime
		soap6TranslationYAnimation.fillMode = fillMode
		soap6TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["soap 6__root"]?.layer.add(soap6TranslationYAnimation, forKey:"lavarMao_TranslationY")

		let sabaoAguaOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		sabaoAguaOpacityAnimation.duration = 6.450
		sabaoAguaOpacityAnimation.values = [1.000, 1.000, 0.000, 0.000] as [Float]
		sabaoAguaOpacityAnimation.keyTimes = [0.000, 0.612, 0.709, 1.000] as [NSNumber]
		sabaoAguaOpacityAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, linearTiming]
		sabaoAguaOpacityAnimation.beginTime = beginTime
		sabaoAguaOpacityAnimation.fillMode = fillMode
		sabaoAguaOpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["SabaoAgua__root"]?.layer.add(sabaoAguaOpacityAnimation, forKey:"lavarMao_Opacity")

		let sabaoAguaScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		sabaoAguaScaleXAnimation.duration = 6.450
		sabaoAguaScaleXAnimation.values = [1.000, 1.050, 0.950, 1.050, 0.950, 1.000, 1.000] as [Float]
		sabaoAguaScaleXAnimation.keyTimes = [0.000, 0.121, 0.243, 0.376, 0.500, 0.612, 1.000] as [NSNumber]
		sabaoAguaScaleXAnimation.timingFunctions = [anticOverTiming, anticOverTiming, anticOverTiming, anticOverTiming, easeInOutTiming, linearTiming]
		sabaoAguaScaleXAnimation.beginTime = beginTime
		sabaoAguaScaleXAnimation.fillMode = fillMode
		sabaoAguaScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["SabaoAgua__xScale"]?.layer.add(sabaoAguaScaleXAnimation, forKey:"lavarMao_ScaleX")

		let sabaoAguaScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		sabaoAguaScaleYAnimation.duration = 6.450
		sabaoAguaScaleYAnimation.values = [1.000, 1.050, 0.950, 1.050, 0.950, 1.000, 1.000] as [Float]
		sabaoAguaScaleYAnimation.keyTimes = [0.000, 0.121, 0.243, 0.376, 0.500, 0.612, 1.000] as [NSNumber]
		sabaoAguaScaleYAnimation.timingFunctions = [anticOverTiming, anticOverTiming, anticOverTiming, anticOverTiming, easeInOutTiming, linearTiming]
		sabaoAguaScaleYAnimation.beginTime = beginTime
		sabaoAguaScaleYAnimation.fillMode = fillMode
		sabaoAguaScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["SabaoAgua__yScale"]?.layer.add(sabaoAguaScaleYAnimation, forKey:"lavarMao_ScaleY")

		let luva1OpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		luva1OpacityAnimation.duration = 6.450
		luva1OpacityAnimation.values = [0.000, 0.000, 1.000] as [Float]
		luva1OpacityAnimation.keyTimes = [0.000, 0.833, 1.000] as [NSNumber]
		luva1OpacityAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming]
		luva1OpacityAnimation.beginTime = beginTime
		luva1OpacityAnimation.fillMode = fillMode
		luva1OpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Luva1__root"]?.layer.add(luva1OpacityAnimation, forKey:"lavarMao_Opacity")

		let mao1TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		mao1TranslationXAnimation.duration = 6.450
		mao1TranslationXAnimation.values = [0.000, -9.712, 6.581, -7.725, 4.902, -9.712, 6.581, -7.725, 4.902, 0.000, 0.000] as [Float]
		mao1TranslationXAnimation.keyTimes = [0.000, 0.057, 0.121, 0.175, 0.243, 0.310, 0.376, 0.430, 0.496, 0.612, 1.000] as [NSNumber]
		mao1TranslationXAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, linearTiming]
		mao1TranslationXAnimation.beginTime = beginTime
		mao1TranslationXAnimation.fillMode = fillMode
		mao1TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Mao1__root"]?.layer.add(mao1TranslationXAnimation, forKey:"lavarMao_TranslationX")

		let mao1TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		mao1TranslationYAnimation.duration = 6.450
		mao1TranslationYAnimation.values = [0.000, -3.166, 4.931, -1.112, 8.422, -3.166, 4.931, -1.112, 8.422, 0.000, 0.000] as [Float]
		mao1TranslationYAnimation.keyTimes = [0.000, 0.057, 0.121, 0.175, 0.243, 0.310, 0.376, 0.430, 0.496, 0.612, 1.000] as [NSNumber]
		mao1TranslationYAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, linearTiming]
		mao1TranslationYAnimation.beginTime = beginTime
		mao1TranslationYAnimation.fillMode = fillMode
		mao1TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Mao1__root"]?.layer.add(mao1TranslationYAnimation, forKey:"lavarMao_TranslationY")

		let soap5OpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		soap5OpacityAnimation.duration = 6.450
		soap5OpacityAnimation.values = [1.000, 1.000, 0.000, 0.000] as [Float]
		soap5OpacityAnimation.keyTimes = [0.000, 0.612, 0.709, 1.000] as [NSNumber]
		soap5OpacityAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, linearTiming]
		soap5OpacityAnimation.beginTime = beginTime
		soap5OpacityAnimation.fillMode = fillMode
		soap5OpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["soap 5__root"]?.layer.add(soap5OpacityAnimation, forKey:"lavarMao_Opacity")

		let soap5ScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		soap5ScaleXAnimation.duration = 6.450
		soap5ScaleXAnimation.values = [1.000, 1.050, 0.950, 1.050, 0.950, 1.000, 1.000] as [Float]
		soap5ScaleXAnimation.keyTimes = [0.000, 0.120, 0.244, 0.376, 0.500, 0.612, 1.000] as [NSNumber]
		soap5ScaleXAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, linearTiming]
		soap5ScaleXAnimation.beginTime = beginTime
		soap5ScaleXAnimation.fillMode = fillMode
		soap5ScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["soap 5__xScale"]?.layer.add(soap5ScaleXAnimation, forKey:"lavarMao_ScaleX")

		let soap5ScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		soap5ScaleYAnimation.duration = 6.450
		soap5ScaleYAnimation.values = [1.000, 1.050, 0.950, 1.050, 0.950, 1.000, 1.000] as [Float]
		soap5ScaleYAnimation.keyTimes = [0.000, 0.120, 0.244, 0.376, 0.500, 0.612, 1.000] as [NSNumber]
		soap5ScaleYAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, linearTiming]
		soap5ScaleYAnimation.beginTime = beginTime
		soap5ScaleYAnimation.fillMode = fillMode
		soap5ScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["soap 5__yScale"]?.layer.add(soap5ScaleYAnimation, forKey:"lavarMao_ScaleY")

		let soap5TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		soap5TranslationXAnimation.duration = 6.450
		soap5TranslationXAnimation.values = [0.000, 2.592, 2.187, 1.852, 2.853, 2.853] as [Float]
		soap5TranslationXAnimation.keyTimes = [0.000, 0.105, 0.229, 0.353, 0.612, 1.000] as [NSNumber]
		soap5TranslationXAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, linearTiming]
		soap5TranslationXAnimation.beginTime = beginTime
		soap5TranslationXAnimation.fillMode = fillMode
		soap5TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["soap 5__root"]?.layer.add(soap5TranslationXAnimation, forKey:"lavarMao_TranslationX")

		let soap5TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		soap5TranslationYAnimation.duration = 6.450
		soap5TranslationYAnimation.values = [0.000, -1.434, 0.233, -5.042, -4.081, -2.527, -2.527] as [Float]
		soap5TranslationYAnimation.keyTimes = [0.000, 0.105, 0.229, 0.353, 0.477, 0.612, 1.000] as [NSNumber]
		soap5TranslationYAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, linearTiming]
		soap5TranslationYAnimation.beginTime = beginTime
		soap5TranslationYAnimation.fillMode = fillMode
		soap5TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["soap 5__root"]?.layer.add(soap5TranslationYAnimation, forKey:"lavarMao_TranslationY")

		let soapOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		soapOpacityAnimation.duration = 6.450
		soapOpacityAnimation.values = [1.000, 1.000, 0.000, 0.000] as [Float]
		soapOpacityAnimation.keyTimes = [0.000, 0.612, 0.709, 1.000] as [NSNumber]
		soapOpacityAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, linearTiming]
		soapOpacityAnimation.beginTime = beginTime
		soapOpacityAnimation.fillMode = fillMode
		soapOpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["soap__root"]?.layer.add(soapOpacityAnimation, forKey:"lavarMao_Opacity")

		let soapScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		soapScaleXAnimation.duration = 6.450
		soapScaleXAnimation.values = [1.000, 1.050, 0.950, 1.050, 0.950, 1.000, 1.000] as [Float]
		soapScaleXAnimation.keyTimes = [0.000, 0.120, 0.244, 0.376, 0.500, 0.612, 1.000] as [NSNumber]
		soapScaleXAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, linearTiming]
		soapScaleXAnimation.beginTime = beginTime
		soapScaleXAnimation.fillMode = fillMode
		soapScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["soap__xScale"]?.layer.add(soapScaleXAnimation, forKey:"lavarMao_ScaleX")

		let soapScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		soapScaleYAnimation.duration = 6.450
		soapScaleYAnimation.values = [1.000, 1.050, 0.950, 1.050, 0.950, 1.000, 1.000] as [Float]
		soapScaleYAnimation.keyTimes = [0.000, 0.120, 0.244, 0.376, 0.500, 0.612, 1.000] as [NSNumber]
		soapScaleYAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, linearTiming]
		soapScaleYAnimation.beginTime = beginTime
		soapScaleYAnimation.fillMode = fillMode
		soapScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["soap__yScale"]?.layer.add(soapScaleYAnimation, forKey:"lavarMao_ScaleY")

		let soapTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		soapTranslationXAnimation.duration = 6.450
		soapTranslationXAnimation.values = [0.000, -4.766, -0.475, -5.667, -1.400, -0.986, -0.986] as [Float]
		soapTranslationXAnimation.keyTimes = [0.000, 0.101, 0.236, 0.376, 0.496, 0.612, 1.000] as [NSNumber]
		soapTranslationXAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, linearTiming]
		soapTranslationXAnimation.beginTime = beginTime
		soapTranslationXAnimation.fillMode = fillMode
		soapTranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["soap__root"]?.layer.add(soapTranslationXAnimation, forKey:"lavarMao_TranslationX")

		let soapTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		soapTranslationYAnimation.duration = 6.450
		soapTranslationYAnimation.values = [0.000, 0.900, 2.066, -1.936, -1.353, -0.061, -0.061] as [Float]
		soapTranslationYAnimation.keyTimes = [0.000, 0.101, 0.236, 0.376, 0.496, 0.612, 1.000] as [NSNumber]
		soapTranslationYAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, linearTiming]
		soapTranslationYAnimation.beginTime = beginTime
		soapTranslationYAnimation.fillMode = fillMode
		soapTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["soap__root"]?.layer.add(soapTranslationYAnimation, forKey:"lavarMao_TranslationY")

		let luva2OpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		luva2OpacityAnimation.duration = 6.450
		luva2OpacityAnimation.values = [0.000, 0.000, 1.000] as [Float]
		luva2OpacityAnimation.keyTimes = [0.000, 0.833, 1.000] as [NSNumber]
		luva2OpacityAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming]
		luva2OpacityAnimation.beginTime = beginTime
		luva2OpacityAnimation.fillMode = fillMode
		luva2OpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Luva2__root"]?.layer.add(luva2OpacityAnimation, forKey:"lavarMao_Opacity")

		let soap4OpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		soap4OpacityAnimation.duration = 6.450
		soap4OpacityAnimation.values = [1.000, 1.000, 0.000, 0.000] as [Float]
		soap4OpacityAnimation.keyTimes = [0.000, 0.612, 0.709, 1.000] as [NSNumber]
		soap4OpacityAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, linearTiming]
		soap4OpacityAnimation.beginTime = beginTime
		soap4OpacityAnimation.fillMode = fillMode
		soap4OpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["soap 4__root"]?.layer.add(soap4OpacityAnimation, forKey:"lavarMao_Opacity")

		let soap4ScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		soap4ScaleXAnimation.duration = 6.450
		soap4ScaleXAnimation.values = [1.000, 1.050, 0.950, 1.050, 0.950, 1.000, 1.000] as [Float]
		soap4ScaleXAnimation.keyTimes = [0.000, 0.120, 0.244, 0.376, 0.500, 0.612, 1.000] as [NSNumber]
		soap4ScaleXAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, linearTiming]
		soap4ScaleXAnimation.beginTime = beginTime
		soap4ScaleXAnimation.fillMode = fillMode
		soap4ScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["soap 4__xScale"]?.layer.add(soap4ScaleXAnimation, forKey:"lavarMao_ScaleX")

		let soap4ScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		soap4ScaleYAnimation.duration = 6.450
		soap4ScaleYAnimation.values = [1.000, 1.050, 0.950, 1.050, 0.950, 1.000, 1.000] as [Float]
		soap4ScaleYAnimation.keyTimes = [0.000, 0.120, 0.244, 0.376, 0.500, 0.612, 1.000] as [NSNumber]
		soap4ScaleYAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, linearTiming]
		soap4ScaleYAnimation.beginTime = beginTime
		soap4ScaleYAnimation.fillMode = fillMode
		soap4ScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["soap 4__yScale"]?.layer.add(soap4ScaleYAnimation, forKey:"lavarMao_ScaleY")

		let soap4TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		soap4TranslationXAnimation.duration = 6.450
		soap4TranslationXAnimation.values = [0.000, 2.334, -1.681, 0.367, -1.169, -1.169] as [Float]
		soap4TranslationXAnimation.keyTimes = [0.000, 0.163, 0.306, 0.426, 0.612, 1.000] as [NSNumber]
		soap4TranslationXAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, linearTiming]
		soap4TranslationXAnimation.beginTime = beginTime
		soap4TranslationXAnimation.fillMode = fillMode
		soap4TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["soap 4__root"]?.layer.add(soap4TranslationXAnimation, forKey:"lavarMao_TranslationX")

		let soap4TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		soap4TranslationYAnimation.duration = 6.450
		soap4TranslationYAnimation.values = [0.000, -1.697, 1.036, 2.130, 2.330, 2.330] as [Float]
		soap4TranslationYAnimation.keyTimes = [0.000, 0.163, 0.306, 0.426, 0.612, 1.000] as [NSNumber]
		soap4TranslationYAnimation.timingFunctions = [easeInOutTiming, easeInOutTiming, easeInOutTiming, easeInOutTiming, linearTiming]
		soap4TranslationYAnimation.beginTime = beginTime
		soap4TranslationYAnimation.fillMode = fillMode
		soap4TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["soap 4__root"]?.layer.add(soap4TranslationYAnimation, forKey:"lavarMao_TranslationY")
	}

	func removeLavarMaoAnimation() {
		self.layer.removeAnimation(forKey: "LavarMao")
		self.viewsByName["Torneira__root"]?.layer.removeAnimation(forKey: "lavarMao_Opacity")
		self.viewsByName["soap 2__root"]?.layer.removeAnimation(forKey: "lavarMao_Opacity")
		self.viewsByName["soap 2__xScale"]?.layer.removeAnimation(forKey: "lavarMao_ScaleX")
		self.viewsByName["soap 2__yScale"]?.layer.removeAnimation(forKey: "lavarMao_ScaleY")
		self.viewsByName["soap 2__root"]?.layer.removeAnimation(forKey: "lavarMao_TranslationX")
		self.viewsByName["soap 2__root"]?.layer.removeAnimation(forKey: "lavarMao_TranslationY")
		self.viewsByName["Mao2__root"]?.layer.removeAnimation(forKey: "lavarMao_TranslationX")
		self.viewsByName["Mao2__root"]?.layer.removeAnimation(forKey: "lavarMao_TranslationY")
		self.viewsByName["soap 3__root"]?.layer.removeAnimation(forKey: "lavarMao_Opacity")
		self.viewsByName["soap 3__xScale"]?.layer.removeAnimation(forKey: "lavarMao_ScaleX")
		self.viewsByName["soap 3__yScale"]?.layer.removeAnimation(forKey: "lavarMao_ScaleY")
		self.viewsByName["soap 3__root"]?.layer.removeAnimation(forKey: "lavarMao_TranslationX")
		self.viewsByName["soap 3__root"]?.layer.removeAnimation(forKey: "lavarMao_TranslationY")
		self.viewsByName["soap 6__root"]?.layer.removeAnimation(forKey: "lavarMao_Opacity")
		self.viewsByName["soap 6__xScale"]?.layer.removeAnimation(forKey: "lavarMao_ScaleX")
		self.viewsByName["soap 6__yScale"]?.layer.removeAnimation(forKey: "lavarMao_ScaleY")
		self.viewsByName["soap 6__root"]?.layer.removeAnimation(forKey: "lavarMao_TranslationX")
		self.viewsByName["soap 6__root"]?.layer.removeAnimation(forKey: "lavarMao_TranslationY")
		self.viewsByName["SabaoAgua__root"]?.layer.removeAnimation(forKey: "lavarMao_Opacity")
		self.viewsByName["SabaoAgua__xScale"]?.layer.removeAnimation(forKey: "lavarMao_ScaleX")
		self.viewsByName["SabaoAgua__yScale"]?.layer.removeAnimation(forKey: "lavarMao_ScaleY")
		self.viewsByName["Luva1__root"]?.layer.removeAnimation(forKey: "lavarMao_Opacity")
		self.viewsByName["Mao1__root"]?.layer.removeAnimation(forKey: "lavarMao_TranslationX")
		self.viewsByName["Mao1__root"]?.layer.removeAnimation(forKey: "lavarMao_TranslationY")
		self.viewsByName["soap 5__root"]?.layer.removeAnimation(forKey: "lavarMao_Opacity")
		self.viewsByName["soap 5__xScale"]?.layer.removeAnimation(forKey: "lavarMao_ScaleX")
		self.viewsByName["soap 5__yScale"]?.layer.removeAnimation(forKey: "lavarMao_ScaleY")
		self.viewsByName["soap 5__root"]?.layer.removeAnimation(forKey: "lavarMao_TranslationX")
		self.viewsByName["soap 5__root"]?.layer.removeAnimation(forKey: "lavarMao_TranslationY")
		self.viewsByName["soap__root"]?.layer.removeAnimation(forKey: "lavarMao_Opacity")
		self.viewsByName["soap__xScale"]?.layer.removeAnimation(forKey: "lavarMao_ScaleX")
		self.viewsByName["soap__yScale"]?.layer.removeAnimation(forKey: "lavarMao_ScaleY")
		self.viewsByName["soap__root"]?.layer.removeAnimation(forKey: "lavarMao_TranslationX")
		self.viewsByName["soap__root"]?.layer.removeAnimation(forKey: "lavarMao_TranslationY")
		self.viewsByName["Luva2__root"]?.layer.removeAnimation(forKey: "lavarMao_Opacity")
		self.viewsByName["soap 4__root"]?.layer.removeAnimation(forKey: "lavarMao_Opacity")
		self.viewsByName["soap 4__xScale"]?.layer.removeAnimation(forKey: "lavarMao_ScaleX")
		self.viewsByName["soap 4__yScale"]?.layer.removeAnimation(forKey: "lavarMao_ScaleY")
		self.viewsByName["soap 4__root"]?.layer.removeAnimation(forKey: "lavarMao_TranslationX")
		self.viewsByName["soap 4__root"]?.layer.removeAnimation(forKey: "lavarMao_TranslationY")
	}

	// MARK: CAAnimationDelegate
	func animationDidStop(_ anim: CAAnimation, finished flag: Bool) {
		if let completion = self.animationCompletions[anim] {
			self.animationCompletions.removeValue(forKey: anim)
			completion(flag)
		}
	}

//	override func removeAllAnimations() {
//		for subview in viewsByName.values {
//			subview.layer.removeAllAnimations()
//		}
//		self.layer.removeAnimation(forKey: "LavarMao")
//	}
}
