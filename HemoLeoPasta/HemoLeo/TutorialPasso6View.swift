//
// TutorialPasso6View.swift
// Generated by Core Animator version 1.3.2 on 17/11/16.
//
// DO NOT MODIFY THIS FILE. IT IS AUTO-GENERATED AND WILL BE OVERWRITTEN
//

import UIKit

private class TutorialPasso6PassthroughView: UIView {
    override func point(inside point: CGPoint, with event: UIEvent?) -> Bool {
        for subview in subviews as [UIView] {
            if subview.point(inside: convert(point, to: subview), with: event) { return true }
        }
        return false
    }
}

@IBDesignable
class TutorialPasso6View : UIView, CAAnimationDelegate {


	var animationCompletions = Dictionary<CAAnimation, (Bool) -> Void>()
	var viewsByName: [String : UIView]!

	// - MARK: Life Cycle

	convenience init() {
		self.init(frame: CGRect(x: 0, y: 0, width: 414, height: 454))
	}

	override init(frame: CGRect) {
		super.init(frame: frame)
		self.setupHierarchy()
	}

	required init?(coder aDecoder: NSCoder) {
		super.init(coder: aDecoder)
		self.setupHierarchy()
	}

	// - MARK: Scaling

	override func layoutSubviews() {
		super.layoutSubviews()

		if let scalingView = self.viewsByName["__scaling__"] {
			var xScale = self.bounds.size.width / scalingView.bounds.size.width
			var yScale = self.bounds.size.height / scalingView.bounds.size.height
			switch contentMode {
			case .scaleToFill:
				break
			case .scaleAspectFill:
				let scale = max(xScale, yScale)
				xScale = scale
				yScale = scale
			default:
				let scale = min(xScale, yScale)
				xScale = scale
				yScale = scale
			}
			scalingView.transform = CGAffineTransform(scaleX: xScale, y: yScale)
			scalingView.center = CGPoint(x:self.bounds.midX, y:self.bounds.midY)
		}
	}

	// - MARK: Setup

	func setupHierarchy() {
		var viewsByName: [String : UIView] = [:]
		let bundle = Bundle(for:type(of: self))
		let __scaling__ = UIView()
		__scaling__.bounds = CGRect(x:0, y:0, width:414, height:454)
		__scaling__.center = CGPoint(x:207.0, y:227.0)
		self.addSubview(__scaling__)
		viewsByName["__scaling__"] = __scaling__

		let capa__root = TutorialPasso6PassthroughView()
		let capa__xScale = TutorialPasso6PassthroughView()
		let capa__yScale = TutorialPasso6PassthroughView()
		let capa = UIImageView()
		let imgCapa = UIImage(named:"Capa.png", in: bundle, compatibleWith: nil)
		if imgCapa == nil {
			print("** Warning: Could not create image from 'Capa.png'")
		}
		capa.image = imgCapa
		capa.contentMode = .center
		capa.bounds = CGRect(x:0, y:0, width:362.0, height:404.0)
		capa__root.layer.position = CGPoint(x:223.702, y:248.222)
		capa__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		capa__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		capa__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(capa__root)
		capa__root.addSubview(capa__xScale)
		capa__xScale.addSubview(capa__yScale)
		capa__yScale.addSubview(capa)
		__scaling__.addSubview(capa__root)
		viewsByName["Capa__root"] = capa__root
		viewsByName["Capa__xScale"] = capa__xScale
		viewsByName["Capa__yScale"] = capa__yScale
		viewsByName["Capa"] = capa

		let embolo__root = TutorialPasso6PassthroughView()
		let embolo__xScale = TutorialPasso6PassthroughView()
		let embolo__yScale = TutorialPasso6PassthroughView()
		let embolo = UIImageView()
		let imgEmbolo = UIImage(named:"Embolo.png", in: bundle, compatibleWith: nil)
		if imgEmbolo == nil {
			print("** Warning: Could not create image from 'Embolo.png'")
		}
		embolo.image = imgEmbolo
		embolo.contentMode = .center
		embolo.bounds = CGRect(x:0, y:0, width:362.0, height:404.0)
		embolo__root.layer.position = CGPoint(x:223.319, y:248.599)
		embolo__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		embolo__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		embolo__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(embolo__root)
		embolo__root.addSubview(embolo__xScale)
		embolo__xScale.addSubview(embolo__yScale)
		embolo__yScale.addSubview(embolo)
		__scaling__.addSubview(embolo__root)
		viewsByName["Embolo__root"] = embolo__root
		viewsByName["Embolo__xScale"] = embolo__xScale
		viewsByName["Embolo__yScale"] = embolo__yScale
		viewsByName["Embolo"] = embolo

		let liquido__root = TutorialPasso6PassthroughView()
		let liquido__xScale = TutorialPasso6PassthroughView()
		let liquido__yScale = TutorialPasso6PassthroughView()
		let liquido = UIImageView()
		let imgLiquido = UIImage(named:"Liquido.png", in: bundle, compatibleWith: nil)
		if imgLiquido == nil {
			print("** Warning: Could not create image from 'Liquido.png'")
		}
		liquido.image = imgLiquido
		liquido.contentMode = .center
		liquido.bounds = CGRect(x:0, y:0, width:362.0, height:404.0)
		liquido__root.layer.position = CGPoint(x:223.513, y:248.838)
		liquido__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		liquido__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		liquido__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(liquido__root)
		liquido__root.addSubview(liquido__xScale)
		liquido__xScale.addSubview(liquido__yScale)
		liquido__yScale.addSubview(liquido)
		__scaling__.addSubview(liquido__root)
		viewsByName["Liquido__root"] = liquido__root
		viewsByName["Liquido__xScale"] = liquido__xScale
		viewsByName["Liquido__yScale"] = liquido__yScale
		viewsByName["Liquido"] = liquido

		let liquidoMask__root = TutorialPasso6PassthroughView()
		let liquidoMask__xScale = TutorialPasso6PassthroughView()
		let liquidoMask__yScale = TutorialPasso6PassthroughView()
		let liquidoMask = UIImageView()
		let imgSquare = UIImage(named:"square.png", in: bundle, compatibleWith: nil)
		if imgSquare == nil {
			print("** Warning: Could not create image from 'square.png'")
		}
		liquidoMask.image = imgSquare
		liquidoMask.contentMode = .center
		liquidoMask.bounds = CGRect(x:0, y:0, width:185.0, height:184.0)
		liquidoMask__root.layer.position = CGPoint(x:229.023, y:224.936)
		liquidoMask__xScale.transform = CGAffineTransform(scaleX: 0.42, y: 1.00)
		liquidoMask__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.41)
		liquidoMask__root.transform = CGAffineTransform(rotationAngle: 0.707)
		liquido.addSubview(liquidoMask__root)
		liquidoMask__root.addSubview(liquidoMask__xScale)
		liquidoMask__xScale.addSubview(liquidoMask__yScale)
		liquidoMask__yScale.addSubview(liquidoMask)
		liquido.mask = liquidoMask__root
		viewsByName["Liquido_mask__root"] = liquidoMask__root
		viewsByName["Liquido_mask__xScale"] = liquidoMask__xScale
		viewsByName["Liquido_mask__yScale"] = liquidoMask__yScale
		viewsByName["Liquido_mask"] = liquidoMask

		let braço6__root = TutorialPasso6PassthroughView()
		let braço6__xScale = TutorialPasso6PassthroughView()
		let braço6__yScale = TutorialPasso6PassthroughView()
		let braço6 = UIImageView()
		let imgBraço6 = UIImage(named:"Braço 6.png", in: bundle, compatibleWith: nil)
		if imgBraço6 == nil {
			print("** Warning: Could not create image from 'Braço 6.png'")
		}
		braço6.image = imgBraço6
		braço6.contentMode = .center
		braço6.bounds = CGRect(x:0, y:0, width:362.0, height:404.0)
		braço6__root.layer.position = CGPoint(x:219.821, y:225.580)
		braço6__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		braço6__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		braço6__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(braço6__root)
		braço6__root.addSubview(braço6__xScale)
		braço6__xScale.addSubview(braço6__yScale)
		braço6__yScale.addSubview(braço6)
		__scaling__.addSubview(braço6__root)
		viewsByName["Braço 6__root"] = braço6__root
		viewsByName["Braço 6__xScale"] = braço6__xScale
		viewsByName["Braço 6__yScale"] = braço6__yScale
		viewsByName["Braço 6"] = braço6

		let linha1__root = TutorialPasso6PassthroughView()
		let linha1__xScale = TutorialPasso6PassthroughView()
		let linha1__yScale = TutorialPasso6PassthroughView()
		let linha1 = UIImageView()
		let imgLinha1 = UIImage(named:"Linha 1.png", in: bundle, compatibleWith: nil)
		if imgLinha1 == nil {
			print("** Warning: Could not create image from 'Linha 1.png'")
		}
		linha1.image = imgLinha1
		linha1.contentMode = .center
		linha1.bounds = CGRect(x:0, y:0, width:362.0, height:404.0)
		linha1__root.layer.position = CGPoint(x:224.223, y:248.933)
		linha1__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		linha1__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		linha1__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(linha1__root)
		linha1__root.addSubview(linha1__xScale)
		linha1__xScale.addSubview(linha1__yScale)
		linha1__yScale.addSubview(linha1)
		__scaling__.addSubview(linha1__root)
		viewsByName["Linha 1__root"] = linha1__root
		viewsByName["Linha 1__xScale"] = linha1__xScale
		viewsByName["Linha 1__yScale"] = linha1__yScale
		viewsByName["Linha 1"] = linha1

		let linha2__root = TutorialPasso6PassthroughView()
		let linha2__xScale = TutorialPasso6PassthroughView()
		let linha2__yScale = TutorialPasso6PassthroughView()
		let linha2 = UIImageView()
		let imgLinha2 = UIImage(named:"Linha 2.png", in: bundle, compatibleWith: nil)
		if imgLinha2 == nil {
			print("** Warning: Could not create image from 'Linha 2.png'")
		}
		linha2.image = imgLinha2
		linha2.contentMode = .center
		linha2.bounds = CGRect(x:0, y:0, width:362.0, height:404.0)
		linha2__root.layer.position = CGPoint(x:223.565, y:248.199)
		linha2__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		linha2__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		linha2__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(linha2__root)
		linha2__root.addSubview(linha2__xScale)
		linha2__xScale.addSubview(linha2__yScale)
		linha2__yScale.addSubview(linha2)
		__scaling__.addSubview(linha2__root)
		viewsByName["Linha 2__root"] = linha2__root
		viewsByName["Linha 2__xScale"] = linha2__xScale
		viewsByName["Linha 2__yScale"] = linha2__yScale
		viewsByName["Linha 2"] = linha2

		let medida__root = TutorialPasso6PassthroughView()
		let medida__xScale = TutorialPasso6PassthroughView()
		let medida__yScale = TutorialPasso6PassthroughView()
		let medida = UIImageView()
		let imgMedida = UIImage(named:"Medida.png", in: bundle, compatibleWith: nil)
		if imgMedida == nil {
			print("** Warning: Could not create image from 'Medida.png'")
		}
		medida.image = imgMedida
		medida.contentMode = .center
		medida.bounds = CGRect(x:0, y:0, width:362.0, height:404.0)
		medida__root.layer.position = CGPoint(x:224.156, y:247.969)
		medida__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		medida__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		medida__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(medida__root)
		medida__root.addSubview(medida__xScale)
		medida__xScale.addSubview(medida__yScale)
		medida__yScale.addSubview(medida)
		__scaling__.addSubview(medida__root)
		viewsByName["Medida__root"] = medida__root
		viewsByName["Medida__xScale"] = medida__xScale
		viewsByName["Medida__yScale"] = medida__yScale
		viewsByName["Medida"] = medida

		let borbDobrada__root = TutorialPasso6PassthroughView()
		let borbDobrada__xScale = TutorialPasso6PassthroughView()
		let borbDobrada__yScale = TutorialPasso6PassthroughView()
		let borbDobrada = UIImageView()
		let imgBorbDobrada = UIImage(named:"Borb dobrada.png", in: bundle, compatibleWith: nil)
		if imgBorbDobrada == nil {
			print("** Warning: Could not create image from 'Borb dobrada.png'")
		}
		borbDobrada.image = imgBorbDobrada
		borbDobrada.contentMode = .center
		borbDobrada.bounds = CGRect(x:0, y:0, width:362.0, height:404.0)
		borbDobrada__root.layer.position = CGPoint(x:223.000, y:247.000)
		borbDobrada__root.alpha = 0.00
		borbDobrada__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		borbDobrada__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		borbDobrada__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(borbDobrada__root)
		borbDobrada__root.addSubview(borbDobrada__xScale)
		borbDobrada__xScale.addSubview(borbDobrada__yScale)
		borbDobrada__yScale.addSubview(borbDobrada)
		__scaling__.addSubview(borbDobrada__root)
		viewsByName["Borb dobrada__root"] = borbDobrada__root
		viewsByName["Borb dobrada__xScale"] = borbDobrada__xScale
		viewsByName["Borb dobrada__yScale"] = borbDobrada__yScale
		viewsByName["Borb dobrada"] = borbDobrada

		let borbSemSangue__root = TutorialPasso6PassthroughView()
		let borbSemSangue__xScale = TutorialPasso6PassthroughView()
		let borbSemSangue__yScale = TutorialPasso6PassthroughView()
		let borbSemSangue = UIImageView()
		let imgBorbSemSangue = UIImage(named:"Borb sem sangue.png", in: bundle, compatibleWith: nil)
		if imgBorbSemSangue == nil {
			print("** Warning: Could not create image from 'Borb sem sangue.png'")
		}
		borbSemSangue.image = imgBorbSemSangue
		borbSemSangue.contentMode = .center
		borbSemSangue.bounds = CGRect(x:0, y:0, width:362.0, height:404.0)
		borbSemSangue__root.layer.position = CGPoint(x:223.270, y:247.750)
		borbSemSangue__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		borbSemSangue__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		borbSemSangue__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(borbSemSangue__root)
		borbSemSangue__root.addSubview(borbSemSangue__xScale)
		borbSemSangue__xScale.addSubview(borbSemSangue__yScale)
		borbSemSangue__yScale.addSubview(borbSemSangue)
		__scaling__.addSubview(borbSemSangue__root)
		viewsByName["Borb sem sangue__root"] = borbSemSangue__root
		viewsByName["Borb sem sangue__xScale"] = borbSemSangue__xScale
		viewsByName["Borb sem sangue__yScale"] = borbSemSangue__yScale
		viewsByName["Borb sem sangue"] = borbSemSangue

		let mãoPegar__root = TutorialPasso6PassthroughView()
		let mãoPegar__xScale = TutorialPasso6PassthroughView()
		let mãoPegar__yScale = TutorialPasso6PassthroughView()
		let mãoPegar = UIImageView()
		let imgMãoPegar = UIImage(named:"Mão pegar.png", in: bundle, compatibleWith: nil)
		if imgMãoPegar == nil {
			print("** Warning: Could not create image from 'Mão pegar.png'")
		}
		mãoPegar.image = imgMãoPegar
		mãoPegar.contentMode = .center
		mãoPegar.bounds = CGRect(x:0, y:0, width:362.0, height:404.0)
		mãoPegar__root.layer.position = CGPoint(x:417.615, y:248.940)
		mãoPegar__root.alpha = 0.00
		mãoPegar__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		mãoPegar__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		mãoPegar__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(mãoPegar__root)
		mãoPegar__root.addSubview(mãoPegar__xScale)
		mãoPegar__xScale.addSubview(mãoPegar__yScale)
		mãoPegar__yScale.addSubview(mãoPegar)
		__scaling__.addSubview(mãoPegar__root)
		viewsByName["Mão pegar__root"] = mãoPegar__root
		viewsByName["Mão pegar__xScale"] = mãoPegar__xScale
		viewsByName["Mão pegar__yScale"] = mãoPegar__yScale
		viewsByName["Mão pegar"] = mãoPegar

		let garrote__root = TutorialPasso6PassthroughView()
		let garrote__xScale = TutorialPasso6PassthroughView()
		let garrote__yScale = TutorialPasso6PassthroughView()
		let garrote = UIImageView()
		let imgGarrote = UIImage(named:"Garrote.png", in: bundle, compatibleWith: nil)
		if imgGarrote == nil {
			print("** Warning: Could not create image from 'Garrote.png'")
		}
		garrote.image = imgGarrote
		garrote.contentMode = .center
		garrote.bounds = CGRect(x:0, y:0, width:362.0, height:404.0)
		garrote__root.layer.position = CGPoint(x:212.272, y:257.676)
		garrote__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		garrote__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		garrote__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(garrote__root)
		garrote__root.addSubview(garrote__xScale)
		garrote__xScale.addSubview(garrote__yScale)
		garrote__yScale.addSubview(garrote)
		__scaling__.addSubview(garrote__root)
		viewsByName["Garrote__root"] = garrote__root
		viewsByName["Garrote__xScale"] = garrote__xScale
		viewsByName["Garrote__yScale"] = garrote__yScale
		viewsByName["Garrote"] = garrote

		let pele__root = TutorialPasso6PassthroughView()
		let pele__xScale = TutorialPasso6PassthroughView()
		let pele__yScale = TutorialPasso6PassthroughView()
		let pele = UIImageView()
		let imgPele = UIImage(named:"Pele.png", in: bundle, compatibleWith: nil)
		if imgPele == nil {
			print("** Warning: Could not create image from 'Pele.png'")
		}
		pele.image = imgPele
		pele.contentMode = .center
		pele.bounds = CGRect(x:0, y:0, width:362.0, height:404.0)
		pele__root.layer.position = CGPoint(x:222.672, y:248.000)
		pele__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		pele__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		pele__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(pele__root)
		pele__root.addSubview(pele__xScale)
		pele__xScale.addSubview(pele__yScale)
		pele__yScale.addSubview(pele)
		__scaling__.addSubview(pele__root)
		viewsByName["Pele__root"] = pele__root
		viewsByName["Pele__xScale"] = pele__xScale
		viewsByName["Pele__yScale"] = pele__yScale
		viewsByName["Pele"] = pele

		let sangue__root = TutorialPasso6PassthroughView()
		let sangue__xScale = TutorialPasso6PassthroughView()
		let sangue__yScale = TutorialPasso6PassthroughView()
		let sangue = UIImageView()
		let imgSangue = UIImage(named:"Sangue.png", in: bundle, compatibleWith: nil)
		if imgSangue == nil {
			print("** Warning: Could not create image from 'Sangue.png'")
		}
		sangue.image = imgSangue
		sangue.contentMode = .center
		sangue.bounds = CGRect(x:0, y:0, width:362.0, height:404.0)
		sangue__root.layer.position = CGPoint(x:222.946, y:246.938)
		sangue__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		sangue__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		sangue__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(sangue__root)
		sangue__root.addSubview(sangue__xScale)
		sangue__xScale.addSubview(sangue__yScale)
		sangue__yScale.addSubview(sangue)
		__scaling__.addSubview(sangue__root)
		viewsByName["Sangue__root"] = sangue__root
		viewsByName["Sangue__xScale"] = sangue__xScale
		viewsByName["Sangue__yScale"] = sangue__yScale
		viewsByName["Sangue"] = sangue

		let sangueMask__root = TutorialPasso6PassthroughView()
		let sangueMask__xScale = TutorialPasso6PassthroughView()
		let sangueMask__yScale = TutorialPasso6PassthroughView()
		let sangueMask = UIImageView()
		let imgGradient1 = UIImage(named:"gradient1.png", in: bundle, compatibleWith: nil)
		if imgGradient1 == nil {
			print("** Warning: Could not create image from 'gradient1.png'")
		}
		sangueMask.image = imgGradient1
		sangueMask.contentMode = .center
		sangueMask.bounds = CGRect(x:0, y:0, width:185.0, height:111.0)
		sangueMask__root.layer.position = CGPoint(x:43.301, y:170.403)
		sangueMask__xScale.transform = CGAffineTransform(scaleX: 0.12, y: 1.00)
		sangueMask__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.24)
		sangueMask__root.transform = CGAffineTransform(rotationAngle: 5.874)
		sangue.addSubview(sangueMask__root)
		sangueMask__root.addSubview(sangueMask__xScale)
		sangueMask__xScale.addSubview(sangueMask__yScale)
		sangueMask__yScale.addSubview(sangueMask)
		sangue.mask = sangueMask__root
		viewsByName["Sangue_mask__root"] = sangueMask__root
		viewsByName["Sangue_mask__xScale"] = sangueMask__xScale
		viewsByName["Sangue_mask__yScale"] = sangueMask__yScale
		viewsByName["Sangue_mask"] = sangueMask

		let bandAid__root = TutorialPasso6PassthroughView()
		let bandAid__xScale = TutorialPasso6PassthroughView()
		let bandAid__yScale = TutorialPasso6PassthroughView()
		let bandAid = UIImageView()
		let imgBandAid = UIImage(named:"Band-aid.png", in: bundle, compatibleWith: nil)
		if imgBandAid == nil {
			print("** Warning: Could not create image from 'Band-aid.png'")
		}
		bandAid.image = imgBandAid
		bandAid.contentMode = .center
		bandAid.bounds = CGRect(x:0, y:0, width:362.0, height:404.0)
		bandAid__root.layer.position = CGPoint(x:223.000, y:252.000)
		bandAid__root.alpha = 0.00
		bandAid__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		bandAid__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		bandAid__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(bandAid__root)
		bandAid__root.addSubview(bandAid__xScale)
		bandAid__xScale.addSubview(bandAid__yScale)
		bandAid__yScale.addSubview(bandAid)
		__scaling__.addSubview(bandAid__root)
		viewsByName["Band-aid__root"] = bandAid__root
		viewsByName["Band-aid__xScale"] = bandAid__xScale
		viewsByName["Band-aid__yScale"] = bandAid__yScale
		viewsByName["Band-aid"] = bandAid

		let mãoDedo__root = TutorialPasso6PassthroughView()
		let mãoDedo__xScale = TutorialPasso6PassthroughView()
		let mãoDedo__yScale = TutorialPasso6PassthroughView()
		let mãoDedo = UIImageView()
		let imgMãoDedo = UIImage(named:"Mão dedo.png", in: bundle, compatibleWith: nil)
		if imgMãoDedo == nil {
			print("** Warning: Could not create image from 'Mão dedo.png'")
		}
		mãoDedo.image = imgMãoDedo
		mãoDedo.contentMode = .center
		mãoDedo.bounds = CGRect(x:0, y:0, width:362.0, height:404.0)
		mãoDedo__root.layer.position = CGPoint(x:417.775, y:249.081)
		mãoDedo__root.alpha = 0.00
		mãoDedo__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		mãoDedo__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		mãoDedo__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(mãoDedo__root)
		mãoDedo__root.addSubview(mãoDedo__xScale)
		mãoDedo__xScale.addSubview(mãoDedo__yScale)
		mãoDedo__yScale.addSubview(mãoDedo)
		__scaling__.addSubview(mãoDedo__root)
		viewsByName["Mão dedo__root"] = mãoDedo__root
		viewsByName["Mão dedo__xScale"] = mãoDedo__xScale
		viewsByName["Mão dedo__yScale"] = mãoDedo__yScale
		viewsByName["Mão dedo"] = mãoDedo

		let sanguinho__root = TutorialPasso6PassthroughView()
		let sanguinho__xScale = TutorialPasso6PassthroughView()
		let sanguinho__yScale = TutorialPasso6PassthroughView()
		let sanguinho = UIImageView()
		let imgSanguinho = UIImage(named:"Sanguinho.png", in: bundle, compatibleWith: nil)
		if imgSanguinho == nil {
			print("** Warning: Could not create image from 'Sanguinho.png'")
		}
		sanguinho.image = imgSanguinho
		sanguinho.contentMode = .center
		sanguinho.layer.anchorPoint = CGPoint(x:0.109, y:0.526)
		sanguinho.bounds = CGRect(x:0, y:0, width:362.0, height:404.0)
		sanguinho__root.layer.position = CGPoint(x:87.490, y:210.466)
		sanguinho__xScale.transform = CGAffineTransform(scaleX: 0.00, y: 1.00)
		sanguinho__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.00)
		sanguinho__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(sanguinho__root)
		sanguinho__root.addSubview(sanguinho__xScale)
		sanguinho__xScale.addSubview(sanguinho__yScale)
		sanguinho__yScale.addSubview(sanguinho)
		__scaling__.addSubview(sanguinho__root)
		viewsByName["Sanguinho__root"] = sanguinho__root
		viewsByName["Sanguinho__xScale"] = sanguinho__xScale
		viewsByName["Sanguinho__yScale"] = sanguinho__yScale
		viewsByName["Sanguinho"] = sanguinho

		let mãoPressiona__root = TutorialPasso6PassthroughView()
		let mãoPressiona__xScale = TutorialPasso6PassthroughView()
		let mãoPressiona__yScale = TutorialPasso6PassthroughView()
		let mãoPressiona = UIImageView()
		let imgMãoPressiona = UIImage(named:"Mão pressiona.png", in: bundle, compatibleWith: nil)
		if imgMãoPressiona == nil {
			print("** Warning: Could not create image from 'Mão pressiona.png'")
		}
		mãoPressiona.image = imgMãoPressiona
		mãoPressiona.contentMode = .center
		mãoPressiona.bounds = CGRect(x:0, y:0, width:362.0, height:404.0)
		mãoPressiona__root.layer.position = CGPoint(x:375.668, y:195.612)
		mãoPressiona__root.alpha = 0.00
		mãoPressiona__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		mãoPressiona__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		mãoPressiona__root.transform = CGAffineTransform(rotationAngle: 0.000)
		__scaling__.addSubview(mãoPressiona__root)
		mãoPressiona__root.addSubview(mãoPressiona__xScale)
		mãoPressiona__xScale.addSubview(mãoPressiona__yScale)
		mãoPressiona__yScale.addSubview(mãoPressiona)
		__scaling__.addSubview(mãoPressiona__root)
		viewsByName["Mão pressiona__root"] = mãoPressiona__root
		viewsByName["Mão pressiona__xScale"] = mãoPressiona__xScale
		viewsByName["Mão pressiona__yScale"] = mãoPressiona__yScale
		viewsByName["Mão pressiona"] = mãoPressiona

		self.viewsByName = viewsByName
	}

	// - MARK: Passo6

	func addPasso6Animation() {
		addPasso6Animation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addPasso6Animation(completion: ((Bool) -> Void)?) {
		addPasso6Animation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addPasso6Animation(removedOnCompletion: Bool) {
		addPasso6Animation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addPasso6Animation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addPasso6Animation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addPasso6Animation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		let anticOverTiming = CAMediaTimingFunction(controlPoints: 0.42, -0.30, 0.58, 1.30)
		let overshootTiming = CAMediaTimingFunction(controlPoints: 0.00, 0.00, 0.58, 1.30)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 15.000
			representativeAnimation.delegate = self
			self.layer.add(representativeAnimation, forKey: "Passo6")
			self.animationCompletions[layer.animation(forKey: "Passo6")!] = complete
		}

		let medidaOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		medidaOpacityAnimation.duration = 15.000
		medidaOpacityAnimation.values = [1.000, 1.000, 0.000, 0.000] as [Float]
		medidaOpacityAnimation.keyTimes = [0.000, 0.600, 0.633, 1.000] as [NSNumber]
		medidaOpacityAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		medidaOpacityAnimation.beginTime = beginTime
		medidaOpacityAnimation.fillMode = fillMode
		medidaOpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Medida__root"]?.layer.add(medidaOpacityAnimation, forKey:"Passo6_Opacity")

		let medidaTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		medidaTranslationXAnimation.duration = 15.000
		medidaTranslationXAnimation.values = [0.000, 0.000, 208.349, 208.349] as [Float]
		medidaTranslationXAnimation.keyTimes = [0.000, 0.540, 0.600, 1.000] as [NSNumber]
		medidaTranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		medidaTranslationXAnimation.beginTime = beginTime
		medidaTranslationXAnimation.fillMode = fillMode
		medidaTranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Medida__root"]?.layer.add(medidaTranslationXAnimation, forKey:"Passo6_TranslationX")

		let medidaTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		medidaTranslationYAnimation.duration = 15.000
		medidaTranslationYAnimation.values = [0.000, 0.000, 82.445, 82.445] as [Float]
		medidaTranslationYAnimation.keyTimes = [0.000, 0.540, 0.600, 1.000] as [NSNumber]
		medidaTranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		medidaTranslationYAnimation.beginTime = beginTime
		medidaTranslationYAnimation.fillMode = fillMode
		medidaTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Medida__root"]?.layer.add(medidaTranslationYAnimation, forKey:"Passo6_TranslationY")

		let liquidoMaskTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		liquidoMaskTranslationXAnimation.duration = 15.000
		liquidoMaskTranslationXAnimation.values = [0.000, 0.000, -40.340, -40.340] as [Float]
		liquidoMaskTranslationXAnimation.keyTimes = [0.000, 0.183, 0.313, 1.000] as [NSNumber]
		liquidoMaskTranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		liquidoMaskTranslationXAnimation.beginTime = beginTime
		liquidoMaskTranslationXAnimation.fillMode = fillMode
		liquidoMaskTranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Liquido_mask__root"]?.layer.add(liquidoMaskTranslationXAnimation, forKey:"Passo6_TranslationX")

		let liquidoMaskTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		liquidoMaskTranslationYAnimation.duration = 15.000
		liquidoMaskTranslationYAnimation.values = [0.000, 0.000, 48.582, 48.582] as [Float]
		liquidoMaskTranslationYAnimation.keyTimes = [0.000, 0.183, 0.313, 1.000] as [NSNumber]
		liquidoMaskTranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		liquidoMaskTranslationYAnimation.beginTime = beginTime
		liquidoMaskTranslationYAnimation.fillMode = fillMode
		liquidoMaskTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Liquido_mask__root"]?.layer.add(liquidoMaskTranslationYAnimation, forKey:"Passo6_TranslationY")

		let borbSemSangueOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		borbSemSangueOpacityAnimation.duration = 15.000
		borbSemSangueOpacityAnimation.values = [1.000, 1.000, 0.000, 0.000] as [Float]
		borbSemSangueOpacityAnimation.keyTimes = [0.000, 0.500, 0.533, 1.000] as [NSNumber]
		borbSemSangueOpacityAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		borbSemSangueOpacityAnimation.beginTime = beginTime
		borbSemSangueOpacityAnimation.fillMode = fillMode
		borbSemSangueOpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Borb sem sangue__root"]?.layer.add(borbSemSangueOpacityAnimation, forKey:"Passo6_Opacity")

		let garroteOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		garroteOpacityAnimation.duration = 15.000
		garroteOpacityAnimation.values = [1.000, 1.000, 0.000, 0.000] as [Float]
		garroteOpacityAnimation.keyTimes = [0.000, 0.115, 0.155, 1.000] as [NSNumber]
		garroteOpacityAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		garroteOpacityAnimation.beginTime = beginTime
		garroteOpacityAnimation.fillMode = fillMode
		garroteOpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Garrote__root"]?.layer.add(garroteOpacityAnimation, forKey:"Passo6_Opacity")

		let sangueOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		sangueOpacityAnimation.duration = 15.000
		sangueOpacityAnimation.values = [1.000, 1.000, 0.000, 0.000] as [Float]
		sangueOpacityAnimation.keyTimes = [0.000, 0.600, 0.633, 1.000] as [NSNumber]
		sangueOpacityAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		sangueOpacityAnimation.beginTime = beginTime
		sangueOpacityAnimation.fillMode = fillMode
		sangueOpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Sangue__root"]?.layer.add(sangueOpacityAnimation, forKey:"Passo6_Opacity")

		let sangueTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		sangueTranslationXAnimation.duration = 15.000
		sangueTranslationXAnimation.values = [0.000, 0.000, 208.349, 208.349] as [Float]
		sangueTranslationXAnimation.keyTimes = [0.000, 0.540, 0.600, 1.000] as [NSNumber]
		sangueTranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		sangueTranslationXAnimation.beginTime = beginTime
		sangueTranslationXAnimation.fillMode = fillMode
		sangueTranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Sangue__root"]?.layer.add(sangueTranslationXAnimation, forKey:"Passo6_TranslationX")

		let sangueTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		sangueTranslationYAnimation.duration = 15.000
		sangueTranslationYAnimation.values = [0.000, 0.000, 82.445, 82.445] as [Float]
		sangueTranslationYAnimation.keyTimes = [0.000, 0.540, 0.600, 1.000] as [NSNumber]
		sangueTranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		sangueTranslationYAnimation.beginTime = beginTime
		sangueTranslationYAnimation.fillMode = fillMode
		sangueTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Sangue__root"]?.layer.add(sangueTranslationYAnimation, forKey:"Passo6_TranslationY")

		let bandAidOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		bandAidOpacityAnimation.duration = 15.000
		bandAidOpacityAnimation.values = [0.000, 0.000, 1.000, 1.000, 0.000, 0.000] as [Float]
		bandAidOpacityAnimation.keyTimes = [0.000, 0.083, 0.115, 0.387, 0.407, 1.000] as [NSNumber]
		bandAidOpacityAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		bandAidOpacityAnimation.beginTime = beginTime
		bandAidOpacityAnimation.fillMode = fillMode
		bandAidOpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Band-aid__root"]?.layer.add(bandAidOpacityAnimation, forKey:"Passo6_Opacity")

		let bandAidTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		bandAidTranslationXAnimation.duration = 15.000
		bandAidTranslationXAnimation.values = [0.000, 0.000, 196.833, 196.833] as [Float]
		bandAidTranslationXAnimation.keyTimes = [0.000, 0.340, 0.387, 1.000] as [NSNumber]
		bandAidTranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		bandAidTranslationXAnimation.beginTime = beginTime
		bandAidTranslationXAnimation.fillMode = fillMode
		bandAidTranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Band-aid__root"]?.layer.add(bandAidTranslationXAnimation, forKey:"Passo6_TranslationX")

		let bandAidTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		bandAidTranslationYAnimation.duration = 15.000
		bandAidTranslationYAnimation.values = [0.000, 0.000, -182.340, -182.340] as [Float]
		bandAidTranslationYAnimation.keyTimes = [0.000, 0.340, 0.387, 1.000] as [NSNumber]
		bandAidTranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		bandAidTranslationYAnimation.beginTime = beginTime
		bandAidTranslationYAnimation.fillMode = fillMode
		bandAidTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Band-aid__root"]?.layer.add(bandAidTranslationYAnimation, forKey:"Passo6_TranslationY")

		let linha2OpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		linha2OpacityAnimation.duration = 15.000
		linha2OpacityAnimation.values = [1.000, 1.000, 0.000, 0.000] as [Float]
		linha2OpacityAnimation.keyTimes = [0.000, 0.600, 0.633, 1.000] as [NSNumber]
		linha2OpacityAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		linha2OpacityAnimation.beginTime = beginTime
		linha2OpacityAnimation.fillMode = fillMode
		linha2OpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Linha 2__root"]?.layer.add(linha2OpacityAnimation, forKey:"Passo6_Opacity")

		let linha2TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		linha2TranslationXAnimation.duration = 15.000
		linha2TranslationXAnimation.values = [0.000, 0.000, 208.349, 208.349] as [Float]
		linha2TranslationXAnimation.keyTimes = [0.000, 0.540, 0.600, 1.000] as [NSNumber]
		linha2TranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		linha2TranslationXAnimation.beginTime = beginTime
		linha2TranslationXAnimation.fillMode = fillMode
		linha2TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Linha 2__root"]?.layer.add(linha2TranslationXAnimation, forKey:"Passo6_TranslationX")

		let linha2TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		linha2TranslationYAnimation.duration = 15.000
		linha2TranslationYAnimation.values = [0.000, 0.000, 82.445, 82.445] as [Float]
		linha2TranslationYAnimation.keyTimes = [0.000, 0.540, 0.600, 1.000] as [NSNumber]
		linha2TranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		linha2TranslationYAnimation.beginTime = beginTime
		linha2TranslationYAnimation.fillMode = fillMode
		linha2TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Linha 2__root"]?.layer.add(linha2TranslationYAnimation, forKey:"Passo6_TranslationY")

		let linha1OpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		linha1OpacityAnimation.duration = 15.000
		linha1OpacityAnimation.values = [1.000, 1.000, 0.000, 0.000] as [Float]
		linha1OpacityAnimation.keyTimes = [0.000, 0.600, 0.633, 1.000] as [NSNumber]
		linha1OpacityAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		linha1OpacityAnimation.beginTime = beginTime
		linha1OpacityAnimation.fillMode = fillMode
		linha1OpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Linha 1__root"]?.layer.add(linha1OpacityAnimation, forKey:"Passo6_Opacity")

		let linha1TranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		linha1TranslationXAnimation.duration = 15.000
		linha1TranslationXAnimation.values = [0.000, 0.000, 208.349, 208.349] as [Float]
		linha1TranslationXAnimation.keyTimes = [0.000, 0.540, 0.600, 1.000] as [NSNumber]
		linha1TranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		linha1TranslationXAnimation.beginTime = beginTime
		linha1TranslationXAnimation.fillMode = fillMode
		linha1TranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Linha 1__root"]?.layer.add(linha1TranslationXAnimation, forKey:"Passo6_TranslationX")

		let linha1TranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		linha1TranslationYAnimation.duration = 15.000
		linha1TranslationYAnimation.values = [0.000, 0.000, 82.445, 82.445] as [Float]
		linha1TranslationYAnimation.keyTimes = [0.000, 0.540, 0.600, 1.000] as [NSNumber]
		linha1TranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		linha1TranslationYAnimation.beginTime = beginTime
		linha1TranslationYAnimation.fillMode = fillMode
		linha1TranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Linha 1__root"]?.layer.add(linha1TranslationYAnimation, forKey:"Passo6_TranslationY")

		let mãoPressionaOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		mãoPressionaOpacityAnimation.duration = 15.000
		mãoPressionaOpacityAnimation.values = [0.000, 0.000, 1.000, 1.000, 0.000] as [Float]
		mãoPressionaOpacityAnimation.keyTimes = [0.000, 0.630, 0.700, 0.933, 1.000] as [NSNumber]
		mãoPressionaOpacityAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming]
		mãoPressionaOpacityAnimation.beginTime = beginTime
		mãoPressionaOpacityAnimation.fillMode = fillMode
		mãoPressionaOpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Mão pressiona__root"]?.layer.add(mãoPressionaOpacityAnimation, forKey:"Passo6_Opacity")

		let mãoPressionaTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		mãoPressionaTranslationXAnimation.duration = 15.000
		mãoPressionaTranslationXAnimation.values = [0.000, 0.000, -150.000, -150.000, 0.000, 0.000] as [Float]
		mãoPressionaTranslationXAnimation.keyTimes = [0.000, 0.700, 0.767, 0.867, 0.933, 1.000] as [NSNumber]
		mãoPressionaTranslationXAnimation.timingFunctions = [linearTiming, overshootTiming, linearTiming, anticOverTiming, linearTiming]
		mãoPressionaTranslationXAnimation.beginTime = beginTime
		mãoPressionaTranslationXAnimation.fillMode = fillMode
		mãoPressionaTranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Mão pressiona__root"]?.layer.add(mãoPressionaTranslationXAnimation, forKey:"Passo6_TranslationX")

		let mãoPressionaTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		mãoPressionaTranslationYAnimation.duration = 15.000
		mãoPressionaTranslationYAnimation.values = [0.000, 0.000, 0.000, 0.000] as [Float]
		mãoPressionaTranslationYAnimation.keyTimes = [0.000, 0.700, 0.867, 1.000] as [NSNumber]
		mãoPressionaTranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		mãoPressionaTranslationYAnimation.beginTime = beginTime
		mãoPressionaTranslationYAnimation.fillMode = fillMode
		mãoPressionaTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Mão pressiona__root"]?.layer.add(mãoPressionaTranslationYAnimation, forKey:"Passo6_TranslationY")

		let emboloOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		emboloOpacityAnimation.duration = 15.000
		emboloOpacityAnimation.values = [1.000, 1.000, 0.000, 0.000] as [Float]
		emboloOpacityAnimation.keyTimes = [0.000, 0.600, 0.633, 1.000] as [NSNumber]
		emboloOpacityAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		emboloOpacityAnimation.beginTime = beginTime
		emboloOpacityAnimation.fillMode = fillMode
		emboloOpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Embolo__root"]?.layer.add(emboloOpacityAnimation, forKey:"Passo6_Opacity")

		let emboloTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		emboloTranslationXAnimation.duration = 15.000
		emboloTranslationXAnimation.values = [0.000, 0.000, -34.102, -34.102, 174.247, 174.247] as [Float]
		emboloTranslationXAnimation.keyTimes = [0.000, 0.183, 0.300, 0.540, 0.600, 1.000] as [NSNumber]
		emboloTranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		emboloTranslationXAnimation.beginTime = beginTime
		emboloTranslationXAnimation.fillMode = fillMode
		emboloTranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Embolo__root"]?.layer.add(emboloTranslationXAnimation, forKey:"Passo6_TranslationX")

		let emboloTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		emboloTranslationYAnimation.duration = 15.000
		emboloTranslationYAnimation.values = [0.000, 0.000, 42.336, 42.336, 124.781, 124.781] as [Float]
		emboloTranslationYAnimation.keyTimes = [0.000, 0.183, 0.300, 0.540, 0.600, 1.000] as [NSNumber]
		emboloTranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		emboloTranslationYAnimation.beginTime = beginTime
		emboloTranslationYAnimation.fillMode = fillMode
		emboloTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Embolo__root"]?.layer.add(emboloTranslationYAnimation, forKey:"Passo6_TranslationY")

		let capaOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		capaOpacityAnimation.duration = 15.000
		capaOpacityAnimation.values = [1.000, 1.000, 0.000, 0.000] as [Float]
		capaOpacityAnimation.keyTimes = [0.000, 0.600, 0.633, 1.000] as [NSNumber]
		capaOpacityAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		capaOpacityAnimation.beginTime = beginTime
		capaOpacityAnimation.fillMode = fillMode
		capaOpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Capa__root"]?.layer.add(capaOpacityAnimation, forKey:"Passo6_Opacity")

		let capaTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		capaTranslationXAnimation.duration = 15.000
		capaTranslationXAnimation.values = [0.000, 0.000, 208.349, 208.349] as [Float]
		capaTranslationXAnimation.keyTimes = [0.000, 0.540, 0.600, 1.000] as [NSNumber]
		capaTranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		capaTranslationXAnimation.beginTime = beginTime
		capaTranslationXAnimation.fillMode = fillMode
		capaTranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Capa__root"]?.layer.add(capaTranslationXAnimation, forKey:"Passo6_TranslationX")

		let capaTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		capaTranslationYAnimation.duration = 15.000
		capaTranslationYAnimation.values = [0.000, 0.000, 82.445, 82.445] as [Float]
		capaTranslationYAnimation.keyTimes = [0.000, 0.540, 0.600, 1.000] as [NSNumber]
		capaTranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		capaTranslationYAnimation.beginTime = beginTime
		capaTranslationYAnimation.fillMode = fillMode
		capaTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Capa__root"]?.layer.add(capaTranslationYAnimation, forKey:"Passo6_TranslationY")

		let borbDobradaOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		borbDobradaOpacityAnimation.duration = 15.000
		borbDobradaOpacityAnimation.values = [0.000, 0.000, 1.000, 1.000, 0.000, 0.000] as [Float]
		borbDobradaOpacityAnimation.keyTimes = [0.000, 0.500, 0.533, 0.600, 0.633, 1.000] as [NSNumber]
		borbDobradaOpacityAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		borbDobradaOpacityAnimation.beginTime = beginTime
		borbDobradaOpacityAnimation.fillMode = fillMode
		borbDobradaOpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Borb dobrada__root"]?.layer.add(borbDobradaOpacityAnimation, forKey:"Passo6_Opacity")

		let borbDobradaTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		borbDobradaTranslationXAnimation.duration = 15.000
		borbDobradaTranslationXAnimation.values = [0.000, 0.000, 208.349, 208.349] as [Float]
		borbDobradaTranslationXAnimation.keyTimes = [0.000, 0.540, 0.600, 1.000] as [NSNumber]
		borbDobradaTranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		borbDobradaTranslationXAnimation.beginTime = beginTime
		borbDobradaTranslationXAnimation.fillMode = fillMode
		borbDobradaTranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Borb dobrada__root"]?.layer.add(borbDobradaTranslationXAnimation, forKey:"Passo6_TranslationX")

		let borbDobradaTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		borbDobradaTranslationYAnimation.duration = 15.000
		borbDobradaTranslationYAnimation.values = [0.000, 0.000, 82.445, 82.445] as [Float]
		borbDobradaTranslationYAnimation.keyTimes = [0.000, 0.540, 0.600, 1.000] as [NSNumber]
		borbDobradaTranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		borbDobradaTranslationYAnimation.beginTime = beginTime
		borbDobradaTranslationYAnimation.fillMode = fillMode
		borbDobradaTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Borb dobrada__root"]?.layer.add(borbDobradaTranslationYAnimation, forKey:"Passo6_TranslationY")

		let mãoDedoOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		mãoDedoOpacityAnimation.duration = 15.000
		mãoDedoOpacityAnimation.values = [0.000, 0.000, 1.000, 1.000, 0.000, 0.000] as [Float]
		mãoDedoOpacityAnimation.keyTimes = [0.000, 0.407, 0.463, 0.600, 0.633, 1.000] as [NSNumber]
		mãoDedoOpacityAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		mãoDedoOpacityAnimation.beginTime = beginTime
		mãoDedoOpacityAnimation.fillMode = fillMode
		mãoDedoOpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Mão dedo__root"]?.layer.add(mãoDedoOpacityAnimation, forKey:"Passo6_Opacity")

		let mãoDedoTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		mãoDedoTranslationXAnimation.duration = 15.000
		mãoDedoTranslationXAnimation.values = [0.000, 0.000, -190.000, -190.000, 18.349, 18.349] as [Float]
		mãoDedoTranslationXAnimation.keyTimes = [0.000, 0.463, 0.523, 0.540, 0.600, 1.000] as [NSNumber]
		mãoDedoTranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		mãoDedoTranslationXAnimation.beginTime = beginTime
		mãoDedoTranslationXAnimation.fillMode = fillMode
		mãoDedoTranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Mão dedo__root"]?.layer.add(mãoDedoTranslationXAnimation, forKey:"Passo6_TranslationX")

		let mãoDedoTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		mãoDedoTranslationYAnimation.duration = 15.000
		mãoDedoTranslationYAnimation.values = [0.000, 0.000, 0.000, 82.445, 82.445] as [Float]
		mãoDedoTranslationYAnimation.keyTimes = [0.000, 0.463, 0.540, 0.600, 1.000] as [NSNumber]
		mãoDedoTranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming]
		mãoDedoTranslationYAnimation.beginTime = beginTime
		mãoDedoTranslationYAnimation.fillMode = fillMode
		mãoDedoTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Mão dedo__root"]?.layer.add(mãoDedoTranslationYAnimation, forKey:"Passo6_TranslationY")

		let sanguinhoOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		sanguinhoOpacityAnimation.duration = 15.000
		sanguinhoOpacityAnimation.values = [1.000, 1.000, 0.000, 0.000] as [Float]
		sanguinhoOpacityAnimation.keyTimes = [0.000, 0.800, 0.833, 1.000] as [NSNumber]
		sanguinhoOpacityAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		sanguinhoOpacityAnimation.beginTime = beginTime
		sanguinhoOpacityAnimation.fillMode = fillMode
		sanguinhoOpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Sanguinho__root"]?.layer.add(sanguinhoOpacityAnimation, forKey:"Passo6_Opacity")

		let sanguinhoScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		sanguinhoScaleXAnimation.duration = 15.000
		sanguinhoScaleXAnimation.values = [0.000, 0.000, 1.000, 1.000] as [Float]
		sanguinhoScaleXAnimation.keyTimes = [0.000, 0.540, 0.557, 1.000] as [NSNumber]
		sanguinhoScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		sanguinhoScaleXAnimation.beginTime = beginTime
		sanguinhoScaleXAnimation.fillMode = fillMode
		sanguinhoScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Sanguinho__xScale"]?.layer.add(sanguinhoScaleXAnimation, forKey:"Passo6_ScaleX")

		let sanguinhoScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		sanguinhoScaleYAnimation.duration = 15.000
		sanguinhoScaleYAnimation.values = [0.000, 0.000, 1.000, 1.000] as [Float]
		sanguinhoScaleYAnimation.keyTimes = [0.000, 0.540, 0.557, 1.000] as [NSNumber]
		sanguinhoScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		sanguinhoScaleYAnimation.beginTime = beginTime
		sanguinhoScaleYAnimation.fillMode = fillMode
		sanguinhoScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Sanguinho__yScale"]?.layer.add(sanguinhoScaleYAnimation, forKey:"Passo6_ScaleY")

		let liquidoOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		liquidoOpacityAnimation.duration = 15.000
		liquidoOpacityAnimation.values = [1.000, 1.000, 0.000, 0.000] as [Float]
		liquidoOpacityAnimation.keyTimes = [0.000, 0.600, 0.633, 1.000] as [NSNumber]
		liquidoOpacityAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		liquidoOpacityAnimation.beginTime = beginTime
		liquidoOpacityAnimation.fillMode = fillMode
		liquidoOpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Liquido__root"]?.layer.add(liquidoOpacityAnimation, forKey:"Passo6_Opacity")

		let liquidoTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		liquidoTranslationXAnimation.duration = 15.000
		liquidoTranslationXAnimation.values = [0.000, 0.000, 208.349, 208.349] as [Float]
		liquidoTranslationXAnimation.keyTimes = [0.000, 0.540, 0.600, 1.000] as [NSNumber]
		liquidoTranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		liquidoTranslationXAnimation.beginTime = beginTime
		liquidoTranslationXAnimation.fillMode = fillMode
		liquidoTranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Liquido__root"]?.layer.add(liquidoTranslationXAnimation, forKey:"Passo6_TranslationX")

		let liquidoTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		liquidoTranslationYAnimation.duration = 15.000
		liquidoTranslationYAnimation.values = [0.000, 0.000, 82.445, 82.445] as [Float]
		liquidoTranslationYAnimation.keyTimes = [0.000, 0.540, 0.600, 1.000] as [NSNumber]
		liquidoTranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		liquidoTranslationYAnimation.beginTime = beginTime
		liquidoTranslationYAnimation.fillMode = fillMode
		liquidoTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Liquido__root"]?.layer.add(liquidoTranslationYAnimation, forKey:"Passo6_TranslationY")

		let sangueMaskTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		sangueMaskTranslationXAnimation.duration = 15.000
		sangueMaskTranslationXAnimation.values = [0.000, 0.000, 8.424, 8.424] as [Float]
		sangueMaskTranslationXAnimation.keyTimes = [0.000, 0.008, 0.060, 1.000] as [NSNumber]
		sangueMaskTranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		sangueMaskTranslationXAnimation.beginTime = beginTime
		sangueMaskTranslationXAnimation.fillMode = fillMode
		sangueMaskTranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Sangue_mask__root"]?.layer.add(sangueMaskTranslationXAnimation, forKey:"Passo6_TranslationX")

		let sangueMaskTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		sangueMaskTranslationYAnimation.duration = 15.000
		sangueMaskTranslationYAnimation.values = [0.000, 0.000, 15.428, 15.428] as [Float]
		sangueMaskTranslationYAnimation.keyTimes = [0.000, 0.008, 0.060, 1.000] as [NSNumber]
		sangueMaskTranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		sangueMaskTranslationYAnimation.beginTime = beginTime
		sangueMaskTranslationYAnimation.fillMode = fillMode
		sangueMaskTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Sangue_mask__root"]?.layer.add(sangueMaskTranslationYAnimation, forKey:"Passo6_TranslationY")

		let mãoPegarOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		mãoPegarOpacityAnimation.duration = 15.000
		mãoPegarOpacityAnimation.values = [0.000, 0.000, 1.000, 1.000, 0.000, 0.000] as [Float]
		mãoPegarOpacityAnimation.keyTimes = [0.000, 0.407, 0.463, 0.600, 0.633, 1.000] as [NSNumber]
		mãoPegarOpacityAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		mãoPegarOpacityAnimation.beginTime = beginTime
		mãoPegarOpacityAnimation.fillMode = fillMode
		mãoPegarOpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Mão pegar__root"]?.layer.add(mãoPegarOpacityAnimation, forKey:"Passo6_Opacity")

		let mãoPegarTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		mãoPegarTranslationXAnimation.duration = 15.000
		mãoPegarTranslationXAnimation.values = [0.000, 0.000, -190.000, -190.000, 18.349, 18.349] as [Float]
		mãoPegarTranslationXAnimation.keyTimes = [0.000, 0.463, 0.523, 0.540, 0.600, 1.000] as [NSNumber]
		mãoPegarTranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		mãoPegarTranslationXAnimation.beginTime = beginTime
		mãoPegarTranslationXAnimation.fillMode = fillMode
		mãoPegarTranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Mão pegar__root"]?.layer.add(mãoPegarTranslationXAnimation, forKey:"Passo6_TranslationX")

		let mãoPegarTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		mãoPegarTranslationYAnimation.duration = 15.000
		mãoPegarTranslationYAnimation.values = [0.000, 0.000, 0.000, 82.445, 82.445] as [Float]
		mãoPegarTranslationYAnimation.keyTimes = [0.000, 0.463, 0.540, 0.600, 1.000] as [NSNumber]
		mãoPegarTranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming]
		mãoPegarTranslationYAnimation.beginTime = beginTime
		mãoPegarTranslationYAnimation.fillMode = fillMode
		mãoPegarTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["Mão pegar__root"]?.layer.add(mãoPegarTranslationYAnimation, forKey:"Passo6_TranslationY")
	}

	func removePasso6Animation() {
		self.layer.removeAnimation(forKey: "Passo6")
		self.viewsByName["Medida__root"]?.layer.removeAnimation(forKey: "Passo6_Opacity")
		self.viewsByName["Medida__root"]?.layer.removeAnimation(forKey: "Passo6_TranslationX")
		self.viewsByName["Medida__root"]?.layer.removeAnimation(forKey: "Passo6_TranslationY")
		self.viewsByName["Liquido_mask__root"]?.layer.removeAnimation(forKey: "Passo6_TranslationX")
		self.viewsByName["Liquido_mask__root"]?.layer.removeAnimation(forKey: "Passo6_TranslationY")
		self.viewsByName["Borb sem sangue__root"]?.layer.removeAnimation(forKey: "Passo6_Opacity")
		self.viewsByName["Garrote__root"]?.layer.removeAnimation(forKey: "Passo6_Opacity")
		self.viewsByName["Sangue__root"]?.layer.removeAnimation(forKey: "Passo6_Opacity")
		self.viewsByName["Sangue__root"]?.layer.removeAnimation(forKey: "Passo6_TranslationX")
		self.viewsByName["Sangue__root"]?.layer.removeAnimation(forKey: "Passo6_TranslationY")
		self.viewsByName["Band-aid__root"]?.layer.removeAnimation(forKey: "Passo6_Opacity")
		self.viewsByName["Band-aid__root"]?.layer.removeAnimation(forKey: "Passo6_TranslationX")
		self.viewsByName["Band-aid__root"]?.layer.removeAnimation(forKey: "Passo6_TranslationY")
		self.viewsByName["Linha 2__root"]?.layer.removeAnimation(forKey: "Passo6_Opacity")
		self.viewsByName["Linha 2__root"]?.layer.removeAnimation(forKey: "Passo6_TranslationX")
		self.viewsByName["Linha 2__root"]?.layer.removeAnimation(forKey: "Passo6_TranslationY")
		self.viewsByName["Linha 1__root"]?.layer.removeAnimation(forKey: "Passo6_Opacity")
		self.viewsByName["Linha 1__root"]?.layer.removeAnimation(forKey: "Passo6_TranslationX")
		self.viewsByName["Linha 1__root"]?.layer.removeAnimation(forKey: "Passo6_TranslationY")
		self.viewsByName["Mão pressiona__root"]?.layer.removeAnimation(forKey: "Passo6_Opacity")
		self.viewsByName["Mão pressiona__root"]?.layer.removeAnimation(forKey: "Passo6_TranslationX")
		self.viewsByName["Mão pressiona__root"]?.layer.removeAnimation(forKey: "Passo6_TranslationY")
		self.viewsByName["Embolo__root"]?.layer.removeAnimation(forKey: "Passo6_Opacity")
		self.viewsByName["Embolo__root"]?.layer.removeAnimation(forKey: "Passo6_TranslationX")
		self.viewsByName["Embolo__root"]?.layer.removeAnimation(forKey: "Passo6_TranslationY")
		self.viewsByName["Capa__root"]?.layer.removeAnimation(forKey: "Passo6_Opacity")
		self.viewsByName["Capa__root"]?.layer.removeAnimation(forKey: "Passo6_TranslationX")
		self.viewsByName["Capa__root"]?.layer.removeAnimation(forKey: "Passo6_TranslationY")
		self.viewsByName["Borb dobrada__root"]?.layer.removeAnimation(forKey: "Passo6_Opacity")
		self.viewsByName["Borb dobrada__root"]?.layer.removeAnimation(forKey: "Passo6_TranslationX")
		self.viewsByName["Borb dobrada__root"]?.layer.removeAnimation(forKey: "Passo6_TranslationY")
		self.viewsByName["Mão dedo__root"]?.layer.removeAnimation(forKey: "Passo6_Opacity")
		self.viewsByName["Mão dedo__root"]?.layer.removeAnimation(forKey: "Passo6_TranslationX")
		self.viewsByName["Mão dedo__root"]?.layer.removeAnimation(forKey: "Passo6_TranslationY")
		self.viewsByName["Sanguinho__root"]?.layer.removeAnimation(forKey: "Passo6_Opacity")
		self.viewsByName["Sanguinho__xScale"]?.layer.removeAnimation(forKey: "Passo6_ScaleX")
		self.viewsByName["Sanguinho__yScale"]?.layer.removeAnimation(forKey: "Passo6_ScaleY")
		self.viewsByName["Liquido__root"]?.layer.removeAnimation(forKey: "Passo6_Opacity")
		self.viewsByName["Liquido__root"]?.layer.removeAnimation(forKey: "Passo6_TranslationX")
		self.viewsByName["Liquido__root"]?.layer.removeAnimation(forKey: "Passo6_TranslationY")
		self.viewsByName["Sangue_mask__root"]?.layer.removeAnimation(forKey: "Passo6_TranslationX")
		self.viewsByName["Sangue_mask__root"]?.layer.removeAnimation(forKey: "Passo6_TranslationY")
		self.viewsByName["Mão pegar__root"]?.layer.removeAnimation(forKey: "Passo6_Opacity")
		self.viewsByName["Mão pegar__root"]?.layer.removeAnimation(forKey: "Passo6_TranslationX")
		self.viewsByName["Mão pegar__root"]?.layer.removeAnimation(forKey: "Passo6_TranslationY")
	}

	// MARK: CAAnimationDelegate
	func animationDidStop(_ anim: CAAnimation, finished flag: Bool) {
		if let completion = self.animationCompletions[anim] {
			self.animationCompletions.removeValue(forKey: anim)
			completion(flag)
		}
	}

	override func removeAllAnimations() {
		for subview in viewsByName.values {
			subview.layer.removeAllAnimations()
		}
		self.layer.removeAnimation(forKey: "Passo6")
	}
}
